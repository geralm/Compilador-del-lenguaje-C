package CompiladorC;

import java_cup.runtime.*;

class Parser;
/*
parser code
{:
    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
:};*/

/*Terminales*/

terminal OPERADOR, PALABRA_RESERVADA, LITERAL, IDENTIFICADOR,
     Auto, Break, Case, Char, Const, Continue, Default, Do, Double, Else, Enum, Extern, Float, For, Goto,
     If, Int, Long, Register, Return, Short, Signed, Sizeof, Static, Struct, Switch,
     Typedef, Union, Unsigned, Void, Volatile, While, Mas, Menos, Multiplicacion, Division, Decremento,
     Incremento, Igual, DobleIgual, MayorIgual, Mayor, MenorIgual, Menor, Diferente, OrDoble, AndDoble, Not, Coma,
     PuntoComa, ParentesisIzq, ParentesisDer, CorcheteIzq, CorcheteDer, LlaveIzq, LlaveDer, DosPuntos,
     Punto, SumaAsignacion, RestaAsignacion, MultiplicacionAsignacion, DivisionAsignacion, SignoPregunta,
     And, Circunflejo, Modulo, Or, DesplazamientoDerecha, DesplazamientoIzquierda, Tilde, ModuloAsignacion,
     AndAsignacion, CircunflejoAsignacion, OrAsignacion, DesplazamientoIzquierdaAsignacion,
     DesplazamientoDerechaAsignacion, Flecha;

/*No Terminales*/

nonterminal TipoDato, OpAsignacion,
    OpAritmeticoUnario, OpAritmeticoBinario, OpBoolBinario, OpBoolUnario, ExpAritmetica,
    ExpAritmeticaP, ExpBool, ExpBoolP, ExpBoolPP, DeclaracionVariable, DeclaracionVariableP,
    NuevaVariable, MasVariables, DeclaracionFuncion, DeclaracionFuncionVoid, Parametros,
    ParametrosAdicionales, CuerpoFunciones, Retornable, CuerpoFuncionesVoid, CUERPO,
    LlamarFunciones, ASIGNACION, VALOR, IF, ELSE, FOR, CuerpoCiclo, WHILE,
    DoWhile, SWITCH, CASE, DEFAULT, MAIN, DefAsignarArray, IncrementoCiclo, ExpAritmeticaBoolP,
    PROGRAMA,
    DECLARACIONES, Declaracion_Func, Declaracion, Declaracion_Specs, Clase_Specs, TipoCalificador,
    Init_Declarador_Lista, Init_Declarador, Declarador, Asignar_Expresion, ExpLogica_OR, ExpLogica_AND,
    ExpOr, ExpAnd, ExpIgualdad, ExpRelacional, ExpAditiva, ExpMultiplicativa, ExpCastear, Inicializador,
    Inicializador_lista, ExpUnaria, ExpPostfija, ExpPrimaria, Exp, Operador_Asignacion

    ;
/*Presedencia*/
/*
precedence left Suma;
precedence left Resta;
precedence left Multiplicacion;
precedence left Division;*/


/*Gram√°ticas*/

start with PROGRAMA;

//DECLARACIONES

Declaracion ::= Declaracion_Specs PuntoComa
    | Declaracion_Specs Init_Declarador_Lista PuntoComa;

TipoDato ::= Char:tipo | Int:tipo | Long:tipo | Short:tipo;

Declaracion_Specs ::= //Clase_Specs:cs
    Clase_Specs:cs Declaracion_Specs:ds
    | TipoDato:ts
    //| TipoDato:ts Declaracion_Specs:ds
    //| TipoCalificador:tq;
    | TipoCalificador:tq Declaracion_Specs:ds;

Init_Declarador_Lista ::=Init_Declarador:id
	| Init_Declarador_Lista:idl Coma Init_Declarador:id
	;

Init_Declarador ::=Declarador:d
	| Declarador:d Igual Inicializador:i;

Declarador ::=IDENTIFICADOR:identifier
	| ParentesisIzq Declarador:dd ParentesisDer
	//| Declarador:dd CorcheteIzq constant_expression:ce CorcheteDer
	| Declarador:dd CorcheteIzq CorcheteDer
	//| Declarador:dd ParentesisIzq parameter_type_list:ptl ParentesisDer
	//| Declarador:dd ParentesisIzq identifier_list:il ParentesisDer
	| Declarador:dd ParentesisIzq ParentesisDer;


Inicializador ::=Asignar_Expresion:ae
	| LlaveIzq Inicializador_lista:il LlaveDer
	| LlaveIzq Inicializador_lista:il Coma LlaveDer
	;

Inicializador_lista ::=Inicializador:i
	| Inicializador_lista:il Coma Inicializador:i;

Asignar_Expresion ::= ExpLogica_OR:or
      | ExpUnaria:ue Operador_Asignacion:aop Asignar_Expresion:ae
      ;

Operador_Asignacion ::=Igual
	| MultiplicacionAsignacion
	| DivisionAsignacion
	| ModuloAsignacion
	| SumaAsignacion
	| RestaAsignacion;
	//| MenorIgual
	//| MayorIgual;


ExpLogica_OR ::= ExpLogica_AND:ela
    | ExpLogica_OR:elo OrDoble:op ExpLogica_AND;

ExpLogica_AND ::= ExpOr:eo
    | ExpLogica_AND:ela AndDoble:op ExpOr:eo;

ExpOr ::= ExpAnd:ea
    | ExpOr:eo Or:op ExpAnd:ea;

ExpAnd ::= ExpIgualdad:ei
    | ExpAnd:ea And ExpIgualdad:ei;

ExpIgualdad ::= ExpRelacional:er
    | ExpIgualdad:ei DobleIgual ExpRelacional:er
    | ExpIgualdad:ei Diferente ExpRelacional:er;

ExpRelacional ::= ExpAditiva:ea
		      | ExpRelacional:re Menor:op ExpAditiva:ea
		      | ExpRelacional:re Mayor:op ExpAditiva:ea
		      | ExpRelacional:re MenorIgual:op ExpAditiva:ea
		      | ExpRelacional:re MayorIgual:op ExpAditiva:ea;

ExpAditiva ::= ExpMultiplicativa:em
    | ExpAditiva:ea Mas:op ExpMultiplicativa:em
    | ExpAditiva:ea Menos:op ExpMultiplicativa:em;

ExpMultiplicativa ::= ExpUnaria:ec
			  | ExpMultiplicativa:me Multiplicacion:op ExpUnaria:eu
			  | ExpMultiplicativa:me Division:op ExpUnaria:eu
			  | ExpMultiplicativa:me Modulo:op ExpUnaria:eu
			  ;

ExpUnaria ::= ExpPostfija:ep
    | Incremento:op ExpUnaria:eu
    | Decremento:op ExpUnaria:eu
    ;

ExpPostfija ::= ExpPrimaria:ep
   | ExpPostfija:ep CorcheteIzq Exp:index CorcheteDer
   | ExpPostfija:ep ParentesisIzq ParentesisDer
   | ExpPostfija:ep ParentesisIzq Exp:e ParentesisDer
   | ExpPostfija:ep Punto IDENTIFICADOR:id
   | ExpPostfija:ep Incremento:op
   | ExpPostfija:ep Decremento:op
   ;

Exp ::= Asignar_Expresion:ae
	   | Exp:e Coma Asignar_Expresion:ae;

ExpPrimaria ::= IDENTIFICADOR:ident
    | Const:constant
    | LITERAL:literal
    | ParentesisIzq Exp ParentesisDer;

PROGRAMA ::= DECLARACIONES
	| PROGRAMA DECLARACIONES;

DECLARACIONES ::= Declaracion;