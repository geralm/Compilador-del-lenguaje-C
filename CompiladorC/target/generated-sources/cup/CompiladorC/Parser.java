
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package CompiladorC;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement.*;
import javax.xml.stream.*;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\170\000\002\002\004\000\002\055\004\000\002\055" +
    "\005\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\056\004\000" +
    "\002\056\004\000\002\056\003\000\002\061\003\000\002" +
    "\061\005\000\002\062\003\000\002\062\005\000\002\063" +
    "\003\000\002\063\005\000\002\063\006\000\002\063\005" +
    "\000\002\063\005\000\002\076\003\000\002\076\005\000" +
    "\002\076\006\000\002\077\003\000\002\077\005\000\002" +
    "\064\003\000\002\064\005\000\002\104\003\000\002\104" +
    "\003\000\002\104\003\000\002\104\003\000\002\104\003" +
    "\000\002\104\003\000\002\121\003\000\002\121\007\000" +
    "\002\065\003\000\002\065\005\000\002\066\003\000\002" +
    "\066\005\000\002\067\003\000\002\067\005\000\002\070" +
    "\003\000\002\070\005\000\002\071\003\000\002\071\005" +
    "\000\002\071\005\000\002\072\003\000\002\072\005\000" +
    "\002\072\005\000\002\072\005\000\002\072\005\000\002" +
    "\073\003\000\002\073\005\000\002\073\005\000\002\074" +
    "\003\000\002\074\005\000\002\074\005\000\002\074\005" +
    "\000\002\100\003\000\002\100\004\000\002\100\004\000" +
    "\002\101\003\000\002\101\006\000\002\101\005\000\002" +
    "\101\006\000\002\101\005\000\002\101\004\000\002\101" +
    "\004\000\002\103\003\000\002\103\005\000\002\120\003" +
    "\000\002\102\003\000\002\102\003\000\002\102\003\000" +
    "\002\102\005\000\002\052\003\000\002\052\004\000\002" +
    "\053\003\000\002\053\003\000\002\106\003\000\002\106" +
    "\004\000\002\122\002\000\002\105\007\000\002\123\002" +
    "\000\002\105\006\000\002\124\002\000\002\105\006\000" +
    "\002\125\002\000\002\105\005\000\002\105\003\000\002" +
    "\110\003\000\002\110\004\000\002\107\004\000\002\107" +
    "\005\000\002\107\005\000\002\107\006\000\002\113\003" +
    "\000\002\113\004\000\002\112\005\000\002\112\006\000" +
    "\002\112\005\000\002\114\003\000\002\114\007\000\002" +
    "\051\010\000\002\050\004\000\002\115\007\000\002\115" +
    "\011\000\002\115\010\000\002\115\011\000\002\111\003" +
    "\000\002\126\002\000\002\111\004\000\002\111\003\000" +
    "\002\111\003\000\002\111\003\000\002\111\003\000\002" +
    "\116\004\000\002\116\004\000\002\116\004\000\002\116" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\026\007\022\013\005\014\015\030\013\031" +
    "\025\034\016\037\024\045\023\072\014\076\010\001\002" +
    "\000\030\002\330\007\022\013\005\014\015\030\013\031" +
    "\025\034\016\037\024\045\023\072\014\076\010\001\002" +
    "\000\010\007\ufffe\071\ufffe\072\ufffe\001\002\000\026\013" +
    "\005\014\015\030\013\031\025\034\016\037\024\045\023" +
    "\072\032\074\033\076\uffaa\001\002\000\030\002\uffa8\007" +
    "\uffa8\013\uffa8\014\uffa8\030\uffa8\031\uffa8\034\uffa8\037\uffa8" +
    "\045\uffa8\072\uffa8\076\uffa8\001\002\000\064\006\043\007" +
    "\222\011\221\012\236\013\005\014\237\015\233\016\220" +
    "\017\232\025\226\027\215\030\013\031\025\033\223\034" +
    "\016\037\024\041\230\045\023\047\225\054\035\055\057" +
    "\071\212\072\046\076\uff93\077\224\001\002\000\010\007" +
    "\ufff7\071\ufff7\072\ufff7\001\002\000\010\007\022\071\162" +
    "\072\014\001\002\000\010\007\ufffd\071\ufffd\072\ufffd\001" +
    "\002\000\006\007\022\072\014\001\002\000\020\013\005" +
    "\014\015\030\013\031\025\034\016\037\024\045\023\001" +
    "\002\000\010\007\ufffb\071\ufffb\072\ufffb\001\002\000\030" +
    "\002\uffb3\007\uffb3\013\uffb3\014\uffb3\030\uffb3\031\uffb3\034" +
    "\uffb3\037\uffb3\045\uffb3\072\uffb3\076\uffb3\001\002\000\030" +
    "\002\uffb6\007\uffb6\013\uffb6\014\uffb6\030\uffb6\031\uffb6\034" +
    "\uffb6\037\uffb6\045\uffb6\072\uffb6\076\uffb6\001\002\000\030" +
    "\002\uffb4\007\uffb4\013\uffb4\014\uffb4\030\uffb4\031\uffb4\034" +
    "\uffb4\037\uffb4\045\uffb4\072\uffb4\076\uffb4\001\002\000\036" +
    "\013\ufff2\014\ufff2\030\ufff2\031\ufff2\034\ufff2\037\ufff2\045" +
    "\ufff2\056\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2" +
    "\076\ufff2\001\002\000\010\007\ufffa\071\ufffa\072\ufffa\001" +
    "\002\000\020\013\005\014\015\030\013\031\025\034\016" +
    "\037\024\045\023\001\002\000\010\007\ufffc\071\ufffc\072" +
    "\ufffc\001\002\000\010\007\ufff8\071\ufff8\072\ufff8\001\002" +
    "\000\010\007\ufff9\071\ufff9\072\ufff9\001\002\000\010\072" +
    "\032\073\031\074\033\001\002\000\036\013\ufff1\014\ufff1" +
    "\030\ufff1\031\ufff1\034\ufff1\037\ufff1\045\ufff1\056\ufff1\070" +
    "\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\076\ufff1\001\002" +
    "\000\004\073\157\001\002\000\020\006\043\007\052\014" +
    "\044\054\035\055\057\072\046\075\040\001\002\000\056" +
    "\050\uffce\051\uffce\052\102\053\100\057\uffce\060\uffce\061" +
    "\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce\070\uffce" +
    "\071\uffce\073\uffce\075\uffce\077\uffce\100\uffce\106\uffce\107" +
    "\uffce\111\101\112\uffce\001\002\000\016\006\043\007\052" +
    "\014\044\054\035\055\057\072\046\001\002\000\050\050" +
    "\075\051\076\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3" +
    "\064\uffd3\065\uffd3\066\uffd3\070\uffd3\071\uffd3\073\uffd3\075" +
    "\uffd3\077\uffd3\100\uffd3\106\uffd3\107\uffd3\112\uffd3\001\002" +
    "\000\022\065\151\070\uffe0\071\uffe0\073\uffe0\075\uffe0\077" +
    "\uffe0\100\uffe0\106\150\001\002\000\036\013\uffef\014\uffef" +
    "\030\uffef\031\uffef\034\uffef\037\uffef\045\uffef\056\uffef\070" +
    "\uffef\071\uffef\072\uffef\073\uffef\074\uffef\076\uffef\001\002" +
    "\000\056\050\uffcb\051\uffcb\052\uffcb\053\uffcb\057\uffcb\060" +
    "\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb" +
    "\070\uffcb\071\uffcb\073\uffcb\075\uffcb\077\uffcb\100\uffcb\106" +
    "\uffcb\107\uffcb\111\uffcb\112\uffcb\001\002\000\004\075\147" +
    "\001\002\000\104\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054" +
    "\uffb8\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8" +
    "\063\uffb8\064\uffb8\065\uffb8\066\uffb8\070\uffb8\071\uffb8\072" +
    "\uffb8\073\uffb8\074\uffb8\075\uffb8\077\uffb8\100\uffb8\101\uffb8" +
    "\102\uffb8\103\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8\111" +
    "\uffb8\112\uffb8\116\uffb8\001\002\000\104\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9" +
    "\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\077" +
    "\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9" +
    "\106\uffb9\107\uffb9\111\uffb9\112\uffb9\116\uffb9\001\002\000" +
    "\034\057\065\064\066\065\uffd8\066\uffd8\070\uffd8\071\uffd8" +
    "\073\uffd8\075\uffd8\077\uffd8\100\uffd8\106\uffd8\107\uffd8\112" +
    "\uffd8\001\002\000\016\006\043\007\052\014\044\054\035" +
    "\055\057\072\046\001\002\000\104\050\uffc4\051\uffc4\052" +
    "\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4" +
    "\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\070" +
    "\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\077\uffc4" +
    "\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106" +
    "\uffc4\107\uffc4\111\uffc4\112\uffc4\116\uffc4\001\002\000\024" +
    "\065\uffde\066\143\070\uffde\071\uffde\073\uffde\075\uffde\077" +
    "\uffde\100\uffde\106\uffde\001\002\000\044\057\uffd6\060\072" +
    "\061\071\062\073\063\070\064\uffd6\065\uffd6\066\uffd6\070" +
    "\uffd6\071\uffd6\073\uffd6\075\uffd6\077\uffd6\100\uffd6\106\uffd6" +
    "\107\uffd6\112\uffd6\001\002\000\104\050\uffba\051\uffba\052" +
    "\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba" +
    "\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066\uffba\070" +
    "\uffba\071\uffba\072\uffba\073\uffba\074\uffba\075\uffba\077\uffba" +
    "\100\uffba\101\uffba\102\uffba\103\uffba\104\uffba\105\uffba\106" +
    "\uffba\107\uffba\111\uffba\112\uffba\116\uffba\001\002\000\030" +
    "\065\uffda\066\uffda\070\uffda\071\uffda\073\uffda\075\uffda\077" +
    "\uffda\100\uffda\106\uffda\107\063\112\uffda\001\002\000\006" +
    "\075\uffbb\100\uffbb\001\002\000\104\050\uffc7\051\uffc7\052" +
    "\uffc7\053\uffc7\054\115\055\113\056\uffc7\057\uffc7\060\uffc7" +
    "\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\070" +
    "\uffc7\071\uffc7\072\114\073\uffc7\074\117\075\uffc7\077\uffc7" +
    "\100\uffc7\101\116\102\uffc7\103\uffc7\104\uffc7\105\uffc7\106" +
    "\uffc7\107\uffc7\111\uffc7\112\uffc7\116\uffc7\001\002\000\026" +
    "\065\uffdc\066\uffdc\070\uffdc\071\uffdc\073\uffdc\075\uffdc\077" +
    "\uffdc\100\uffdc\106\uffdc\112\061\001\002\000\016\006\043" +
    "\007\052\014\044\054\035\055\057\072\046\001\002\000" +
    "\072\050\uffc6\051\uffc6\052\uffc6\053\uffc6\056\uffc6\057\uffc6" +
    "\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066" +
    "\uffc6\070\uffc6\071\uffc6\073\uffc6\075\uffc6\077\uffc6\100\uffc6" +
    "\102\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\111" +
    "\uffc6\112\uffc6\116\uffc6\001\002\000\016\006\043\007\052" +
    "\014\044\054\035\055\057\072\046\001\002\000\030\065" +
    "\uffd9\066\uffd9\070\uffd9\071\uffd9\073\uffd9\075\uffd9\077\uffd9" +
    "\100\uffd9\106\uffd9\107\063\112\uffd9\001\002\000\016\006" +
    "\043\007\052\014\044\054\035\055\057\072\046\001\002" +
    "\000\034\057\065\064\066\065\uffd7\066\uffd7\070\uffd7\071" +
    "\uffd7\073\uffd7\075\uffd7\077\uffd7\100\uffd7\106\uffd7\107\uffd7" +
    "\112\uffd7\001\002\000\016\006\043\007\052\014\044\054" +
    "\035\055\057\072\046\001\002\000\016\006\043\007\052" +
    "\014\044\054\035\055\057\072\046\001\002\000\044\057" +
    "\uffd4\060\072\061\071\062\073\063\070\064\uffd4\065\uffd4" +
    "\066\uffd4\070\uffd4\071\uffd4\073\uffd4\075\uffd4\077\uffd4\100" +
    "\uffd4\106\uffd4\107\uffd4\112\uffd4\001\002\000\016\006\043" +
    "\007\052\014\044\054\035\055\057\072\046\001\002\000" +
    "\016\006\043\007\052\014\044\054\035\055\057\072\046" +
    "\001\002\000\016\006\043\007\052\014\044\054\035\055" +
    "\057\072\046\001\002\000\016\006\043\007\052\014\044" +
    "\054\035\055\057\072\046\001\002\000\050\050\075\051" +
    "\076\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0" +
    "\065\uffd0\066\uffd0\070\uffd0\071\uffd0\073\uffd0\075\uffd0\077" +
    "\uffd0\100\uffd0\106\uffd0\107\uffd0\112\uffd0\001\002\000\016" +
    "\006\043\007\052\014\044\054\035\055\057\072\046\001" +
    "\002\000\016\006\043\007\052\014\044\054\035\055\057" +
    "\072\046\001\002\000\056\050\uffcc\051\uffcc\052\102\053" +
    "\100\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc" +
    "\065\uffcc\066\uffcc\070\uffcc\071\uffcc\073\uffcc\075\uffcc\077" +
    "\uffcc\100\uffcc\106\uffcc\107\uffcc\111\101\112\uffcc\001\002" +
    "\000\016\006\043\007\052\014\044\054\035\055\057\072" +
    "\046\001\002\000\016\006\043\007\052\014\044\054\035" +
    "\055\057\072\046\001\002\000\016\006\043\007\052\014" +
    "\044\054\035\055\057\072\046\001\002\000\056\050\uffca" +
    "\051\uffca\052\uffca\053\uffca\057\uffca\060\uffca\061\uffca\062" +
    "\uffca\063\uffca\064\uffca\065\uffca\066\uffca\070\uffca\071\uffca" +
    "\073\uffca\075\uffca\077\uffca\100\uffca\106\uffca\107\uffca\111" +
    "\uffca\112\uffca\001\002\000\056\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064" +
    "\uffc8\065\uffc8\066\uffc8\070\uffc8\071\uffc8\073\uffc8\075\uffc8" +
    "\077\uffc8\100\uffc8\106\uffc8\107\uffc8\111\uffc8\112\uffc8\001" +
    "\002\000\056\050\uffc9\051\uffc9\052\uffc9\053\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066" +
    "\uffc9\070\uffc9\071\uffc9\073\uffc9\075\uffc9\077\uffc9\100\uffc9" +
    "\106\uffc9\107\uffc9\111\uffc9\112\uffc9\001\002\000\056\050" +
    "\uffcd\051\uffcd\052\102\053\100\057\uffcd\060\uffcd\061\uffcd" +
    "\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\070\uffcd\071" +
    "\uffcd\073\uffcd\075\uffcd\077\uffcd\100\uffcd\106\uffcd\107\uffcd" +
    "\111\101\112\uffcd\001\002\000\050\050\075\051\076\057" +
    "\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf" +
    "\066\uffcf\070\uffcf\071\uffcf\073\uffcf\075\uffcf\077\uffcf\100" +
    "\uffcf\106\uffcf\107\uffcf\112\uffcf\001\002\000\050\050\075" +
    "\051\076\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064" +
    "\uffd1\065\uffd1\066\uffd1\070\uffd1\071\uffd1\073\uffd1\075\uffd1" +
    "\077\uffd1\100\uffd1\106\uffd1\107\uffd1\112\uffd1\001\002\000" +
    "\050\050\075\051\076\057\uffd2\060\uffd2\061\uffd2\062\uffd2" +
    "\063\uffd2\064\uffd2\065\uffd2\066\uffd2\070\uffd2\071\uffd2\073" +
    "\uffd2\075\uffd2\077\uffd2\100\uffd2\106\uffd2\107\uffd2\112\uffd2" +
    "\001\002\000\044\057\uffd5\060\072\061\071\062\073\063" +
    "\070\064\uffd5\065\uffd5\066\uffd5\070\uffd5\071\uffd5\073\uffd5" +
    "\075\uffd5\077\uffd5\100\uffd5\106\uffd5\107\uffd5\112\uffd5\001" +
    "\002\000\104\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf" +
    "\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063" +
    "\uffbf\064\uffbf\065\uffbf\066\uffbf\070\uffbf\071\uffbf\072\uffbf" +
    "\073\uffbf\074\uffbf\075\uffbf\077\uffbf\100\uffbf\101\uffbf\102" +
    "\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf\111\uffbf" +
    "\112\uffbf\116\uffbf\001\002\000\020\006\043\007\052\014" +
    "\044\054\035\055\057\072\046\073\140\001\002\000\104" +
    "\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe" +
    "\065\uffbe\066\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074" +
    "\uffbe\075\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe" +
    "\104\uffbe\105\uffbe\106\uffbe\107\uffbe\111\uffbe\112\uffbe\116" +
    "\uffbe\001\002\000\004\007\137\001\002\000\016\006\043" +
    "\007\052\014\044\054\035\055\057\072\046\001\002\000" +
    "\014\070\uffbd\071\uffbd\073\uffbd\075\uffbd\100\uffbd\001\002" +
    "\000\072\050\uffcb\051\uffcb\052\uffcb\053\uffcb\056\135\057" +
    "\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb" +
    "\066\uffcb\070\uffcb\071\uffcb\073\uffcb\075\uffcb\077\uffcb\100" +
    "\uffcb\102\134\103\132\104\131\105\133\106\uffcb\107\uffcb" +
    "\111\uffcb\112\uffcb\116\130\001\002\000\006\070\124\075" +
    "\125\001\002\000\016\070\uffe8\071\uffe8\073\uffe8\075\uffe8" +
    "\077\uffe8\100\uffe8\001\002\000\016\006\043\007\052\014" +
    "\044\054\035\055\057\072\046\001\002\000\104\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3" +
    "\066\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075" +
    "\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3" +
    "\105\uffc3\106\uffc3\107\uffc3\111\uffc3\112\uffc3\116\uffc3\001" +
    "\002\000\014\070\uffbc\071\uffbc\073\uffbc\075\uffbc\100\uffbc" +
    "\001\002\000\016\006\043\007\052\014\044\054\035\055" +
    "\057\072\046\001\002\000\016\006\uffe3\007\uffe3\014\uffe3" +
    "\054\uffe3\055\uffe3\072\uffe3\001\002\000\016\006\uffe5\007" +
    "\uffe5\014\uffe5\054\uffe5\055\uffe5\072\uffe5\001\002\000\016" +
    "\006\uffe1\007\uffe1\014\uffe1\054\uffe1\055\uffe1\072\uffe1\001" +
    "\002\000\016\006\uffe4\007\uffe4\014\uffe4\054\uffe4\055\uffe4" +
    "\072\uffe4\001\002\000\016\006\uffe2\007\uffe2\014\uffe2\054" +
    "\uffe2\055\uffe2\072\uffe2\001\002\000\016\006\uffe6\007\uffe6" +
    "\014\uffe6\054\uffe6\055\uffe6\072\uffe6\001\002\000\016\070" +
    "\uffe7\071\uffe7\073\uffe7\075\uffe7\077\uffe7\100\uffe7\001\002" +
    "\000\104\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055" +
    "\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0" +
    "\064\uffc0\065\uffc0\066\uffc0\070\uffc0\071\uffc0\072\uffc0\073" +
    "\uffc0\074\uffc0\075\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0" +
    "\103\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\111\uffc0\112" +
    "\uffc0\116\uffc0\001\002\000\104\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061" +
    "\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\070\uffc2" +
    "\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\077\uffc2\100" +
    "\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2" +
    "\107\uffc2\111\uffc2\112\uffc2\116\uffc2\001\002\000\006\070" +
    "\124\073\142\001\002\000\104\050\uffc1\051\uffc1\052\uffc1" +
    "\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\070\uffc1" +
    "\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\077\uffc1\100" +
    "\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1\105\uffc1\106\uffc1" +
    "\107\uffc1\111\uffc1\112\uffc1\116\uffc1\001\002\000\016\006" +
    "\043\007\052\014\044\054\035\055\057\072\046\001\002" +
    "\000\026\065\uffdb\066\uffdb\070\uffdb\071\uffdb\073\uffdb\075" +
    "\uffdb\077\uffdb\100\uffdb\106\uffdb\112\061\001\002\000\006" +
    "\070\124\073\146\001\002\000\104\050\uffb7\051\uffb7\052" +
    "\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\070" +
    "\uffb7\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\077\uffb7" +
    "\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7\106" +
    "\uffb7\107\uffb7\111\uffb7\112\uffb7\116\uffb7\001\002\000\036" +
    "\013\ufff0\014\ufff0\030\ufff0\031\ufff0\034\ufff0\037\ufff0\045" +
    "\ufff0\056\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0" +
    "\076\ufff0\001\002\000\016\006\043\007\052\014\044\054" +
    "\035\055\057\072\046\001\002\000\016\006\043\007\052" +
    "\014\044\054\035\055\057\072\046\001\002\000\024\065" +
    "\uffdd\066\143\070\uffdd\071\uffdd\073\uffdd\075\uffdd\077\uffdd" +
    "\100\uffdd\106\uffdd\001\002\000\006\070\124\100\154\001" +
    "\002\000\016\006\043\007\052\014\044\054\035\055\057" +
    "\072\046\001\002\000\016\070\uffdf\071\uffdf\073\uffdf\075" +
    "\uffdf\077\uffdf\100\uffdf\001\002\000\072\050\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062" +
    "\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\070\uffc5\071\uffc5" +
    "\073\uffc5\075\uffc5\077\uffc5\100\uffc5\102\uffc5\103\uffc5\104" +
    "\uffc5\105\uffc5\106\uffc5\107\uffc5\111\uffc5\112\uffc5\116\uffc5" +
    "\001\002\000\036\013\uffee\014\uffee\030\uffee\031\uffee\034" +
    "\uffee\037\uffee\045\uffee\056\uffee\070\uffee\071\uffee\072\uffee" +
    "\073\uffee\074\uffee\076\uffee\001\002\000\006\070\ufff6\071" +
    "\ufff6\001\002\000\034\013\005\014\015\030\013\031\025" +
    "\034\016\037\024\045\023\056\170\070\ufff4\071\ufff4\072" +
    "\032\074\033\076\uffae\001\002\000\066\002\000\006\000" +
    "\007\000\011\000\012\000\013\000\014\000\015\000\016" +
    "\000\017\000\025\000\027\000\030\000\031\000\033\000" +
    "\034\000\037\000\041\000\045\000\047\000\054\000\055" +
    "\000\071\000\072\000\076\000\077\000\001\002\000\006" +
    "\070\164\071\165\001\002\000\006\007\022\072\014\001" +
    "\002\000\066\002\uffff\006\uffff\007\uffff\011\uffff\012\uffff" +
    "\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\025\uffff\027" +
    "\uffff\030\uffff\031\uffff\033\uffff\034\uffff\037\uffff\041\uffff" +
    "\045\uffff\047\uffff\054\uffff\055\uffff\071\uffff\072\uffff\076" +
    "\uffff\077\uffff\001\002\000\006\070\ufff5\071\ufff5\001\002" +
    "\000\014\056\170\070\ufff4\071\ufff4\072\032\074\033\001" +
    "\002\000\020\006\043\007\052\014\044\054\035\055\057" +
    "\072\046\076\172\001\002\000\010\070\uffed\071\uffed\077" +
    "\uffed\001\002\000\020\006\043\007\052\014\044\054\035" +
    "\055\057\072\046\076\172\001\002\000\006\070\ufff3\071" +
    "\ufff3\001\002\000\006\070\uffea\077\uffea\001\002\000\006" +
    "\070\176\077\177\001\002\000\022\006\043\007\052\014" +
    "\044\054\035\055\057\072\046\076\172\077\201\001\002" +
    "\000\010\070\uffec\071\uffec\077\uffec\001\002\000\006\070" +
    "\uffe9\077\uffe9\001\002\000\010\070\uffeb\071\uffeb\077\uffeb" +
    "\001\002\000\022\013\005\014\015\030\013\031\025\034" +
    "\016\037\024\045\023\076\uffb0\001\002\000\004\076\010" +
    "\001\002\000\064\006\uffb2\007\uffb2\011\uffb2\012\uffb2\013" +
    "\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\025\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\033\uffb2\034\uffb2\037\uffb2\041\uffb2\045" +
    "\uffb2\047\uffb2\054\uffb2\055\uffb2\071\uffb2\072\uffb2\076\uffb2" +
    "\077\uffb2\001\002\000\010\007\022\071\162\072\014\001" +
    "\002\000\030\002\uffad\007\uffad\013\uffad\014\uffad\030\uffad" +
    "\031\uffad\034\uffad\037\uffad\045\uffad\072\uffad\076\uffad\001" +
    "\002\000\004\076\010\001\002\000\064\006\uffb1\007\uffb1" +
    "\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\025\uffb1\027\uffb1\030\uffb1\031\uffb1\033\uffb1\034\uffb1" +
    "\037\uffb1\041\uffb1\045\uffb1\047\uffb1\054\uffb1\055\uffb1\071" +
    "\uffb1\072\uffb1\076\uffb1\077\uffb1\001\002\000\030\002\uffaf" +
    "\007\uffaf\013\uffaf\014\uffaf\030\uffaf\031\uffaf\034\uffaf\037" +
    "\uffaf\045\uffaf\072\uffaf\076\uffaf\001\002\000\054\006\uffa1" +
    "\007\uffa1\011\uffa1\012\uffa1\014\uffa1\015\uffa1\016\uffa1\017" +
    "\uffa1\021\uffa1\025\uffa1\027\uffa1\033\uffa1\041\uffa1\047\uffa1" +
    "\054\uffa1\055\uffa1\071\uffa1\072\uffa1\073\uffa1\076\uffa1\077" +
    "\uffa1\001\002\000\052\006\uff8f\007\uff8f\011\uff8f\012\uff8f" +
    "\014\uff8f\015\uff8f\016\uff8f\017\uff8f\021\uff8f\025\uff8f\027" +
    "\uff8f\033\uff8f\041\uff8f\047\uff8f\054\uff8f\055\uff8f\071\uff8f" +
    "\072\uff8f\076\uff8f\077\uff8f\001\002\000\050\006\043\007" +
    "\222\011\221\012\236\014\044\015\233\016\220\017\232" +
    "\025\226\027\215\033\223\041\230\047\225\054\035\055" +
    "\057\071\212\072\046\076\uff93\077\322\001\002\000\004" +
    "\072\313\001\002\000\052\006\uff94\007\uff94\011\uff94\012" +
    "\uff94\014\uff94\015\uff94\016\uff94\017\uff94\021\uff94\025\uff94" +
    "\027\uff94\033\uff94\041\uff94\047\uff94\054\uff94\055\uff94\071" +
    "\uff94\072\uff94\076\uff94\077\uff94\001\002\000\064\006\043" +
    "\007\222\011\221\012\236\013\005\014\237\015\233\016" +
    "\220\017\232\025\226\027\215\030\013\031\025\033\223" +
    "\034\016\037\024\041\230\045\023\047\225\054\035\055" +
    "\057\071\212\072\046\076\uff93\077\310\001\002\000\004" +
    "\100\305\001\002\000\004\071\304\001\002\000\076\050" +
    "\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba" +
    "\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065" +
    "\uffba\066\uffba\070\uffba\071\uffba\072\uffba\074\uffba\100\302" +
    "\101\uffba\102\uffba\103\uffba\104\uffba\105\uffba\106\uffba\107" +
    "\uffba\111\uffba\112\uffba\116\uffba\001\002\000\020\006\043" +
    "\007\052\014\044\054\035\055\057\071\300\072\046\001" +
    "\002\000\070\002\uffa5\006\uffa5\007\uffa5\011\uffa5\012\uffa5" +
    "\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\021\uffa5\025" +
    "\uffa5\027\uffa5\030\uffa5\031\uffa5\033\uffa5\034\uffa5\037\uffa5" +
    "\041\uffa5\045\uffa5\047\uffa5\054\uffa5\055\uffa5\071\uffa5\072" +
    "\uffa5\076\uffa5\077\uffa5\001\002\000\004\072\273\001\002" +
    "\000\004\072\263\001\002\000\052\006\uff9c\007\uff9c\011" +
    "\uff9c\012\uff9c\014\uff9c\015\uff9c\016\uff9c\017\uff9c\021\uff9c" +
    "\025\uff9c\027\uff9c\033\uff9c\041\uff9c\047\uff9c\054\uff9c\055" +
    "\uff9c\071\uff9c\072\uff9c\076\uff9c\077\uff9c\001\002\000\004" +
    "\072\257\001\002\000\052\006\uff8e\007\uff8e\011\uff8e\012" +
    "\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\021\uff8e\025\uff8e" +
    "\027\uff8e\033\uff8e\041\uff8e\047\uff8e\054\uff8e\055\uff8e\071" +
    "\uff8e\072\uff8e\076\uff8e\077\uff8e\001\002\000\046\006\043" +
    "\007\222\011\221\012\236\014\044\015\233\016\220\017" +
    "\232\025\226\027\215\033\223\041\230\047\225\054\035" +
    "\055\057\071\212\072\046\076\uff93\001\002\000\004\071" +
    "\250\001\002\000\006\070\124\071\247\001\002\000\052" +
    "\006\uff91\007\uff91\011\uff91\012\uff91\014\uff91\015\uff91\016" +
    "\uff91\017\uff91\021\uff91\025\uff91\027\uff91\033\uff91\041\uff91" +
    "\047\uff91\054\uff91\055\uff91\071\uff91\072\uff91\076\uff91\077" +
    "\uff91\001\002\000\016\006\043\007\052\014\044\054\035" +
    "\055\057\072\046\001\002\000\112\013\005\014\015\030" +
    "\013\031\025\034\016\037\024\045\023\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9" +
    "\070\uffb9\071\uffb9\072\uffb9\074\uffb9\101\uffb9\102\uffb9\103" +
    "\uffb9\104\uffb9\105\uffb9\106\uffb9\107\uffb9\111\uffb9\112\uffb9" +
    "\116\uffb9\001\002\000\050\006\uffa7\007\uffa7\011\uffa7\012" +
    "\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\025\uffa7\027\uffa7" +
    "\033\uffa7\041\uffa7\047\uffa7\054\uffa7\055\uffa7\071\uffa7\072" +
    "\uffa7\076\uffa7\077\uffa7\001\002\000\052\006\uff90\007\uff90" +
    "\011\uff90\012\uff90\014\uff90\015\uff90\016\uff90\017\uff90\021" +
    "\uff90\025\uff90\027\uff90\033\uff90\041\uff90\047\uff90\054\uff90" +
    "\055\uff90\071\uff90\072\uff90\076\uff90\077\uff90\001\002\000" +
    "\004\076\010\001\002\000\052\006\uff92\007\uff92\011\uff92" +
    "\012\uff92\014\uff92\015\uff92\016\uff92\017\uff92\021\uff92\025" +
    "\uff92\027\uff92\033\uff92\041\uff92\047\uff92\054\uff92\055\uff92" +
    "\071\uff92\072\uff92\076\uff92\077\uff92\001\002\000\004\100" +
    "\245\001\002\000\046\006\043\007\222\011\221\012\236" +
    "\014\044\015\233\016\220\017\232\025\226\027\215\033" +
    "\223\041\230\047\225\054\035\055\057\071\212\072\046" +
    "\076\uff93\001\002\000\052\006\uff9e\007\uff9e\011\uff9e\012" +
    "\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\021\uff9e\025\uff9e" +
    "\027\uff9e\033\uff9e\041\uff9e\047\uff9e\054\uff9e\055\uff9e\071" +
    "\uff9e\072\uff9e\076\uff9e\077\uff9e\001\002\000\054\006\uffa0" +
    "\007\uffa0\011\uffa0\012\uffa0\014\uffa0\015\uffa0\016\uffa0\017" +
    "\uffa0\021\uffa0\025\uffa0\027\uffa0\033\uffa0\041\uffa0\047\uffa0" +
    "\054\uffa0\055\uffa0\071\uffa0\072\uffa0\073\uffa0\076\uffa0\077" +
    "\uffa0\001\002\000\052\006\uff8d\007\uff8d\011\uff8d\012\uff8d" +
    "\014\uff8d\015\uff8d\016\uff8d\017\uff8d\021\uff8d\025\uff8d\027" +
    "\uff8d\033\uff8d\041\uff8d\047\uff8d\054\uff8d\055\uff8d\071\uff8d" +
    "\072\uff8d\076\uff8d\077\uff8d\001\002\000\004\047\252\001" +
    "\002\000\004\072\253\001\002\000\016\006\043\007\052" +
    "\014\044\054\035\055\057\072\046\001\002\000\006\070" +
    "\124\073\255\001\002\000\004\071\256\001\002\000\052" +
    "\006\uff97\007\uff97\011\uff97\012\uff97\014\uff97\015\uff97\016" +
    "\uff97\017\uff97\021\uff97\025\uff97\027\uff97\033\uff97\041\uff97" +
    "\047\uff97\054\uff97\055\uff97\071\uff97\072\uff97\076\uff97\077" +
    "\uff97\001\002\000\016\006\043\007\052\014\044\054\035" +
    "\055\057\072\046\001\002\000\006\070\124\073\261\001" +
    "\002\000\046\006\043\007\222\011\221\012\236\014\044" +
    "\015\233\016\220\017\232\025\226\027\215\033\223\041" +
    "\230\047\225\054\035\055\057\071\212\072\046\076\uff93" +
    "\001\002\000\052\006\uff9b\007\uff9b\011\uff9b\012\uff9b\014" +
    "\uff9b\015\uff9b\016\uff9b\017\uff9b\021\uff9b\025\uff9b\027\uff9b" +
    "\033\uff9b\041\uff9b\047\uff9b\054\uff9b\055\uff9b\071\uff9b\072" +
    "\uff9b\076\uff9b\077\uff9b\001\002\000\020\006\043\007\052" +
    "\014\044\054\035\055\057\071\212\072\046\001\002\000" +
    "\020\006\043\007\052\014\044\054\035\055\057\071\212" +
    "\072\046\001\002\000\020\006\043\007\052\014\044\054" +
    "\035\055\057\072\046\073\266\001\002\000\046\006\043" +
    "\007\222\011\221\012\236\014\044\015\233\016\220\017" +
    "\232\025\226\027\215\033\223\041\230\047\225\054\035" +
    "\055\057\071\212\072\046\076\uff93\001\002\000\006\070" +
    "\124\073\270\001\002\000\046\006\043\007\222\011\221" +
    "\012\236\014\044\015\233\016\220\017\232\025\226\027" +
    "\215\033\223\041\230\047\225\054\035\055\057\071\212" +
    "\072\046\076\uff93\001\002\000\052\006\uff95\007\uff95\011" +
    "\uff95\012\uff95\014\uff95\015\uff95\016\uff95\017\uff95\021\uff95" +
    "\025\uff95\027\uff95\033\uff95\041\uff95\047\uff95\054\uff95\055" +
    "\uff95\071\uff95\072\uff95\076\uff95\077\uff95\001\002\000\052" +
    "\006\uff96\007\uff96\011\uff96\012\uff96\014\uff96\015\uff96\016" +
    "\uff96\017\uff96\021\uff96\025\uff96\027\uff96\033\uff96\041\uff96" +
    "\047\uff96\054\uff96\055\uff96\071\uff96\072\uff96\076\uff96\077" +
    "\uff96\001\002\000\016\006\043\007\052\014\044\054\035" +
    "\055\057\072\046\001\002\000\006\070\124\073\275\001" +
    "\002\000\046\006\043\007\222\011\221\012\236\014\044" +
    "\015\233\016\220\017\232\025\226\027\215\033\223\041" +
    "\230\047\225\054\035\055\057\071\212\072\046\076\uff93" +
    "\001\002\000\052\006\uff98\007\uff98\011\uff98\012\uff98\014" +
    "\uff98\015\uff98\016\uff98\017\uff98\021\uff98\025\uff98\027\uff98" +
    "\033\uff98\041\uff98\047\uff98\054\uff98\055\uff98\071\uff98\072" +
    "\uff98\076\uff98\077\uff98\001\002\000\006\070\124\071\301" +
    "\001\002\000\052\006\uff8b\007\uff8b\011\uff8b\012\uff8b\014" +
    "\uff8b\015\uff8b\016\uff8b\017\uff8b\021\uff8b\025\uff8b\027\uff8b" +
    "\033\uff8b\041\uff8b\047\uff8b\054\uff8b\055\uff8b\071\uff8b\072" +
    "\uff8b\076\uff8b\077\uff8b\001\002\000\052\006\uff8a\007\uff8a" +
    "\011\uff8a\012\uff8a\014\uff8a\015\uff8a\016\uff8a\017\uff8a\021" +
    "\uff8a\025\uff8a\027\uff8a\033\uff8a\041\uff8a\047\uff8a\054\uff8a" +
    "\055\uff8a\071\uff8a\072\uff8a\076\uff8a\077\uff8a\001\002\000" +
    "\046\006\043\007\222\011\221\012\236\014\044\015\233" +
    "\016\220\017\232\025\226\027\215\033\223\041\230\047" +
    "\225\054\035\055\057\071\212\072\046\076\uff93\001\002" +
    "\000\052\006\uff9f\007\uff9f\011\uff9f\012\uff9f\014\uff9f\015" +
    "\uff9f\016\uff9f\017\uff9f\021\uff9f\025\uff9f\027\uff9f\033\uff9f" +
    "\041\uff9f\047\uff9f\054\uff9f\055\uff9f\071\uff9f\072\uff9f\076" +
    "\uff9f\077\uff9f\001\002\000\052\006\uff8c\007\uff8c\011\uff8c" +
    "\012\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\021\uff8c\025" +
    "\uff8c\027\uff8c\033\uff8c\041\uff8c\047\uff8c\054\uff8c\055\uff8c" +
    "\071\uff8c\072\uff8c\076\uff8c\077\uff8c\001\002\000\046\006" +
    "\043\007\222\011\221\012\236\014\044\015\233\016\220" +
    "\017\232\025\226\027\215\033\223\041\230\047\225\054" +
    "\035\055\057\071\212\072\046\076\uff93\001\002\000\052" +
    "\006\uff9d\007\uff9d\011\uff9d\012\uff9d\014\uff9d\015\uff9d\016" +
    "\uff9d\017\uff9d\021\uff9d\025\uff9d\027\uff9d\033\uff9d\041\uff9d" +
    "\047\uff9d\054\uff9d\055\uff9d\071\uff9d\072\uff9d\076\uff9d\077" +
    "\uff9d\001\002\000\050\006\043\007\222\011\221\012\236" +
    "\014\044\015\233\016\220\017\232\025\226\027\215\033" +
    "\223\041\230\047\225\054\035\055\057\071\212\072\046" +
    "\076\uff93\077\311\001\002\000\070\002\uffa3\006\uffa3\007" +
    "\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3" +
    "\017\uffa3\021\uffa3\025\uffa3\027\uffa3\030\uffa3\031\uffa3\033" +
    "\uffa3\034\uffa3\037\uffa3\041\uffa3\045\uffa3\047\uffa3\054\uffa3" +
    "\055\uffa3\071\uffa3\072\uffa3\076\uffa3\077\uffa3\001\002\000" +
    "\070\002\uffa2\006\uffa2\007\uffa2\011\uffa2\012\uffa2\013\uffa2" +
    "\014\uffa2\015\uffa2\016\uffa2\017\uffa2\021\uffa2\025\uffa2\027" +
    "\uffa2\030\uffa2\031\uffa2\033\uffa2\034\uffa2\037\uffa2\041\uffa2" +
    "\045\uffa2\047\uffa2\054\uffa2\055\uffa2\071\uffa2\072\uffa2\076" +
    "\uffa2\077\uffa2\001\002\000\050\006\uffa6\007\uffa6\011\uffa6" +
    "\012\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\025\uffa6\027" +
    "\uffa6\033\uffa6\041\uffa6\047\uffa6\054\uffa6\055\uffa6\071\uffa6" +
    "\072\uffa6\076\uffa6\077\uffa6\001\002\000\016\006\043\007" +
    "\052\014\044\054\035\055\057\072\046\001\002\000\006" +
    "\070\124\073\315\001\002\000\046\006\043\007\222\011" +
    "\221\012\236\014\044\015\233\016\220\017\232\025\226" +
    "\027\215\033\223\041\230\047\225\054\035\055\057\071" +
    "\212\072\046\076\uff93\001\002\000\004\021\317\001\002" +
    "\000\046\006\043\007\222\011\221\012\236\014\044\015" +
    "\233\016\220\017\232\025\226\027\215\033\223\041\230" +
    "\047\225\054\035\055\057\071\212\072\046\076\uff93\001" +
    "\002\000\052\006\uff9a\007\uff9a\011\uff9a\012\uff9a\014\uff9a" +
    "\015\uff9a\016\uff9a\017\uff9a\021\uff9a\025\uff9a\027\uff9a\033" +
    "\uff9a\041\uff9a\047\uff9a\054\uff9a\055\uff9a\071\uff9a\072\uff9a" +
    "\076\uff9a\077\uff9a\001\002\000\052\006\uff99\007\uff99\011" +
    "\uff99\012\uff99\014\uff99\015\uff99\016\uff99\017\uff99\021\uff99" +
    "\025\uff99\027\uff99\033\uff99\041\uff99\047\uff99\054\uff99\055" +
    "\uff99\071\uff99\072\uff99\076\uff99\077\uff99\001\002\000\070" +
    "\002\uffa4\006\uffa4\007\uffa4\011\uffa4\012\uffa4\013\uffa4\014" +
    "\uffa4\015\uffa4\016\uffa4\017\uffa4\021\uffa4\025\uffa4\027\uffa4" +
    "\030\uffa4\031\uffa4\033\uffa4\034\uffa4\037\uffa4\041\uffa4\045" +
    "\uffa4\047\uffa4\054\uffa4\055\uffa4\071\uffa4\072\uffa4\076\uffa4" +
    "\077\uffa4\001\002\000\004\076\010\001\002\000\022\013" +
    "\005\014\015\030\013\031\025\034\016\037\024\045\023" +
    "\076\uffac\001\002\000\004\076\010\001\002\000\030\002" +
    "\uffab\007\uffab\013\uffab\014\uffab\030\uffab\031\uffab\034\uffab" +
    "\037\uffab\045\uffab\072\uffab\076\uffab\001\002\000\030\002" +
    "\uffa9\007\uffa9\013\uffa9\014\uffa9\030\uffa9\031\uffa9\034\uffa9" +
    "\037\uffa9\045\uffa9\072\uffa9\076\uffa9\001\002\000\004\002" +
    "\001\001\002\000\030\002\uffb5\007\uffb5\013\uffb5\014\uffb5" +
    "\030\uffb5\031\uffb5\034\uffb5\037\uffb5\045\uffb5\072\uffb5\076" +
    "\uffb5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\022\002\010\052\003\053\017\055\020\056" +
    "\011\063\005\105\016\107\006\001\001\000\020\002\010" +
    "\053\330\055\020\056\011\063\005\105\016\107\006\001" +
    "\001\000\002\001\001\000\014\002\010\055\203\056\204" +
    "\106\323\125\322\001\001\000\002\001\001\000\070\002" +
    "\010\051\226\055\203\056\204\064\117\065\036\066\047" +
    "\067\055\070\052\071\044\072\050\073\035\074\033\100" +
    "\120\101\054\102\046\103\233\106\216\110\213\111\237" +
    "\112\215\113\234\114\240\115\212\116\230\121\122\126" +
    "\241\001\001\000\002\001\001\000\010\061\162\062\157" +
    "\063\160\001\001\000\002\001\001\000\004\063\027\001" +
    "\001\000\006\002\010\056\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\010\056\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\065\036\066\047\067\055\070\052\071\044\072" +
    "\050\073\035\074\033\100\040\101\054\102\046\120\041" +
    "\121\053\001\001\000\002\001\001\000\010\100\155\101" +
    "\054\102\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\064\117\065\036\066\047\067\055\070\052\071\044\072" +
    "\050\073\035\074\033\100\120\101\054\102\046\103\144" +
    "\121\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\100" +
    "\057\101\054\102\046\001\001\000\002\001\001\000\022" +
    "\070\061\071\044\072\050\073\035\074\033\100\040\101" +
    "\054\102\046\001\001\000\002\001\001\000\020\071\063" +
    "\072\050\073\035\074\033\100\040\101\054\102\046\001" +
    "\001\000\002\001\001\000\016\072\111\073\035\074\033" +
    "\100\040\101\054\102\046\001\001\000\016\072\066\073" +
    "\035\074\033\100\040\101\054\102\046\001\001\000\002" +
    "\001\001\000\014\073\110\074\033\100\040\101\054\102" +
    "\046\001\001\000\014\073\107\074\033\100\040\101\054" +
    "\102\046\001\001\000\014\073\106\074\033\100\040\101" +
    "\054\102\046\001\001\000\014\073\073\074\033\100\040" +
    "\101\054\102\046\001\001\000\002\001\001\000\012\074" +
    "\105\100\040\101\054\102\046\001\001\000\012\074\076" +
    "\100\040\101\054\102\046\001\001\000\002\001\001\000" +
    "\010\100\104\101\054\102\046\001\001\000\010\100\103" +
    "\101\054\102\046\001\001\000\010\100\102\101\054\102" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\064\117\065\036\066\047\067\055\070\052\071" +
    "\044\072\050\073\035\074\033\100\120\101\054\102\046" +
    "\103\140\121\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\064\117\065\036\066\047\067\055\070\052" +
    "\071\044\072\050\073\035\074\033\100\120\101\054\102" +
    "\046\103\121\121\122\001\001\000\002\001\001\000\004" +
    "\104\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\064\125\065\036\066\047\067\055\070\052\071\044" +
    "\072\050\073\035\074\033\100\120\101\054\102\046\121" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\064\135\065\036\066\047\067\055\070\052\071\044\072" +
    "\050\073\035\074\033\100\120\101\054\102\046\121\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\067\143\070\052" +
    "\071\044\072\050\073\035\074\033\100\040\101\054\102" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\064\117\065\036\066" +
    "\047\067\055\070\052\071\044\072\050\073\035\074\033" +
    "\100\120\101\054\102\046\103\152\121\122\001\001\000" +
    "\026\066\151\067\055\070\052\071\044\072\050\073\035" +
    "\074\033\100\040\101\054\102\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\065\036\066\047\067\055" +
    "\070\052\071\044\072\050\073\035\074\033\100\040\101" +
    "\054\102\046\121\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\010\055\203\056\204\106\201\123\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\062\165\063\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\064\170\065\036\066\047\067\055\070\052\071" +
    "\044\072\050\073\035\074\033\076\172\100\120\101\054" +
    "\102\046\121\122\001\001\000\002\001\001\000\040\064" +
    "\170\065\036\066\047\067\055\070\052\071\044\072\050" +
    "\073\035\074\033\076\173\077\174\100\120\101\054\102" +
    "\046\121\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\064\170\065\036\066\047\067" +
    "\055\070\052\071\044\072\050\073\035\074\033\076\177" +
    "\100\120\101\054\102\046\121\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\010" +
    "\055\207\056\204\122\206\001\001\000\004\107\205\001" +
    "\001\000\002\001\001\000\010\061\162\062\157\063\166" +
    "\001\001\000\002\001\001\000\004\107\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\051\226\064\117\065\036\066\047\067" +
    "\055\070\052\071\044\072\050\073\035\074\033\100\120" +
    "\101\054\102\046\103\233\111\311\112\215\113\234\114" +
    "\240\115\212\116\230\121\122\126\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\066\002\010\051\226\055" +
    "\207\056\204\064\117\065\036\066\047\067\055\070\052" +
    "\071\044\072\050\073\035\074\033\100\120\101\054\102" +
    "\046\103\233\110\306\111\237\112\215\113\234\114\240" +
    "\115\212\116\230\121\122\126\241\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\064\117" +
    "\065\036\066\047\067\055\070\052\071\044\072\050\073" +
    "\035\074\033\100\120\101\054\102\046\103\276\121\122" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\051\226\064\117\065\036\066\047\067\055\070" +
    "\052\071\044\072\050\073\035\074\033\100\120\101\054" +
    "\102\046\103\233\111\250\112\215\113\234\114\240\115" +
    "\212\116\230\121\122\126\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\065\036\066" +
    "\047\067\055\070\052\071\044\072\050\073\035\074\033" +
    "\100\040\101\054\102\046\120\243\121\053\001\001\000" +
    "\006\002\010\056\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\107\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\051\226\064\117\065\036\066\047" +
    "\067\055\070\052\071\044\072\050\073\035\074\033\100" +
    "\120\101\054\102\046\103\233\111\245\112\215\113\234" +
    "\114\240\115\212\116\230\121\122\126\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\064\117\065\036\066" +
    "\047\067\055\070\052\071\044\072\050\073\035\074\033" +
    "\100\120\101\054\102\046\103\253\121\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\064\117\065\036\066\047\067\055\070\052\071\044\072" +
    "\050\073\035\074\033\100\120\101\054\102\046\103\257" +
    "\121\122\001\001\000\002\001\001\000\056\051\226\064" +
    "\117\065\036\066\047\067\055\070\052\071\044\072\050" +
    "\073\035\074\033\100\120\101\054\102\046\103\233\111" +
    "\261\112\215\113\234\114\240\115\212\116\230\121\122" +
    "\126\241\001\001\000\002\001\001\000\040\064\117\065" +
    "\036\066\047\067\055\070\052\071\044\072\050\073\035" +
    "\074\033\100\120\101\054\102\046\103\233\113\263\121" +
    "\122\001\001\000\040\064\117\065\036\066\047\067\055" +
    "\070\052\071\044\072\050\073\035\074\033\100\120\101" +
    "\054\102\046\103\233\113\264\121\122\001\001\000\036" +
    "\064\117\065\036\066\047\067\055\070\052\071\044\072" +
    "\050\073\035\074\033\100\120\101\054\102\046\103\266" +
    "\121\122\001\001\000\056\051\226\064\117\065\036\066" +
    "\047\067\055\070\052\071\044\072\050\073\035\074\033" +
    "\100\120\101\054\102\046\103\233\111\271\112\215\113" +
    "\234\114\240\115\212\116\230\121\122\126\241\001\001" +
    "\000\002\001\001\000\056\051\226\064\117\065\036\066" +
    "\047\067\055\070\052\071\044\072\050\073\035\074\033" +
    "\100\120\101\054\102\046\103\233\111\270\112\215\113" +
    "\234\114\240\115\212\116\230\121\122\126\241\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\064\117\065" +
    "\036\066\047\067\055\070\052\071\044\072\050\073\035" +
    "\074\033\100\120\101\054\102\046\103\273\121\122\001" +
    "\001\000\002\001\001\000\056\051\226\064\117\065\036" +
    "\066\047\067\055\070\052\071\044\072\050\073\035\074" +
    "\033\100\120\101\054\102\046\103\233\111\275\112\215" +
    "\113\234\114\240\115\212\116\230\121\122\126\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\051\226\064\117\065\036\066" +
    "\047\067\055\070\052\071\044\072\050\073\035\074\033" +
    "\100\120\101\054\102\046\103\233\111\302\112\215\113" +
    "\234\114\240\115\212\116\230\121\122\126\241\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\051\226\064" +
    "\117\065\036\066\047\067\055\070\052\071\044\072\050" +
    "\073\035\074\033\100\120\101\054\102\046\103\233\111" +
    "\305\112\215\113\234\114\240\115\212\116\230\121\122" +
    "\126\241\001\001\000\002\001\001\000\056\051\226\064" +
    "\117\065\036\066\047\067\055\070\052\071\044\072\050" +
    "\073\035\074\033\100\120\101\054\102\046\103\233\111" +
    "\311\112\215\113\234\114\240\115\212\116\230\121\122" +
    "\126\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\064\117\065\036\066\047\067\055" +
    "\070\052\071\044\072\050\073\035\074\033\100\120\101" +
    "\054\102\046\103\313\121\122\001\001\000\002\001\001" +
    "\000\056\051\226\064\117\065\036\066\047\067\055\070" +
    "\052\071\044\072\050\073\035\074\033\100\120\101\054" +
    "\102\046\103\233\111\315\112\215\113\234\114\240\115" +
    "\212\116\230\121\122\126\241\001\001\000\004\050\317" +
    "\001\001\000\056\051\226\064\117\065\036\066\047\067" +
    "\055\070\052\071\044\072\050\073\035\074\033\100\120" +
    "\101\054\102\046\103\233\111\320\112\215\113\234\114" +
    "\240\115\212\116\230\121\122\126\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\107" +
    "\326\001\001\000\012\002\010\055\207\056\204\124\324" +
    "\001\001\000\004\107\325\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol cur_token){
	System.err.println("Syntax error at "+cur_token);
    }
    public static void newScope(){
	typenames.push(new HashSet<String>());
    }
    public static void deleteScope(){
	typenames.pop();
    }
    public static boolean lookupType(String name){
	for (HashSet<String> scope: typenames)
	    if (scope.contains(name)) return true;
	return false;
    }
    public static void addType(String name){
	typenames.peek().add(name);
    }
    public static LinkedList<HashSet<String>> typenames = new LinkedList<HashSet<String>>();
    public Parser(LexerCupAnalyzer lex, ComplexSymbolFactory sf) {
	super(lex,sf);
    }

    public static void main(String args[]) {
	try {
	    ComplexSymbolFactory csf = new ComplexSymbolFactory();
	    // create a buffering scanner wrapper
	   String expresion = "int prueba(){if (a == b){int hola = 0;}else{} return 0;};";
       LexerCupAnalyzer lexer = new LexerCupAnalyzer(new StringReader(expresion));
	    // start parsing
	    Parser p = new Parser(lexer,csf);
	    System.out.println("Parser runs: ");
	    newScope();
	    XMLElement e = (XMLElement)p.parse().value;/*
	    // create XML output file
	    XMLOutputFactory outFactory = XMLOutputFactory.newInstance();
	    XMLStreamWriter sw = outFactory.createXMLStreamWriter(new FileOutputStream(args[1]));
	    // dump XML output to the file
	    XMLElement.dump(lexer,sw,e); //,"expr","stmt");
	    // transform the parse tree into an AST and a rendered HTML version
	    Transformer transformer = TransformerFactory.newInstance()
		.newTransformer(new StreamSource(new File("tree.xsl")));
	    Source text = new StreamSource(new File(args[1]));
	    transformer.transform(text, new StreamResult(new File("output.html")));
*/
	    System.out.println("Parsing finished!");
	} catch (Exception e) {
	    e.printStackTrace();
	}
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Declaracion ::= Declaracion_Specs PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Declaracion ::= Declaracion_Specs Init_Declarador_Lista PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TipoDato ::= Char 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoDato",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TipoDato ::= Int 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoDato",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TipoDato ::= Long 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoDato",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TipoDato ::= Short 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoDato",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TipoDato ::= Void 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoDato",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaracion_Specs ::= Const Declaracion_Specs 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion_Specs",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaracion_Specs ::= Static Declaracion_Specs 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion_Specs",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaracion_Specs ::= TipoDato 
            {
              Object RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion_Specs",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Init_Declarador_Lista ::= Init_Declarador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init_Declarador_Lista",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Init_Declarador_Lista ::= Init_Declarador_Lista Coma Init_Declarador 
            {
              Object RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init_Declarador_Lista",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Init_Declarador ::= Declarador 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init_Declarador",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Init_Declarador ::= Declarador Igual Inicializador 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init_Declarador",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Declarador ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Declarador ::= ParentesisIzq Declarador ParentesisDer 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Declarador ::= Declarador CorcheteIzq ExpConst CorcheteDer 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Declarador ::= Declarador CorcheteIzq CorcheteDer 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Declarador ::= Declarador ParentesisIzq ParentesisDer 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Inicializador ::= Asignar_Expresion 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inicializador",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Inicializador ::= LlaveIzq Inicializador_lista LlaveDer 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inicializador",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Inicializador ::= LlaveIzq Inicializador_lista Coma LlaveDer 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inicializador",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Inicializador_lista ::= Inicializador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inicializador_lista",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Inicializador_lista ::= Inicializador_lista Coma Inicializador 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inicializador_lista",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Asignar_Expresion ::= ExpCondicional 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignar_Expresion",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Asignar_Expresion ::= ExpUnaria Operador_Asignacion Asignar_Expresion 
            {
              Object RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ue = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object aop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignar_Expresion",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Operador_Asignacion ::= Igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operador_Asignacion",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Operador_Asignacion ::= MultiplicacionAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operador_Asignacion",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Operador_Asignacion ::= DivisionAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operador_Asignacion",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Operador_Asignacion ::= ModuloAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operador_Asignacion",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Operador_Asignacion ::= SumaAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operador_Asignacion",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Operador_Asignacion ::= RestaAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operador_Asignacion",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ExpCondicional ::= ExpLogica_OR 
            {
              Object RESULT =null;
		int eloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object elo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpCondicional",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ExpCondicional ::= ExpLogica_OR SignoPregunta Exp DosPuntos ExpCondicional 
            {
              Object RESULT =null;
		int eloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object elo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpCondicional",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ExpLogica_OR ::= ExpLogica_AND 
            {
              Object RESULT =null;
		int elaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ela = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpLogica_OR",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ExpLogica_OR ::= ExpLogica_OR OrDoble ExpLogica_AND 
            {
              Object RESULT =null;
		int eloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object elo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpLogica_OR",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ExpLogica_AND ::= ExpOr 
            {
              Object RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpLogica_AND",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ExpLogica_AND ::= ExpLogica_AND AndDoble ExpOr 
            {
              Object RESULT =null;
		int elaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ela = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpLogica_AND",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ExpOr ::= ExpAnd 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpOr",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ExpOr ::= ExpOr Or ExpAnd 
            {
              Object RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpOr",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExpAnd ::= ExpIgualdad 
            {
              Object RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAnd",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ExpAnd ::= ExpAnd And ExpIgualdad 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAnd",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ExpIgualdad ::= ExpRelacional 
            {
              Object RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpIgualdad",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ExpIgualdad ::= ExpIgualdad DobleIgual ExpRelacional 
            {
              Object RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpIgualdad",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ExpIgualdad ::= ExpIgualdad Diferente ExpRelacional 
            {
              Object RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpIgualdad",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ExpRelacional ::= ExpAditiva 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ExpRelacional ::= ExpRelacional Menor ExpAditiva 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ExpRelacional ::= ExpRelacional Mayor ExpAditiva 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExpRelacional ::= ExpRelacional MenorIgual ExpAditiva 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExpRelacional ::= ExpRelacional MayorIgual ExpAditiva 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ExpAditiva ::= ExpMultiplicativa 
            {
              Object RESULT =null;
		int emleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int emright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object em = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAditiva",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpAditiva ::= ExpAditiva Mas ExpMultiplicativa 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int emleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int emright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object em = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAditiva",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpAditiva ::= ExpAditiva Menos ExpMultiplicativa 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int emleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int emright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object em = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAditiva",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ExpMultiplicativa ::= ExpUnaria 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiplicativa",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ExpMultiplicativa ::= ExpMultiplicativa Multiplicacion ExpUnaria 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiplicativa",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExpMultiplicativa ::= ExpMultiplicativa Division ExpUnaria 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiplicativa",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExpMultiplicativa ::= ExpMultiplicativa Modulo ExpUnaria 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiplicativa",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ExpUnaria ::= ExpPostfija 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpUnaria",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExpUnaria ::= Incremento ExpUnaria 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpUnaria",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExpUnaria ::= Decremento ExpUnaria 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpUnaria",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExpPostfija ::= ExpPrimaria 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExpPostfija ::= ExpPostfija CorcheteIzq Exp CorcheteDer 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object index = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExpPostfija ::= ExpPostfija ParentesisIzq ParentesisDer 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExpPostfija ::= ExpPostfija ParentesisIzq Exp ParentesisDer 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExpPostfija ::= ExpPostfija Punto IDENTIFICADOR 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExpPostfija ::= ExpPostfija Incremento 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ExpPostfija ::= ExpPostfija Decremento 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp ::= Asignar_Expresion 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp ::= Exp Coma Asignar_Expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExpConst ::= ExpCondicional 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpConst",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ExpPrimaria ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ExpPrimaria ::= Const 
            {
              Object RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object constant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ExpPrimaria ::= LITERAL 
            {
              Object RESULT =null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object literal = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ExpPrimaria ::= ParentesisIzq Exp ParentesisDer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PROGRAMA ::= DECLARACIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PROGRAMA ::= PROGRAMA DECLARACIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACIONES ::= Declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACIONES ::= DeclaracionFuncion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Declaracion_Lista ::= Declaracion 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion_Lista",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Declaracion_Lista ::= Declaracion_Lista Declaracion 
            {
              Object RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion_Lista",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$0 ::= 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Parser.newScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DeclaracionFuncion ::= Declaracion_Specs Declarador Declaracion_Lista NT$0 DeclaracionCompuesta 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Parser.deleteScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$1 ::= 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Parser.newScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DeclaracionFuncion ::= Declaracion_Specs Declarador NT$1 DeclaracionCompuesta 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Parser.deleteScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$2 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Parser.newScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DeclaracionFuncion ::= Declarador Declaracion_Lista NT$2 DeclaracionCompuesta 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Parser.deleteScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$3 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Parser.newScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DeclaracionFuncion ::= Declarador NT$3 DeclaracionCompuesta 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Parser.deleteScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DeclaracionFuncion ::= DeclaracionCompuesta 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Lista_Statement ::= Statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lista_Statement",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Lista_Statement ::= Lista_Statement Statement 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lista_Statement",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DeclaracionCompuesta ::= LlaveIzq LlaveDer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionCompuesta",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DeclaracionCompuesta ::= LlaveIzq Lista_Statement LlaveDer 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionCompuesta",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DeclaracionCompuesta ::= LlaveIzq Declaracion_Lista LlaveDer 
            {
              Object RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionCompuesta",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DeclaracionCompuesta ::= LlaveIzq Declaracion_Lista Lista_Statement LlaveDer 
            {
              Object RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionCompuesta",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExpStatement ::= PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpStatement",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ExpStatement ::= Exp PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpStatement",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Statement_Label ::= IDENTIFICADOR DosPuntos Statement 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement_Label",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Statement_Label ::= Case ExpConst DosPuntos Statement 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement_Label",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Statement_Label ::= Default DosPuntos Statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement_Label",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SeleccionStatement ::= seleccionStatementIF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SeleccionStatement",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SeleccionStatement ::= Switch ParentesisIzq Exp ParentesisDer Statement 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SeleccionStatement",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // seleccionStatementIF ::= If ParentesisIzq Exp ParentesisDer Statement seleccionStatementIFElse 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seleccionStatementIF",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // seleccionStatementIFElse ::= Else Statement 
            {
              Object RESULT =null;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seleccionStatementIFElse",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // IteracionStatement ::= While ParentesisIzq Exp ParentesisDer Statement 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IteracionStatement",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // IteracionStatement ::= Do Statement While ParentesisIzq Exp ParentesisDer PuntoComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IteracionStatement",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // IteracionStatement ::= For ParentesisIzq ExpStatement ExpStatement ParentesisDer Statement 
            {
              Object RESULT =null;
		int es1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int es1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object es1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int es2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int es2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object es2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IteracionStatement",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // IteracionStatement ::= For ParentesisIzq ExpStatement ExpStatement Exp ParentesisDer Statement 
            {
              Object RESULT =null;
		int es1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int es1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object es1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int es2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int es2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object es2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IteracionStatement",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Statement ::= Statement_Label 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$4 ::= 
            {
              Object RESULT =null;
 Parser.newScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Statement ::= NT$4 DeclaracionCompuesta 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Parser.deleteScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Statement ::= ExpStatement 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Statement ::= SeleccionStatement 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Statement ::= IteracionStatement 
            {
              Object RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Statement ::= JumpStatement 
            {
              Object RESULT =null;
		int jsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object js = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // JumpStatement ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JumpStatement",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // JumpStatement ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JumpStatement",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // JumpStatement ::= Return PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JumpStatement",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // JumpStatement ::= Return Exp PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JumpStatement",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
