
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package CompiladorC;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement.*;
import javax.xml.stream.*;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;
import Semantic.*;
import Semantic.AccionesSemanticas.AccionSemantica;
import Semantic.TablaSimbolos.*;
import Semantic.AccionesSemanticas.*;
import Semantic.RegistrosSemanticos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\261\000\002\002\004\000\002\005\004\000\002\005" +
    "\005\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\006\004\000" +
    "\002\006\004\000\002\006\003\000\002\007\003\000\002" +
    "\007\005\000\002\010\003\000\002\010\005\000\002\011" +
    "\003\000\002\011\005\000\002\011\006\000\002\011\005" +
    "\000\002\011\006\000\002\011\006\000\002\011\005\000" +
    "\002\047\003\000\002\047\005\000\002\052\004\000\002" +
    "\052\004\000\002\052\003\000\002\053\005\000\002\053" +
    "\004\000\002\053\005\000\002\053\005\000\002\053\006" +
    "\000\002\053\004\000\002\053\005\000\002\053\005\000" +
    "\002\053\006\000\002\054\003\000\002\054\005\000\002" +
    "\023\003\000\002\023\005\000\002\023\006\000\002\024" +
    "\003\000\002\024\005\000\002\012\003\000\002\012\005" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\046\003\000\002\046\007\000\002\013\003\000\002\057" +
    "\002\000\002\013\006\000\002\014\003\000\002\060\002" +
    "\000\002\014\006\000\002\015\003\000\002\061\002\000" +
    "\002\015\006\000\002\016\003\000\002\062\002\000\002" +
    "\016\006\000\002\017\003\000\002\063\002\000\002\017" +
    "\006\000\002\064\002\000\002\017\006\000\002\020\003" +
    "\000\002\065\002\000\002\020\006\000\002\066\002\000" +
    "\002\020\006\000\002\067\002\000\002\020\006\000\002" +
    "\070\002\000\002\020\006\000\002\021\003\000\002\071" +
    "\002\000\002\021\006\000\002\072\002\000\002\021\006" +
    "\000\002\022\003\000\002\073\002\000\002\022\006\000" +
    "\002\074\002\000\002\022\006\000\002\075\002\000\002" +
    "\022\006\000\002\025\003\000\002\076\002\000\002\025" +
    "\005\000\002\077\002\000\002\025\005\000\002\026\003" +
    "\000\002\026\006\000\002\026\005\000\002\026\006\000" +
    "\002\026\005\000\002\026\004\000\002\026\004\000\002" +
    "\030\003\000\002\030\005\000\002\045\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\005" +
    "\000\002\100\002\000\002\027\005\000\002\003\003\000" +
    "\002\003\004\000\002\004\003\000\002\004\003\000\002" +
    "\101\002\000\002\004\005\000\002\102\002\000\002\004" +
    "\005\000\002\103\002\000\002\004\005\000\002\033\003" +
    "\000\002\033\004\000\002\104\002\000\002\105\002\000" +
    "\002\032\010\000\002\106\002\000\002\032\006\000\002" +
    "\107\002\000\002\110\002\000\002\032\007\000\002\111" +
    "\002\000\002\032\005\000\002\032\003\000\002\035\003" +
    "\000\002\035\004\000\002\034\004\000\002\034\005\000" +
    "\002\034\005\000\002\034\006\000\002\040\003\000\002" +
    "\040\004\000\002\112\002\000\002\040\005\000\002\037" +
    "\005\000\002\037\006\000\002\037\005\000\002\041\003" +
    "\000\002\041\007\000\002\113\002\000\002\114\002\000" +
    "\002\115\002\000\002\051\013\000\002\116\002\000\002" +
    "\050\005\000\002\117\002\000\002\120\002\000\002\042" +
    "\011\000\002\042\011\000\002\042\010\000\002\042\011" +
    "\000\002\036\003\000\002\121\002\000\002\036\004\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\043" +
    "\004\000\002\043\004\000\002\043\004\000\002\043\005" +
    "\000\002\056\006\000\002\055\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0126\000\030\003\022\007\023\013\005\014\015\030" +
    "\013\031\026\034\016\037\025\045\024\072\014\076\007" +
    "\001\002\000\032\002\u0127\003\022\007\023\013\005\014" +
    "\015\030\013\031\026\034\016\037\025\045\024\072\014" +
    "\076\007\001\002\000\016\007\ufffe\070\ufffe\071\ufffe\072" +
    "\ufffe\073\ufffe\074\ufffe\001\002\000\026\013\uff80\014\uff80" +
    "\030\uff80\031\uff80\034\uff80\037\uff80\045\uff80\072\041\074" +
    "\042\076\uff7d\001\002\000\072\003\325\006\052\007\316" +
    "\011\314\012\333\013\005\014\335\015\331\016\313\017" +
    "\330\025\323\027\310\030\013\031\026\033\320\034\016" +
    "\037\025\041\326\045\024\047\322\054\044\055\067\071" +
    "\305\072\054\076\uff5e\077\321\125\315\126\342\001\002" +
    "\000\032\002\uff7b\003\uff7b\007\uff7b\013\uff7b\014\uff7b\030" +
    "\uff7b\031\uff7b\034\uff7b\037\uff7b\045\uff7b\072\uff7b\076\uff7b" +
    "\001\002\000\016\007\ufff7\070\ufff7\071\ufff7\072\ufff7\073" +
    "\ufff7\074\ufff7\001\002\000\010\007\023\071\254\072\014" +
    "\001\002\000\016\007\ufffd\070\ufffd\071\ufffd\072\ufffd\073" +
    "\ufffd\074\ufffd\001\002\000\006\007\023\072\014\001\002" +
    "\000\020\013\005\014\015\030\013\031\026\034\016\037" +
    "\025\045\024\001\002\000\016\007\ufffb\070\ufffb\071\ufffb" +
    "\072\ufffb\073\ufffb\074\ufffb\001\002\000\032\002\uff8e\003" +
    "\uff8e\007\uff8e\013\uff8e\014\uff8e\030\uff8e\031\uff8e\034\uff8e" +
    "\037\uff8e\045\uff8e\072\uff8e\076\uff8e\001\002\000\032\002" +
    "\uff91\003\uff91\007\uff91\013\uff91\014\uff91\030\uff91\031\uff91" +
    "\034\uff91\037\uff91\045\uff91\072\uff91\076\uff91\001\002\000" +
    "\032\002\uff8f\003\uff8f\007\uff8f\013\uff8f\014\uff8f\030\uff8f" +
    "\031\uff8f\034\uff8f\037\uff8f\045\uff8f\072\uff8f\076\uff8f\001" +
    "\002\000\010\071\uff8d\076\uff8b\077\uff89\001\002\000\036" +
    "\013\ufff2\014\ufff2\030\ufff2\031\ufff2\034\ufff2\037\ufff2\045" +
    "\ufff2\056\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2" +
    "\076\ufff2\001\002\000\016\007\ufffa\070\ufffa\071\ufffa\072" +
    "\ufffa\073\ufffa\074\ufffa\001\002\000\020\013\005\014\015" +
    "\030\013\031\026\034\016\037\025\045\024\001\002\000" +
    "\016\007\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc" +
    "\001\002\000\016\007\ufff8\070\ufff8\071\ufff8\072\ufff8\073" +
    "\ufff8\074\ufff8\001\002\000\004\077\035\001\002\000\004" +
    "\076\034\001\002\000\004\071\033\001\002\000\032\002" +
    "\uff8c\003\uff8c\007\uff8c\013\uff8c\014\uff8c\030\uff8c\031\uff8c" +
    "\034\uff8c\037\uff8c\045\uff8c\072\uff8c\076\uff8c\001\002\000" +
    "\032\002\uff8a\003\uff8a\007\uff8a\013\uff8a\014\uff8a\030\uff8a" +
    "\031\uff8a\034\uff8a\037\uff8a\045\uff8a\072\uff8a\076\uff8a\001" +
    "\002\000\032\002\uff88\003\uff88\007\uff88\013\uff88\014\uff88" +
    "\030\uff88\031\uff88\034\uff88\037\uff88\045\uff88\072\uff88\076" +
    "\uff88\001\002\000\016\007\ufff9\070\ufff9\071\ufff9\072\ufff9" +
    "\073\ufff9\074\ufff9\001\002\000\010\072\041\073\040\074" +
    "\042\001\002\000\036\013\ufff1\014\ufff1\030\ufff1\031\ufff1" +
    "\034\ufff1\037\ufff1\045\ufff1\056\ufff1\070\ufff1\071\ufff1\072" +
    "\ufff1\073\ufff1\074\ufff1\076\ufff1\001\002\000\024\007\217" +
    "\013\005\014\015\030\013\031\026\034\016\037\025\045" +
    "\024\073\214\001\002\000\022\003\061\006\052\007\062" +
    "\014\055\054\044\055\067\072\054\075\047\001\002\000" +
    "\056\050\uffb2\051\uffb2\052\120\053\116\057\uffb2\060\uffb2" +
    "\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\070" +
    "\uffb2\071\uffb2\073\uffb2\075\uffb2\077\uffb2\100\uffb2\106\uffb2" +
    "\107\uffb2\111\117\112\uffb2\001\002\000\020\003\uffa3\006" +
    "\uffa3\007\uffa3\014\uffa3\054\uffa3\055\uffa3\072\uffa3\001\002" +
    "\000\050\050\113\051\112\057\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\070\uffbb\071\uffbb" +
    "\073\uffbb\075\uffbb\077\uffbb\100\uffbb\106\uffbb\107\uffbb\112" +
    "\uffbb\001\002\000\022\065\202\070\uffce\071\uffce\073\uffce" +
    "\075\uffce\077\uffce\100\uffce\106\201\001\002\000\036\013" +
    "\uffef\014\uffef\030\uffef\031\uffef\034\uffef\037\uffef\045\uffef" +
    "\056\uffef\070\uffef\071\uffef\072\uffef\073\uffef\074\uffef\076" +
    "\uffef\001\002\000\056\050\uffad\051\uffad\052\uffad\053\uffad" +
    "\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065" +
    "\uffad\066\uffad\070\uffad\071\uffad\073\uffad\075\uffad\077\uffad" +
    "\100\uffad\106\uffad\107\uffad\111\uffad\112\uffad\001\002\000" +
    "\004\075\200\001\002\000\104\050\uff95\051\uff95\052\uff95" +
    "\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\060\uff95\061" +
    "\uff95\062\uff95\063\uff95\064\uff95\065\uff95\066\uff95\070\uff95" +
    "\071\uff95\072\uff95\073\uff95\074\uff95\075\uff95\077\uff95\100" +
    "\uff95\101\uff95\102\uff95\103\uff95\104\uff95\105\uff95\106\uff95" +
    "\107\uff95\111\uff95\112\uff95\116\uff95\001\002\000\034\057" +
    "\100\064\101\065\uffc3\066\uffc3\070\uffc3\071\uffc3\073\uffc3" +
    "\075\uffc3\077\uffc3\100\uffc3\106\uffc3\107\uffc3\112\uffc3\001" +
    "\002\000\020\003\061\006\052\007\062\014\055\054\044" +
    "\055\067\072\054\001\002\000\104\050\uff96\051\uff96\052" +
    "\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060\uff96" +
    "\061\uff96\062\uff96\063\uff96\064\uff96\065\uff96\066\uff96\070" +
    "\uff96\071\uff96\072\uff96\073\uff96\074\uff96\075\uff96\077\uff96" +
    "\100\uff96\101\uff96\102\uff96\103\uff96\104\uff96\105\uff96\106" +
    "\uff96\107\uff96\111\uff96\112\uff96\116\uff96\001\002\000\104" +
    "\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056" +
    "\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1" +
    "\065\uffa1\066\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1\074" +
    "\uffa1\075\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1\103\uffa1" +
    "\104\uffa1\105\uffa1\106\uffa1\107\uffa1\111\uffa1\112\uffa1\116" +
    "\uffa1\001\002\000\024\065\uffcc\066\173\070\uffcc\071\uffcc" +
    "\073\uffcc\075\uffcc\077\uffcc\100\uffcc\106\uffcc\001\002\000" +
    "\044\057\uffc0\060\106\061\105\062\107\063\104\064\uffc0" +
    "\065\uffc0\066\uffc0\070\uffc0\071\uffc0\073\uffc0\075\uffc0\077" +
    "\uffc0\100\uffc0\106\uffc0\107\uffc0\112\uffc0\001\002\000\004" +
    "\072\uff93\001\002\000\104\050\uff97\051\uff97\052\uff97\053" +
    "\uff97\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97" +
    "\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97\070\uff97\071" +
    "\uff97\072\uff97\073\uff97\074\uff97\075\uff97\077\uff97\100\uff97" +
    "\101\uff97\102\uff97\103\uff97\104\uff97\105\uff97\106\uff97\107" +
    "\uff97\111\uff97\112\uff97\116\uff97\001\002\000\030\065\uffc6" +
    "\066\uffc6\070\uffc6\071\uffc6\073\uffc6\075\uffc6\077\uffc6\100" +
    "\uffc6\106\uffc6\107\075\112\uffc6\001\002\000\006\075\uff98" +
    "\100\uff98\001\002\000\104\050\uffa6\051\uffa6\052\uffa6\053" +
    "\uffa6\054\143\055\141\056\uffa6\057\uffa6\060\uffa6\061\uffa6" +
    "\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\070\uffa6\071" +
    "\uffa6\072\142\073\uffa6\074\145\075\uffa6\077\uffa6\100\uffa6" +
    "\101\144\102\uffa6\103\uffa6\104\uffa6\105\uffa6\106\uffa6\107" +
    "\uffa6\111\uffa6\112\uffa6\116\uffa6\001\002\000\026\065\uffc9" +
    "\066\uffc9\070\uffc9\071\uffc9\073\uffc9\075\uffc9\077\uffc9\100" +
    "\uffc9\106\uffc9\112\072\001\002\000\020\003\uffa5\006\uffa5" +
    "\007\uffa5\014\uffa5\054\uffa5\055\uffa5\072\uffa5\001\002\000" +
    "\020\003\061\006\052\007\062\014\055\054\044\055\067" +
    "\072\054\001\002\000\072\050\uffa4\051\uffa4\052\uffa4\053" +
    "\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4" +
    "\064\uffa4\065\uffa4\066\uffa4\070\uffa4\071\uffa4\073\uffa4\075" +
    "\uffa4\077\uffa4\100\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4" +
    "\106\uffa4\107\uffa4\111\uffa4\112\uffa4\116\uffa4\001\002\000" +
    "\020\003\uffc5\006\uffc5\007\uffc5\014\uffc5\054\uffc5\055\uffc5" +
    "\072\uffc5\001\002\000\020\003\061\006\052\007\062\014" +
    "\055\054\044\055\067\072\054\001\002\000\030\065\uffc4" +
    "\066\uffc4\070\uffc4\071\uffc4\073\uffc4\075\uffc4\077\uffc4\100" +
    "\uffc4\106\uffc4\107\075\112\uffc4\001\002\000\020\003\uffc2" +
    "\006\uffc2\007\uffc2\014\uffc2\054\uffc2\055\uffc2\072\uffc2\001" +
    "\002\000\020\003\061\006\052\007\062\014\055\054\044" +
    "\055\067\072\054\001\002\000\034\057\100\064\101\065" +
    "\uffc1\066\uffc1\070\uffc1\071\uffc1\073\uffc1\075\uffc1\077\uffc1" +
    "\100\uffc1\106\uffc1\107\uffc1\112\uffc1\001\002\000\020\003" +
    "\uffbf\006\uffbf\007\uffbf\014\uffbf\054\uffbf\055\uffbf\072\uffbf" +
    "\001\002\000\020\003\uffbd\006\uffbd\007\uffbd\014\uffbd\054" +
    "\uffbd\055\uffbd\072\uffbd\001\002\000\020\003\061\006\052" +
    "\007\062\014\055\054\044\055\067\072\054\001\002\000" +
    "\044\057\uffbc\060\106\061\105\062\107\063\104\064\uffbc" +
    "\065\uffbc\066\uffbc\070\uffbc\071\uffbc\073\uffbc\075\uffbc\077" +
    "\uffbc\100\uffbc\106\uffbc\107\uffbc\112\uffbc\001\002\000\020" +
    "\003\uffba\006\uffba\007\uffba\014\uffba\054\uffba\055\uffba\072" +
    "\uffba\001\002\000\020\003\uffb8\006\uffb8\007\uffb8\014\uffb8" +
    "\054\uffb8\055\uffb8\072\uffb8\001\002\000\020\003\uffb4\006" +
    "\uffb4\007\uffb4\014\uffb4\054\uffb4\055\uffb4\072\uffb4\001\002" +
    "\000\020\003\uffb6\006\uffb6\007\uffb6\014\uffb6\054\uffb6\055" +
    "\uffb6\072\uffb6\001\002\000\020\003\061\006\052\007\062" +
    "\014\055\054\044\055\067\072\054\001\002\000\050\050" +
    "\113\051\112\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5" +
    "\064\uffb5\065\uffb5\066\uffb5\070\uffb5\071\uffb5\073\uffb5\075" +
    "\uffb5\077\uffb5\100\uffb5\106\uffb5\107\uffb5\112\uffb5\001\002" +
    "\000\020\003\uffaf\006\uffaf\007\uffaf\014\uffaf\054\uffaf\055" +
    "\uffaf\072\uffaf\001\002\000\020\003\uffb1\006\uffb1\007\uffb1" +
    "\014\uffb1\054\uffb1\055\uffb1\072\uffb1\001\002\000\020\003" +
    "\061\006\052\007\062\014\055\054\044\055\067\072\054" +
    "\001\002\000\056\050\uffb0\051\uffb0\052\120\053\116\057" +
    "\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0" +
    "\066\uffb0\070\uffb0\071\uffb0\073\uffb0\075\uffb0\077\uffb0\100" +
    "\uffb0\106\uffb0\107\uffb0\111\117\112\uffb0\001\002\000\020" +
    "\003\uffaa\006\uffaa\007\uffaa\014\uffaa\054\uffaa\055\uffaa\072" +
    "\uffaa\001\002\000\020\003\uffa8\006\uffa8\007\uffa8\014\uffa8" +
    "\054\uffa8\055\uffa8\072\uffa8\001\002\000\020\003\uffac\006" +
    "\uffac\007\uffac\014\uffac\054\uffac\055\uffac\072\uffac\001\002" +
    "\000\020\003\061\006\052\007\062\014\055\054\044\055" +
    "\067\072\054\001\002\000\056\050\uffab\051\uffab\052\uffab" +
    "\053\uffab\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064" +
    "\uffab\065\uffab\066\uffab\070\uffab\071\uffab\073\uffab\075\uffab" +
    "\077\uffab\100\uffab\106\uffab\107\uffab\111\uffab\112\uffab\001" +
    "\002\000\020\003\061\006\052\007\062\014\055\054\044" +
    "\055\067\072\054\001\002\000\056\050\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7" +
    "\064\uffa7\065\uffa7\066\uffa7\070\uffa7\071\uffa7\073\uffa7\075" +
    "\uffa7\077\uffa7\100\uffa7\106\uffa7\107\uffa7\111\uffa7\112\uffa7" +
    "\001\002\000\020\003\061\006\052\007\062\014\055\054" +
    "\044\055\067\072\054\001\002\000\056\050\uffa9\051\uffa9" +
    "\052\uffa9\053\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063" +
    "\uffa9\064\uffa9\065\uffa9\066\uffa9\070\uffa9\071\uffa9\073\uffa9" +
    "\075\uffa9\077\uffa9\100\uffa9\106\uffa9\107\uffa9\111\uffa9\112" +
    "\uffa9\001\002\000\020\003\061\006\052\007\062\014\055" +
    "\054\044\055\067\072\054\001\002\000\056\050\uffae\051" +
    "\uffae\052\120\053\116\057\uffae\060\uffae\061\uffae\062\uffae" +
    "\063\uffae\064\uffae\065\uffae\066\uffae\070\uffae\071\uffae\073" +
    "\uffae\075\uffae\077\uffae\100\uffae\106\uffae\107\uffae\111\117" +
    "\112\uffae\001\002\000\020\003\061\006\052\007\062\014" +
    "\055\054\044\055\067\072\054\001\002\000\050\050\113" +
    "\051\112\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064" +
    "\uffb3\065\uffb3\066\uffb3\070\uffb3\071\uffb3\073\uffb3\075\uffb3" +
    "\077\uffb3\100\uffb3\106\uffb3\107\uffb3\112\uffb3\001\002\000" +
    "\020\003\061\006\052\007\062\014\055\054\044\055\067" +
    "\072\054\001\002\000\050\050\113\051\112\057\uffb7\060" +
    "\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7" +
    "\070\uffb7\071\uffb7\073\uffb7\075\uffb7\077\uffb7\100\uffb7\106" +
    "\uffb7\107\uffb7\112\uffb7\001\002\000\020\003\061\006\052" +
    "\007\062\014\055\054\044\055\067\072\054\001\002\000" +
    "\050\050\113\051\112\057\uffb9\060\uffb9\061\uffb9\062\uffb9" +
    "\063\uffb9\064\uffb9\065\uffb9\066\uffb9\070\uffb9\071\uffb9\073" +
    "\uffb9\075\uffb9\077\uffb9\100\uffb9\106\uffb9\107\uffb9\112\uffb9" +
    "\001\002\000\020\003\061\006\052\007\062\014\055\054" +
    "\044\055\067\072\054\001\002\000\044\057\uffbe\060\106" +
    "\061\105\062\107\063\104\064\uffbe\065\uffbe\066\uffbe\070" +
    "\uffbe\071\uffbe\073\uffbe\075\uffbe\077\uffbe\100\uffbe\106\uffbe" +
    "\107\uffbe\112\uffbe\001\002\000\104\050\uff9c\051\uff9c\052" +
    "\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c" +
    "\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\070" +
    "\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\077\uff9c" +
    "\100\uff9c\101\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c\106" +
    "\uff9c\107\uff9c\111\uff9c\112\uff9c\116\uff9c\001\002\000\022" +
    "\003\061\006\052\007\062\014\055\054\044\055\067\072" +
    "\054\073\166\001\002\000\104\050\uff9b\051\uff9b\052\uff9b" +
    "\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061" +
    "\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\070\uff9b" +
    "\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\077\uff9b\100" +
    "\uff9b\101\uff9b\102\uff9b\103\uff9b\104\uff9b\105\uff9b\106\uff9b" +
    "\107\uff9b\111\uff9b\112\uff9b\116\uff9b\001\002\000\004\007" +
    "\165\001\002\000\020\003\061\006\052\007\062\014\055" +
    "\054\044\055\067\072\054\001\002\000\014\070\uff9a\071" +
    "\uff9a\073\uff9a\075\uff9a\100\uff9a\001\002\000\072\050\uffad" +
    "\051\uffad\052\uffad\053\uffad\056\163\057\uffad\060\uffad\061" +
    "\uffad\062\uffad\063\uffad\064\uffad\065\uffad\066\uffad\070\uffad" +
    "\071\uffad\073\uffad\075\uffad\077\uffad\100\uffad\102\162\103" +
    "\160\104\157\105\161\106\uffad\107\uffad\111\uffad\112\uffad" +
    "\116\156\001\002\000\006\070\152\075\153\001\002\000" +
    "\016\070\uffd6\071\uffd6\073\uffd6\075\uffd6\077\uffd6\100\uffd6" +
    "\001\002\000\020\003\061\006\052\007\062\014\055\054" +
    "\044\055\067\072\054\001\002\000\104\050\uffa0\051\uffa0" +
    "\052\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060" +
    "\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0" +
    "\070\uffa0\071\uffa0\072\uffa0\073\uffa0\074\uffa0\075\uffa0\077" +
    "\uffa0\100\uffa0\101\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0" +
    "\106\uffa0\107\uffa0\111\uffa0\112\uffa0\116\uffa0\001\002\000" +
    "\014\070\uff99\071\uff99\073\uff99\075\uff99\100\uff99\001\002" +
    "\000\020\003\061\006\052\007\062\014\055\054\044\055" +
    "\067\072\054\001\002\000\020\003\uffd1\006\uffd1\007\uffd1" +
    "\014\uffd1\054\uffd1\055\uffd1\072\uffd1\001\002\000\020\003" +
    "\uffd3\006\uffd3\007\uffd3\014\uffd3\054\uffd3\055\uffd3\072\uffd3" +
    "\001\002\000\020\003\uffcf\006\uffcf\007\uffcf\014\uffcf\054" +
    "\uffcf\055\uffcf\072\uffcf\001\002\000\020\003\uffd2\006\uffd2" +
    "\007\uffd2\014\uffd2\054\uffd2\055\uffd2\072\uffd2\001\002\000" +
    "\020\003\uffd0\006\uffd0\007\uffd0\014\uffd0\054\uffd0\055\uffd0" +
    "\072\uffd0\001\002\000\020\003\uffd4\006\uffd4\007\uffd4\014" +
    "\uffd4\054\uffd4\055\uffd4\072\uffd4\001\002\000\016\070\uffd5" +
    "\071\uffd5\073\uffd5\075\uffd5\077\uffd5\100\uffd5\001\002\000" +
    "\104\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d" +
    "\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064" +
    "\uff9d\065\uff9d\066\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d" +
    "\074\uff9d\075\uff9d\077\uff9d\100\uff9d\101\uff9d\102\uff9d\103" +
    "\uff9d\104\uff9d\105\uff9d\106\uff9d\107\uff9d\111\uff9d\112\uff9d" +
    "\116\uff9d\001\002\000\104\050\uff9f\051\uff9f\052\uff9f\053" +
    "\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f" +
    "\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\070\uff9f\071" +
    "\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f\077\uff9f\100\uff9f" +
    "\101\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f\106\uff9f\107" +
    "\uff9f\111\uff9f\112\uff9f\116\uff9f\001\002\000\006\070\152" +
    "\073\170\001\002\000\104\050\uff9e\051\uff9e\052\uff9e\053" +
    "\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e" +
    "\062\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\070\uff9e\071" +
    "\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\077\uff9e\100\uff9e" +
    "\101\uff9e\102\uff9e\103\uff9e\104\uff9e\105\uff9e\106\uff9e\107" +
    "\uff9e\111\uff9e\112\uff9e\116\uff9e\001\002\000\004\072\172" +
    "\001\002\000\104\050\uff92\051\uff92\052\uff92\053\uff92\054" +
    "\uff92\055\uff92\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92" +
    "\063\uff92\064\uff92\065\uff92\066\uff92\070\uff92\071\uff92\072" +
    "\uff92\073\uff92\074\uff92\075\uff92\077\uff92\100\uff92\101\uff92" +
    "\102\uff92\103\uff92\104\uff92\105\uff92\106\uff92\107\uff92\111" +
    "\uff92\112\uff92\116\uff92\001\002\000\020\003\uffc8\006\uffc8" +
    "\007\uffc8\014\uffc8\054\uffc8\055\uffc8\072\uffc8\001\002\000" +
    "\020\003\061\006\052\007\062\014\055\054\044\055\067" +
    "\072\054\001\002\000\026\065\uffc7\066\uffc7\070\uffc7\071" +
    "\uffc7\073\uffc7\075\uffc7\077\uffc7\100\uffc7\106\uffc7\112\072" +
    "\001\002\000\006\070\152\073\177\001\002\000\104\050" +
    "\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94" +
    "\057\uff94\060\uff94\061\uff94\062\uff94\063\uff94\064\uff94\065" +
    "\uff94\066\uff94\070\uff94\071\uff94\072\uff94\073\uff94\074\uff94" +
    "\075\uff94\077\uff94\100\uff94\101\uff94\102\uff94\103\uff94\104" +
    "\uff94\105\uff94\106\uff94\107\uff94\111\uff94\112\uff94\116\uff94" +
    "\001\002\000\036\013\ufff0\014\ufff0\030\ufff0\031\ufff0\034" +
    "\ufff0\037\ufff0\045\ufff0\056\ufff0\070\ufff0\071\ufff0\072\ufff0" +
    "\073\ufff0\074\ufff0\076\ufff0\001\002\000\020\003\061\006" +
    "\052\007\062\014\055\054\044\055\067\072\054\001\002" +
    "\000\020\003\uffcb\006\uffcb\007\uffcb\014\uffcb\054\uffcb\055" +
    "\uffcb\072\uffcb\001\002\000\020\003\061\006\052\007\062" +
    "\014\055\054\044\055\067\072\054\001\002\000\024\065" +
    "\uffca\066\173\070\uffca\071\uffca\073\uffca\075\uffca\077\uffca" +
    "\100\uffca\106\uffca\001\002\000\006\070\152\100\206\001" +
    "\002\000\020\003\061\006\052\007\062\014\055\054\044" +
    "\055\067\072\054\001\002\000\016\070\uffcd\071\uffcd\073" +
    "\uffcd\075\uffcd\077\uffcd\100\uffcd\001\002\000\020\003\061" +
    "\006\052\007\062\014\055\054\044\055\067\072\054\001" +
    "\002\000\072\050\uffa2\051\uffa2\052\uffa2\053\uffa2\056\uffa2" +
    "\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065" +
    "\uffa2\066\uffa2\070\uffa2\071\uffa2\073\uffa2\075\uffa2\077\uffa2" +
    "\100\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\106\uffa2\107" +
    "\uffa2\111\uffa2\112\uffa2\116\uffa2\001\002\000\006\070\234" +
    "\073\251\001\002\000\006\070\uffeb\073\uffeb\001\002\000" +
    "\036\013\uffec\014\uffec\030\uffec\031\uffec\034\uffec\037\uffec" +
    "\045\uffec\056\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074" +
    "\uffec\076\uffec\001\002\000\006\070\247\073\246\001\002" +
    "\000\014\007\023\070\uffe7\072\220\073\uffe7\074\222\001" +
    "\002\000\006\070\uffdd\073\uffdd\001\002\000\030\007\023" +
    "\013\005\014\015\030\013\031\026\034\016\037\025\045" +
    "\024\072\220\073\242\074\222\001\002\000\012\070\uffe9" +
    "\072\041\073\uffe9\074\042\001\002\000\022\003\061\006" +
    "\052\007\062\014\055\054\044\055\067\072\054\075\236" +
    "\001\002\000\012\070\uffe8\072\224\073\uffe8\074\225\001" +
    "\002\000\022\013\005\014\015\030\013\031\026\034\016" +
    "\037\025\045\024\073\232\001\002\000\022\003\061\006" +
    "\052\007\062\014\055\054\044\055\067\072\054\075\226" +
    "\001\002\000\012\070\uffe3\072\uffe3\073\uffe3\074\uffe3\001" +
    "\002\000\004\075\230\001\002\000\012\070\uffe2\072\uffe2" +
    "\073\uffe2\074\uffe2\001\002\000\006\070\234\073\233\001" +
    "\002\000\012\070\uffdf\072\uffdf\073\uffdf\074\uffdf\001\002" +
    "\000\012\070\uffde\072\uffde\073\uffde\074\uffde\001\002\000" +
    "\020\013\005\014\015\030\013\031\026\034\016\037\025" +
    "\045\024\001\002\000\006\070\uffea\073\uffea\001\002\000" +
    "\012\070\uffe5\072\uffe5\073\uffe5\074\uffe5\001\002\000\004" +
    "\075\240\001\002\000\012\070\uffe4\072\uffe4\073\uffe4\074" +
    "\uffe4\001\002\000\006\070\234\073\245\001\002\000\012" +
    "\070\uffe1\072\uffe1\073\uffe1\074\uffe1\001\002\000\010\072" +
    "\224\073\244\074\225\001\002\000\012\070\uffe6\072\uffe6" +
    "\073\uffe6\074\uffe6\001\002\000\012\070\uffe0\072\uffe0\073" +
    "\uffe0\074\uffe0\001\002\000\036\013\uffed\014\uffed\030\uffed" +
    "\031\uffed\034\uffed\037\uffed\045\uffed\056\uffed\070\uffed\071" +
    "\uffed\072\uffed\073\uffed\074\uffed\076\uffed\001\002\000\004" +
    "\007\250\001\002\000\006\070\uffdc\073\uffdc\001\002\000" +
    "\036\013\uffee\014\uffee\030\uffee\031\uffee\034\uffee\037\uffee" +
    "\045\uffee\056\uffee\070\uffee\071\uffee\072\uffee\073\uffee\074" +
    "\uffee\076\uffee\001\002\000\006\070\ufff6\071\ufff6\001\002" +
    "\000\034\013\uff85\014\uff85\030\uff85\031\uff85\034\uff85\037" +
    "\uff85\045\uff85\056\262\070\ufff4\071\ufff4\072\041\074\042" +
    "\076\uff82\001\002\000\074\002\000\003\000\006\000\007" +
    "\000\011\000\012\000\013\000\014\000\015\000\016\000" +
    "\017\000\025\000\027\000\030\000\031\000\033\000\034" +
    "\000\037\000\041\000\045\000\047\000\054\000\055\000" +
    "\071\000\072\000\076\000\077\000\125\000\126\000\001" +
    "\002\000\006\070\256\071\257\001\002\000\006\007\023" +
    "\072\014\001\002\000\074\002\uffff\003\uffff\006\uffff\007" +
    "\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff" +
    "\017\uffff\025\uffff\027\uffff\030\uffff\031\uffff\033\uffff\034" +
    "\uffff\037\uffff\041\uffff\045\uffff\047\uffff\054\uffff\055\uffff" +
    "\071\uffff\072\uffff\076\uffff\077\uffff\125\uffff\126\uffff\001" +
    "\002\000\006\070\ufff5\071\ufff5\001\002\000\014\056\262" +
    "\070\ufff4\071\ufff4\072\041\074\042\001\002\000\022\003" +
    "\061\006\052\007\062\014\055\054\044\055\067\072\054" +
    "\076\264\001\002\000\010\070\uffdb\071\uffdb\077\uffdb\001" +
    "\002\000\022\003\061\006\052\007\062\014\055\054\044" +
    "\055\067\072\054\076\264\001\002\000\006\070\ufff3\071" +
    "\ufff3\001\002\000\006\070\uffd8\077\uffd8\001\002\000\006" +
    "\070\270\077\271\001\002\000\024\003\061\006\052\007" +
    "\062\014\055\054\044\055\067\072\054\076\264\077\273" +
    "\001\002\000\010\070\uffda\071\uffda\077\uffda\001\002\000" +
    "\006\070\uffd7\077\uffd7\001\002\000\010\070\uffd9\071\uffd9" +
    "\077\uffd9\001\002\000\020\013\005\014\015\030\013\031" +
    "\026\034\016\037\025\045\024\001\002\000\004\076\007" +
    "\001\002\000\032\002\uff81\003\uff81\007\uff81\013\uff81\014" +
    "\uff81\030\uff81\031\uff81\034\uff81\037\uff81\045\uff81\072\uff81" +
    "\076\uff81\001\002\000\022\013\005\014\015\030\013\031" +
    "\026\034\016\037\025\045\024\076\uff84\001\002\000\072" +
    "\003\uff87\006\uff87\007\uff87\011\uff87\012\uff87\013\uff87\014" +
    "\uff87\015\uff87\016\uff87\017\uff87\025\uff87\027\uff87\030\uff87" +
    "\031\uff87\033\uff87\034\uff87\037\uff87\041\uff87\045\uff87\047" +
    "\uff87\054\uff87\055\uff87\071\uff87\072\uff87\076\uff87\077\uff87" +
    "\125\uff87\126\uff87\001\002\000\010\007\023\071\254\072" +
    "\014\001\002\000\004\076\007\001\002\000\072\003\uff86" +
    "\006\uff86\007\uff86\011\uff86\012\uff86\013\uff86\014\uff86\015" +
    "\uff86\016\uff86\017\uff86\025\uff86\027\uff86\030\uff86\031\uff86" +
    "\033\uff86\034\uff86\037\uff86\041\uff86\045\uff86\047\uff86\054" +
    "\uff86\055\uff86\071\uff86\072\uff86\076\uff86\077\uff86\125\uff86" +
    "\126\uff86\001\002\000\032\002\uff83\003\uff83\007\uff83\013" +
    "\uff83\014\uff83\030\uff83\031\uff83\034\uff83\037\uff83\045\uff83" +
    "\072\uff83\076\uff83\001\002\000\062\003\uff74\006\uff74\007" +
    "\uff74\011\uff74\012\uff74\014\uff74\015\uff74\016\uff74\017\uff74" +
    "\021\uff74\025\uff74\027\uff74\033\uff74\041\uff74\047\uff74\054" +
    "\uff74\055\uff74\071\uff74\072\uff74\073\uff74\076\uff74\077\uff74" +
    "\125\uff74\126\uff74\001\002\000\060\003\uff5a\006\uff5a\007" +
    "\uff5a\011\uff5a\012\uff5a\014\uff5a\015\uff5a\016\uff5a\017\uff5a" +
    "\021\uff5a\025\uff5a\027\uff5a\033\uff5a\041\uff5a\047\uff5a\054" +
    "\uff5a\055\uff5a\071\uff5a\072\uff5a\076\uff5a\077\uff5a\125\uff5a" +
    "\126\uff5a\001\002\000\056\003\325\006\052\007\316\011" +
    "\314\012\333\014\055\015\331\016\313\017\330\025\323" +
    "\027\310\033\320\041\326\047\322\054\044\055\067\071" +
    "\305\072\054\076\uff5e\077\u0120\125\315\126\342\001\002" +
    "\000\004\072\uff6b\001\002\000\060\003\uff5f\006\uff5f\007" +
    "\uff5f\011\uff5f\012\uff5f\014\uff5f\015\uff5f\016\uff5f\017\uff5f" +
    "\021\uff5f\025\uff5f\027\uff5f\033\uff5f\041\uff5f\047\uff5f\054" +
    "\uff5f\055\uff5f\071\uff5f\072\uff5f\076\uff5f\077\uff5f\125\uff5f" +
    "\126\uff5f\001\002\000\072\003\325\006\052\007\316\011" +
    "\314\012\333\013\005\014\335\015\331\016\313\017\330" +
    "\025\323\027\310\030\013\031\026\033\320\034\016\037" +
    "\025\041\326\045\024\047\322\054\044\055\067\071\305" +
    "\072\054\076\uff5e\077\u0112\125\315\126\342\001\002\000" +
    "\004\100\u010f\001\002\000\004\071\u010e\001\002\000\004" +
    "\072\u010b\001\002\000\076\050\uff97\051\uff97\052\uff97\053" +
    "\uff97\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97\061\uff97" +
    "\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97\070\uff97\071" +
    "\uff97\072\uff97\074\uff97\100\u0109\101\uff97\102\uff97\103\uff97" +
    "\104\uff97\105\uff97\106\uff97\107\uff97\111\uff97\112\uff97\116" +
    "\uff97\001\002\000\060\003\uff57\006\uff57\007\uff57\011\uff57" +
    "\012\uff57\014\uff57\015\uff57\016\uff57\017\uff57\021\uff57\025" +
    "\uff57\027\uff57\033\uff57\041\uff57\047\uff57\054\uff57\055\uff57" +
    "\071\uff57\072\uff57\076\uff57\077\uff57\125\uff57\126\uff57\001" +
    "\002\000\022\003\061\006\052\007\062\014\055\054\044" +
    "\055\067\071\u0107\072\054\001\002\000\076\002\uff78\003" +
    "\uff78\006\uff78\007\uff78\011\uff78\012\uff78\013\uff78\014\uff78" +
    "\015\uff78\016\uff78\017\uff78\021\uff78\025\uff78\027\uff78\030" +
    "\uff78\031\uff78\033\uff78\034\uff78\037\uff78\041\uff78\045\uff78" +
    "\047\uff78\054\uff78\055\uff78\071\uff78\072\uff78\076\uff78\077" +
    "\uff78\125\uff78\126\uff78\001\002\000\004\072\uff65\001\002" +
    "\000\004\072\370\001\002\000\060\003\uff6d\006\uff6d\007" +
    "\uff6d\011\uff6d\012\uff6d\014\uff6d\015\uff6d\016\uff6d\017\uff6d" +
    "\021\uff6d\025\uff6d\027\uff6d\033\uff6d\041\uff6d\047\uff6d\054" +
    "\uff6d\055\uff6d\071\uff6d\072\uff6d\076\uff6d\077\uff6d\125\uff6d" +
    "\126\uff6d\001\002\000\006\071\uff72\072\uff93\001\002\000" +
    "\004\072\362\001\002\000\060\003\uff59\006\uff59\007\uff59" +
    "\011\uff59\012\uff59\014\uff59\015\uff59\016\uff59\017\uff59\021" +
    "\uff59\025\uff59\027\uff59\033\uff59\041\uff59\047\uff59\054\uff59" +
    "\055\uff59\071\uff59\072\uff59\076\uff59\077\uff59\125\uff59\126" +
    "\uff59\001\002\000\054\003\325\006\052\007\316\011\314" +
    "\012\333\014\055\015\331\016\313\017\330\025\323\027" +
    "\310\033\320\041\326\047\322\054\044\055\067\071\305" +
    "\072\054\076\uff5e\125\315\126\342\001\002\000\004\071" +
    "\353\001\002\000\006\070\152\071\352\001\002\000\020" +
    "\003\061\006\052\007\062\014\055\054\044\055\067\072" +
    "\054\001\002\000\060\003\uff5c\006\uff5c\007\uff5c\011\uff5c" +
    "\012\uff5c\014\uff5c\015\uff5c\016\uff5c\017\uff5c\021\uff5c\025" +
    "\uff5c\027\uff5c\033\uff5c\041\uff5c\047\uff5c\054\uff5c\055\uff5c" +
    "\071\uff5c\072\uff5c\076\uff5c\077\uff5c\125\uff5c\126\uff5c\001" +
    "\002\000\112\013\005\014\015\030\013\031\026\034\016" +
    "\037\025\045\024\050\uff96\051\uff96\052\uff96\053\uff96\054" +
    "\uff96\055\uff96\056\uff96\057\uff96\060\uff96\061\uff96\062\uff96" +
    "\063\uff96\064\uff96\065\uff96\066\uff96\070\uff96\071\uff96\072" +
    "\uff96\074\uff96\101\uff96\102\uff96\103\uff96\104\uff96\105\uff96" +
    "\106\uff96\107\uff96\111\uff96\112\uff96\116\uff96\001\002\000" +
    "\004\076\007\001\002\000\056\003\uff7a\006\uff7a\007\uff7a" +
    "\011\uff7a\012\uff7a\014\uff7a\015\uff7a\016\uff7a\017\uff7a\025" +
    "\uff7a\027\uff7a\033\uff7a\041\uff7a\047\uff7a\054\uff7a\055\uff7a" +
    "\071\uff7a\072\uff7a\076\uff7a\077\uff7a\125\uff7a\126\uff7a\001" +
    "\002\000\060\003\uff5b\006\uff5b\007\uff5b\011\uff5b\012\uff5b" +
    "\014\uff5b\015\uff5b\016\uff5b\017\uff5b\021\uff5b\025\uff5b\027" +
    "\uff5b\033\uff5b\041\uff5b\047\uff5b\054\uff5b\055\uff5b\071\uff5b" +
    "\072\uff5b\076\uff5b\077\uff5b\125\uff5b\126\uff5b\001\002\000" +
    "\060\003\uff58\006\uff58\007\uff58\011\uff58\012\uff58\014\uff58" +
    "\015\uff58\016\uff58\017\uff58\021\uff58\025\uff58\027\uff58\033" +
    "\uff58\041\uff58\047\uff58\054\uff58\055\uff58\071\uff58\072\uff58" +
    "\076\uff58\077\uff58\125\uff58\126\uff58\001\002\000\004\072" +
    "\343\001\002\000\020\003\061\006\052\007\062\014\055" +
    "\054\044\055\067\072\054\001\002\000\006\070\152\073" +
    "\345\001\002\000\060\003\uff51\006\uff51\007\uff51\011\uff51" +
    "\012\uff51\014\uff51\015\uff51\016\uff51\017\uff51\021\uff51\025" +
    "\uff51\027\uff51\033\uff51\041\uff51\047\uff51\054\uff51\055\uff51" +
    "\071\uff51\072\uff51\076\uff51\077\uff51\125\uff51\126\uff51\001" +
    "\002\000\060\003\uff5d\006\uff5d\007\uff5d\011\uff5d\012\uff5d" +
    "\014\uff5d\015\uff5d\016\uff5d\017\uff5d\021\uff5d\025\uff5d\027" +
    "\uff5d\033\uff5d\041\uff5d\047\uff5d\054\uff5d\055\uff5d\071\uff5d" +
    "\072\uff5d\076\uff5d\077\uff5d\125\uff5d\126\uff5d\001\002\000" +
    "\004\100\350\001\002\000\054\003\325\006\052\007\316" +
    "\011\314\012\333\014\055\015\331\016\313\017\330\025" +
    "\323\027\310\033\320\041\326\047\322\054\044\055\067" +
    "\071\305\072\054\076\uff5e\125\315\126\342\001\002\000" +
    "\060\003\uff6f\006\uff6f\007\uff6f\011\uff6f\012\uff6f\014\uff6f" +
    "\015\uff6f\016\uff6f\017\uff6f\021\uff6f\025\uff6f\027\uff6f\033" +
    "\uff6f\041\uff6f\047\uff6f\054\uff6f\055\uff6f\071\uff6f\072\uff6f" +
    "\076\uff6f\077\uff6f\125\uff6f\126\uff6f\001\002\000\062\003" +
    "\uff73\006\uff73\007\uff73\011\uff73\012\uff73\014\uff73\015\uff73" +
    "\016\uff73\017\uff73\021\uff73\025\uff73\027\uff73\033\uff73\041" +
    "\uff73\047\uff73\054\uff73\055\uff73\071\uff73\072\uff73\073\uff73" +
    "\076\uff73\077\uff73\125\uff73\126\uff73\001\002\000\060\003" +
    "\uff56\006\uff56\007\uff56\011\uff56\012\uff56\014\uff56\015\uff56" +
    "\016\uff56\017\uff56\021\uff56\025\uff56\027\uff56\033\uff56\041" +
    "\uff56\047\uff56\054\uff56\055\uff56\071\uff56\072\uff56\076\uff56" +
    "\077\uff56\125\uff56\126\uff56\001\002\000\004\047\355\001" +
    "\002\000\004\072\356\001\002\000\020\003\061\006\052" +
    "\007\062\014\055\054\044\055\067\072\054\001\002\000" +
    "\006\070\152\073\360\001\002\000\004\071\361\001\002" +
    "\000\060\003\uff62\006\uff62\007\uff62\011\uff62\012\uff62\014" +
    "\uff62\015\uff62\016\uff62\017\uff62\021\uff62\025\uff62\027\uff62" +
    "\033\uff62\041\uff62\047\uff62\054\uff62\055\uff62\071\uff62\072" +
    "\uff62\076\uff62\077\uff62\125\uff62\126\uff62\001\002\000\020" +
    "\003\061\006\052\007\062\014\055\054\044\055\067\072" +
    "\054\001\002\000\006\070\152\073\364\001\002\000\054" +
    "\003\325\006\052\007\316\011\314\012\333\014\055\015" +
    "\331\016\313\017\330\025\323\027\310\033\320\041\326" +
    "\047\322\054\044\055\067\071\305\072\054\076\uff5e\125" +
    "\315\126\342\001\002\000\060\003\uff6c\006\uff6c\007\uff6c" +
    "\011\uff6c\012\uff6c\014\uff6c\015\uff6c\016\uff6c\017\uff6c\021" +
    "\uff6c\025\uff6c\027\uff6c\033\uff6c\041\uff6c\047\uff6c\054\uff6c" +
    "\055\uff6c\071\uff6c\072\uff6c\076\uff6c\077\uff6c\125\uff6c\126" +
    "\uff6c\001\002\000\004\071\367\001\002\000\062\003\uff71" +
    "\006\uff71\007\uff71\011\uff71\012\uff71\014\uff71\015\uff71\016" +
    "\uff71\017\uff71\021\uff71\025\uff71\027\uff71\033\uff71\041\uff71" +
    "\047\uff71\054\uff71\055\uff71\071\uff71\072\uff71\073\uff71\076" +
    "\uff71\077\uff71\125\uff71\126\uff71\001\002\000\022\003\325" +
    "\006\052\007\062\014\055\054\044\055\067\071\305\072" +
    "\054\001\002\000\022\003\325\006\052\007\062\014\055" +
    "\054\044\055\067\071\305\072\054\001\002\000\022\003" +
    "\061\006\052\007\062\014\055\054\044\055\067\072\054" +
    "\073\373\001\002\000\054\003\325\006\052\007\316\011" +
    "\314\012\333\014\055\015\331\016\313\017\330\025\323" +
    "\027\310\033\320\041\326\047\322\054\044\055\067\071" +
    "\305\072\054\076\uff5e\125\315\126\342\001\002\000\006" +
    "\070\152\073\375\001\002\000\054\003\325\006\052\007" +
    "\316\011\314\012\333\014\055\015\331\016\313\017\330" +
    "\025\323\027\310\033\320\041\326\047\322\054\044\055" +
    "\067\071\305\072\054\076\uff5e\125\315\126\342\001\002" +
    "\000\060\003\uff60\006\uff60\007\uff60\011\uff60\012\uff60\014" +
    "\uff60\015\uff60\016\uff60\017\uff60\021\uff60\025\uff60\027\uff60" +
    "\033\uff60\041\uff60\047\uff60\054\uff60\055\uff60\071\uff60\072" +
    "\uff60\076\uff60\077\uff60\125\uff60\126\uff60\001\002\000\060" +
    "\003\uff61\006\uff61\007\uff61\011\uff61\012\uff61\014\uff61\015" +
    "\uff61\016\uff61\017\uff61\021\uff61\025\uff61\027\uff61\033\uff61" +
    "\041\uff61\047\uff61\054\uff61\055\uff61\071\uff61\072\uff61\076" +
    "\uff61\077\uff61\125\uff61\126\uff61\001\002\000\004\072\u0101" +
    "\001\002\000\020\003\061\006\052\007\062\014\055\054" +
    "\044\055\067\072\054\001\002\000\006\070\152\073\uff64" +
    "\001\002\000\004\073\u0104\001\002\000\054\003\325\006" +
    "\052\007\316\011\314\012\333\014\055\015\331\016\313" +
    "\017\330\025\323\027\310\033\320\041\326\047\322\054" +
    "\044\055\067\071\305\072\054\076\uff5e\125\315\126\342" +
    "\001\002\000\060\003\uff63\006\uff63\007\uff63\011\uff63\012" +
    "\uff63\014\uff63\015\uff63\016\uff63\017\uff63\021\uff63\025\uff63" +
    "\027\uff63\033\uff63\041\uff63\047\uff63\054\uff63\055\uff63\071" +
    "\uff63\072\uff63\076\uff63\077\uff63\125\uff63\126\uff63\001\002" +
    "\000\006\070\152\071\u0108\001\002\000\060\003\uff54\006" +
    "\uff54\007\uff54\011\uff54\012\uff54\014\uff54\015\uff54\016\uff54" +
    "\017\uff54\021\uff54\025\uff54\027\uff54\033\uff54\041\uff54\047" +
    "\uff54\054\uff54\055\uff54\071\uff54\072\uff54\076\uff54\077\uff54" +
    "\125\uff54\126\uff54\001\002\000\060\003\uff53\006\uff53\007" +
    "\uff53\011\uff53\012\uff53\014\uff53\015\uff53\016\uff53\017\uff53" +
    "\021\uff53\025\uff53\027\uff53\033\uff53\041\uff53\047\uff53\054" +
    "\uff53\055\uff53\071\uff53\072\uff53\076\uff53\077\uff53\125\uff53" +
    "\126\uff53\001\002\000\054\003\325\006\052\007\316\011" +
    "\314\012\333\014\055\015\331\016\313\017\330\025\323" +
    "\027\310\033\320\041\326\047\322\054\044\055\067\071" +
    "\305\072\054\076\uff5e\125\315\126\342\001\002\000\060" +
    "\003\uff70\006\uff70\007\uff70\011\uff70\012\uff70\014\uff70\015" +
    "\uff70\016\uff70\017\uff70\021\uff70\025\uff70\027\uff70\033\uff70" +
    "\041\uff70\047\uff70\054\uff70\055\uff70\071\uff70\072\uff70\076" +
    "\uff70\077\uff70\125\uff70\126\uff70\001\002\000\022\003\325" +
    "\006\052\007\062\014\055\054\044\055\067\071\305\072" +
    "\054\001\002\000\004\073\u010d\001\002\000\060\003\uff52" +
    "\006\uff52\007\uff52\011\uff52\012\uff52\014\uff52\015\uff52\016" +
    "\uff52\017\uff52\021\uff52\025\uff52\027\uff52\033\uff52\041\uff52" +
    "\047\uff52\054\uff52\055\uff52\071\uff52\072\uff52\076\uff52\077" +
    "\uff52\125\uff52\126\uff52\001\002\000\060\003\uff55\006\uff55" +
    "\007\uff55\011\uff55\012\uff55\014\uff55\015\uff55\016\uff55\017" +
    "\uff55\021\uff55\025\uff55\027\uff55\033\uff55\041\uff55\047\uff55" +
    "\054\uff55\055\uff55\071\uff55\072\uff55\076\uff55\077\uff55\125" +
    "\uff55\126\uff55\001\002\000\054\003\325\006\052\007\316" +
    "\011\314\012\333\014\055\015\331\016\313\017\330\025" +
    "\323\027\310\033\320\041\326\047\322\054\044\055\067" +
    "\071\305\072\054\076\uff5e\125\315\126\342\001\002\000" +
    "\060\003\uff6e\006\uff6e\007\uff6e\011\uff6e\012\uff6e\014\uff6e" +
    "\015\uff6e\016\uff6e\017\uff6e\021\uff6e\025\uff6e\027\uff6e\033" +
    "\uff6e\041\uff6e\047\uff6e\054\uff6e\055\uff6e\071\uff6e\072\uff6e" +
    "\076\uff6e\077\uff6e\125\uff6e\126\uff6e\001\002\000\056\003" +
    "\325\006\052\007\316\011\314\012\333\014\055\015\331" +
    "\016\313\017\330\025\323\027\310\033\320\041\326\047" +
    "\322\054\044\055\067\071\305\072\054\076\uff5e\077\u0113" +
    "\125\315\126\342\001\002\000\076\002\uff76\003\uff76\006" +
    "\uff76\007\uff76\011\uff76\012\uff76\013\uff76\014\uff76\015\uff76" +
    "\016\uff76\017\uff76\021\uff76\025\uff76\027\uff76\030\uff76\031" +
    "\uff76\033\uff76\034\uff76\037\uff76\041\uff76\045\uff76\047\uff76" +
    "\054\uff76\055\uff76\071\uff76\072\uff76\076\uff76\077\uff76\125" +
    "\uff76\126\uff76\001\002\000\076\002\uff75\003\uff75\006\uff75" +
    "\007\uff75\011\uff75\012\uff75\013\uff75\014\uff75\015\uff75\016" +
    "\uff75\017\uff75\021\uff75\025\uff75\027\uff75\030\uff75\031\uff75" +
    "\033\uff75\034\uff75\037\uff75\041\uff75\045\uff75\047\uff75\054" +
    "\uff75\055\uff75\071\uff75\072\uff75\076\uff75\077\uff75\125\uff75" +
    "\126\uff75\001\002\000\056\003\uff79\006\uff79\007\uff79\011" +
    "\uff79\012\uff79\014\uff79\015\uff79\016\uff79\017\uff79\025\uff79" +
    "\027\uff79\033\uff79\041\uff79\047\uff79\054\uff79\055\uff79\071" +
    "\uff79\072\uff79\076\uff79\077\uff79\125\uff79\126\uff79\001\002" +
    "\000\004\072\u0116\001\002\000\020\003\061\006\052\007" +
    "\062\014\055\054\044\055\067\072\054\001\002\000\006" +
    "\070\152\073\uff6a\001\002\000\004\073\u0119\001\002\000" +
    "\054\003\uff69\006\uff69\007\uff69\011\uff69\012\uff69\014\uff69" +
    "\015\uff69\016\uff69\017\uff69\025\uff69\027\uff69\033\uff69\041" +
    "\uff69\047\uff69\054\uff69\055\uff69\071\uff69\072\uff69\076\uff69" +
    "\125\uff69\126\uff69\001\002\000\054\003\325\006\052\007" +
    "\316\011\314\012\333\014\055\015\331\016\313\017\330" +
    "\025\323\027\310\033\320\041\326\047\322\054\044\055" +
    "\067\071\305\072\054\076\uff5e\125\315\126\342\001\002" +
    "\000\004\021\u011d\001\002\000\060\003\uff68\006\uff68\007" +
    "\uff68\011\uff68\012\uff68\014\uff68\015\uff68\016\uff68\017\uff68" +
    "\021\uff68\025\uff68\027\uff68\033\uff68\041\uff68\047\uff68\054" +
    "\uff68\055\uff68\071\uff68\072\uff68\076\uff68\077\uff68\125\uff68" +
    "\126\uff68\001\002\000\054\003\uff67\006\uff67\007\uff67\011" +
    "\uff67\012\uff67\014\uff67\015\uff67\016\uff67\017\uff67\025\uff67" +
    "\027\uff67\033\uff67\041\uff67\047\uff67\054\uff67\055\uff67\071" +
    "\uff67\072\uff67\076\uff67\125\uff67\126\uff67\001\002\000\054" +
    "\003\325\006\052\007\316\011\314\012\333\014\055\015" +
    "\331\016\313\017\330\025\323\027\310\033\320\041\326" +
    "\047\322\054\044\055\067\071\305\072\054\076\uff5e\125" +
    "\315\126\342\001\002\000\060\003\uff66\006\uff66\007\uff66" +
    "\011\uff66\012\uff66\014\uff66\015\uff66\016\uff66\017\uff66\021" +
    "\uff66\025\uff66\027\uff66\033\uff66\041\uff66\047\uff66\054\uff66" +
    "\055\uff66\071\uff66\072\uff66\076\uff66\077\uff66\125\uff66\126" +
    "\uff66\001\002\000\076\002\uff77\003\uff77\006\uff77\007\uff77" +
    "\011\uff77\012\uff77\013\uff77\014\uff77\015\uff77\016\uff77\017" +
    "\uff77\021\uff77\025\uff77\027\uff77\030\uff77\031\uff77\033\uff77" +
    "\034\uff77\037\uff77\041\uff77\045\uff77\047\uff77\054\uff77\055" +
    "\uff77\071\uff77\072\uff77\076\uff77\077\uff77\125\uff77\126\uff77" +
    "\001\002\000\004\076\007\001\002\000\020\013\005\014" +
    "\015\030\013\031\026\034\016\037\025\045\024\001\002" +
    "\000\022\013\005\014\015\030\013\031\026\034\016\037" +
    "\025\045\024\076\uff7f\001\002\000\004\076\007\001\002" +
    "\000\032\002\uff7e\003\uff7e\007\uff7e\013\uff7e\014\uff7e\030" +
    "\uff7e\031\uff7e\034\uff7e\037\uff7e\045\uff7e\072\uff7e\076\uff7e" +
    "\001\002\000\032\002\uff7c\003\uff7c\007\uff7c\013\uff7c\014" +
    "\uff7c\030\uff7c\031\uff7c\034\uff7c\037\uff7c\045\uff7c\072\uff7c" +
    "\076\uff7c\001\002\000\004\002\001\001\002\000\032\002" +
    "\uff90\003\uff90\007\uff90\013\uff90\014\uff90\030\uff90\031\uff90" +
    "\034\uff90\037\uff90\045\uff90\072\uff90\076\uff90\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0126\000\022\002\010\003\003\004\017\005\020\006" +
    "\011\011\005\032\016\034\007\001\001\000\020\002\010" +
    "\004\u0127\005\020\006\011\011\005\032\016\034\007\001" +
    "\001\000\002\001\001\000\006\107\u0121\111\u0120\001\001" +
    "\000\074\002\010\005\277\006\300\012\145\013\045\014" +
    "\056\015\065\016\062\017\052\020\057\021\044\022\042" +
    "\025\146\026\064\027\055\030\331\033\311\035\306\036" +
    "\336\037\310\040\333\041\337\042\305\043\326\046\150" +
    "\051\323\055\316\056\340\121\335\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\254\010\251\011\252" +
    "\001\001\000\002\001\001\000\004\011\036\001\001\000" +
    "\006\002\010\006\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\101" +
    "\031\102\030\103\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\010\006\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\010\006\215\047\211\052\212\054" +
    "\214\001\001\000\034\013\045\014\056\015\065\016\062" +
    "\017\052\020\057\021\044\022\042\025\047\026\064\027" +
    "\055\045\050\046\063\001\001\000\002\001\001\000\004" +
    "\077\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\012\145\013\045\014" +
    "\056\015\065\016\062\017\052\020\057\021\044\022\042" +
    "\025\146\026\064\027\055\030\175\046\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\100\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\076\067\001\001\000\010\025\070\026" +
    "\064\027\055\001\001\000\002\001\001\000\004\061\072" +
    "\001\001\000\022\016\073\017\052\020\057\021\044\022" +
    "\042\025\047\026\064\027\055\001\001\000\002\001\001" +
    "\000\004\062\075\001\001\000\020\017\076\020\057\021" +
    "\044\022\042\025\047\026\064\027\055\001\001\000\002" +
    "\001\001\000\004\063\136\001\001\000\004\064\101\001" +
    "\001\000\016\020\102\021\044\022\042\025\047\026\064" +
    "\027\055\001\001\000\002\001\001\000\004\065\134\001" +
    "\001\000\004\066\132\001\001\000\004\070\130\001\001" +
    "\000\004\067\107\001\001\000\014\021\110\022\042\025" +
    "\047\026\064\027\055\001\001\000\002\001\001\000\004" +
    "\072\126\001\001\000\004\071\113\001\001\000\012\022" +
    "\114\025\047\026\064\027\055\001\001\000\002\001\001" +
    "\000\004\074\124\001\001\000\004\075\122\001\001\000" +
    "\004\073\120\001\001\000\010\025\121\026\064\027\055" +
    "\001\001\000\002\001\001\000\010\025\123\026\064\027" +
    "\055\001\001\000\002\001\001\000\010\025\125\026\064" +
    "\027\055\001\001\000\002\001\001\000\012\022\127\025" +
    "\047\026\064\027\055\001\001\000\002\001\001\000\014" +
    "\021\131\022\042\025\047\026\064\027\055\001\001\000" +
    "\002\001\001\000\014\021\133\022\042\025\047\026\064" +
    "\027\055\001\001\000\002\001\001\000\014\021\135\022" +
    "\042\025\047\026\064\027\055\001\001\000\002\001\001" +
    "\000\016\020\137\021\044\022\042\025\047\026\064\027" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\012\145\013\045\014\056\015\065\016\062\017\052\020" +
    "\057\021\044\022\042\025\146\026\064\027\055\030\166" +
    "\046\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\012\145\013\045\014\056\015\065\016\062\017\052" +
    "\020\057\021\044\022\042\025\146\026\064\027\055\030" +
    "\147\046\150\001\001\000\002\001\001\000\004\031\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\012" +
    "\153\013\045\014\056\015\065\016\062\017\052\020\057" +
    "\021\044\022\042\025\146\026\064\027\055\046\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\012\163" +
    "\013\045\014\056\015\065\016\062\017\052\020\057\021" +
    "\044\022\042\025\146\026\064\027\055\046\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\173\001\001\000\024\015\174\016\062\017" +
    "\052\020\057\021\044\022\042\025\047\026\064\027\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\012\145\013\045\014\056" +
    "\015\065\016\062\017\052\020\057\021\044\022\042\025" +
    "\146\026\064\027\055\030\204\046\150\001\001\000\004" +
    "\057\202\001\001\000\026\014\203\015\065\016\062\017" +
    "\052\020\057\021\044\022\042\025\047\026\064\027\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\013" +
    "\045\014\056\015\065\016\062\017\052\020\057\021\044" +
    "\022\042\025\047\026\064\027\055\046\206\001\001\000" +
    "\002\001\001\000\010\025\210\026\064\027\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\220\053\222" +
    "\001\001\000\002\001\001\000\016\002\010\006\215\011" +
    "\036\047\240\052\212\053\242\001\001\000\002\001\001" +
    "\000\034\013\045\014\056\015\065\016\062\017\052\020" +
    "\057\021\044\022\042\025\047\026\064\027\055\045\236" +
    "\046\063\001\001\000\002\001\001\000\012\002\010\006" +
    "\215\047\230\052\212\001\001\000\034\013\045\014\056" +
    "\015\065\016\062\017\052\020\057\021\044\022\042\025" +
    "\047\026\064\027\055\045\226\046\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\010" +
    "\006\215\052\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\104" +
    "\273\106\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\257\011\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\012\262\013\045" +
    "\014\056\015\065\016\062\017\052\020\057\021\044\022" +
    "\042\023\264\025\146\026\064\027\055\046\150\001\001" +
    "\000\002\001\001\000\040\012\262\013\045\014\056\015" +
    "\065\016\062\017\052\020\057\021\044\022\042\023\265" +
    "\024\266\025\146\026\064\027\055\046\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\012\262\013\045\014\056\015\065\016\062\017\052\020" +
    "\057\021\044\022\042\023\271\025\146\026\064\027\055" +
    "\046\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\010\005\277\006\300\033\276" +
    "\001\001\000\004\034\275\001\001\000\002\001\001\000" +
    "\012\002\010\005\302\006\300\105\301\001\001\000\002" +
    "\001\001\000\010\007\254\010\251\011\260\001\001\000" +
    "\004\034\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\012\145\013" +
    "\045\014\056\015\065\016\062\017\052\020\057\021\044" +
    "\022\042\025\146\026\064\027\055\030\331\036\u0113\037" +
    "\310\040\333\041\337\042\305\043\326\046\150\051\323" +
    "\055\316\056\340\121\335\001\001\000\004\113\u0114\001" +
    "\001\000\002\001\001\000\072\002\010\005\302\006\300" +
    "\012\145\013\045\014\056\015\065\016\062\017\052\020" +
    "\057\021\044\022\042\025\146\026\064\027\055\030\331" +
    "\035\u0110\036\336\037\310\040\333\041\337\042\305\043" +
    "\326\046\150\051\323\055\316\056\340\121\335\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\012\145\013\045" +
    "\014\056\015\065\016\062\017\052\020\057\021\044\022" +
    "\042\025\146\026\064\027\055\030\u0105\046\150\001\001" +
    "\000\002\001\001\000\004\117\377\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\100\170\112\365\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\012\145\013" +
    "\045\014\056\015\065\016\062\017\052\020\057\021\044" +
    "\022\042\025\146\026\064\027\055\030\331\036\353\037" +
    "\310\040\333\041\337\042\305\043\326\046\150\051\323" +
    "\055\316\056\340\121\335\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\013\045\014\056\015\065\016\062" +
    "\017\052\020\057\021\044\022\042\025\047\026\064\027" +
    "\055\045\346\046\063\001\001\000\002\001\001\000\006" +
    "\002\010\006\035\001\001\000\004\034\345\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\012\145\013\045\014\056\015\065\016" +
    "\062\017\052\020\057\021\044\022\042\025\146\026\064" +
    "\027\055\030\343\046\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\012\145\013\045\014\056\015\065\016\062\017\052\020" +
    "\057\021\044\022\042\025\146\026\064\027\055\030\331" +
    "\036\350\037\310\040\333\041\337\042\305\043\326\046" +
    "\150\051\323\055\316\056\340\121\335\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\012\145\013\045\014\056" +
    "\015\065\016\062\017\052\020\057\021\044\022\042\025" +
    "\146\026\064\027\055\030\356\046\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\012" +
    "\145\013\045\014\056\015\065\016\062\017\052\020\057" +
    "\021\044\022\042\025\146\026\064\027\055\030\362\046" +
    "\150\001\001\000\002\001\001\000\062\012\145\013\045" +
    "\014\056\015\065\016\062\017\052\020\057\021\044\022" +
    "\042\025\146\026\064\027\055\030\331\036\364\037\310" +
    "\040\333\041\337\042\305\043\326\046\150\051\323\055" +
    "\316\056\340\121\335\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\012\145\013\045\014" +
    "\056\015\065\016\062\017\052\020\057\021\044\022\042" +
    "\025\146\026\064\027\055\030\331\040\370\046\150\001" +
    "\001\000\040\012\145\013\045\014\056\015\065\016\062" +
    "\017\052\020\057\021\044\022\042\025\146\026\064\027" +
    "\055\030\331\040\371\046\150\001\001\000\036\012\145" +
    "\013\045\014\056\015\065\016\062\017\052\020\057\021" +
    "\044\022\042\025\146\026\064\027\055\030\373\046\150" +
    "\001\001\000\062\012\145\013\045\014\056\015\065\016" +
    "\062\017\052\020\057\021\044\022\042\025\146\026\064" +
    "\027\055\030\331\036\376\037\310\040\333\041\337\042" +
    "\305\043\326\046\150\051\323\055\316\056\340\121\335" +
    "\001\001\000\002\001\001\000\062\012\145\013\045\014" +
    "\056\015\065\016\062\017\052\020\057\021\044\022\042" +
    "\025\146\026\064\027\055\030\331\036\375\037\310\040" +
    "\333\041\337\042\305\043\326\046\150\051\323\055\316" +
    "\056\340\121\335\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\012\145\013\045\014\056" +
    "\015\065\016\062\017\052\020\057\021\044\022\042\025" +
    "\146\026\064\027\055\030\u0101\046\150\001\001\000\004" +
    "\120\u0102\001\001\000\002\001\001\000\062\012\145\013" +
    "\045\014\056\015\065\016\062\017\052\020\057\021\044" +
    "\022\042\025\146\026\064\027\055\030\331\036\u0104\037" +
    "\310\040\333\041\337\042\305\043\326\046\150\051\323" +
    "\055\316\056\340\121\335\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\012\145\013\045\014\056\015\065\016\062\017\052\020" +
    "\057\021\044\022\042\025\146\026\064\027\055\030\331" +
    "\036\u0109\037\310\040\333\041\337\042\305\043\326\046" +
    "\150\051\323\055\316\056\340\121\335\001\001\000\002" +
    "\001\001\000\040\012\145\013\045\014\056\015\065\016" +
    "\062\017\052\020\057\021\044\022\042\025\146\026\064" +
    "\027\055\030\331\040\u010b\046\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\012\145" +
    "\013\045\014\056\015\065\016\062\017\052\020\057\021" +
    "\044\022\042\025\146\026\064\027\055\030\331\036\u010f" +
    "\037\310\040\333\041\337\042\305\043\326\046\150\051" +
    "\323\055\316\056\340\121\335\001\001\000\002\001\001" +
    "\000\062\012\145\013\045\014\056\015\065\016\062\017" +
    "\052\020\057\021\044\022\042\025\146\026\064\027\055" +
    "\030\331\036\u0113\037\310\040\333\041\337\042\305\043" +
    "\326\046\150\051\323\055\316\056\340\121\335\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\012\145\013\045\014\056\015\065" +
    "\016\062\017\052\020\057\021\044\022\042\025\146\026" +
    "\064\027\055\030\u0116\046\150\001\001\000\004\114\u0117" +
    "\001\001\000\002\001\001\000\004\115\u0119\001\001\000" +
    "\062\012\145\013\045\014\056\015\065\016\062\017\052" +
    "\020\057\021\044\022\042\025\146\026\064\027\055\030" +
    "\331\036\u011a\037\310\040\333\041\337\042\305\043\326" +
    "\046\150\051\323\055\316\056\340\121\335\001\001\000" +
    "\004\050\u011b\001\001\000\002\001\001\000\004\116\u011d" +
    "\001\001\000\062\012\145\013\045\014\056\015\065\016" +
    "\062\017\052\020\057\021\044\022\042\025\146\026\064" +
    "\027\055\030\331\036\u011e\037\310\040\333\041\337\042" +
    "\305\043\326\046\150\051\323\055\316\056\340\121\335" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\u0125\001\001\000\012\002\010\005\277\006\300\033\u0122" +
    "\001\001\000\012\002\010\005\302\006\300\110\u0123\001" +
    "\001\000\004\034\u0124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ControlParser controlParser;
    public static int errors = 0;
    public String MSG_ERROR = "";

    public void syntax_error(Symbol cur_token){
         String msg = "Syntax error at line " + cur_token.left + ", column " + cur_token.right + ".\n" +
                 "Encountered: " + cur_token.value + "\n" +
                 "Was expecting one of:\n";
         System.out.println(msg);
         controlParser.addError(new ParserError(cur_token, cur_token.left+1, cur_token.right+1,MSG_ERROR));
    }

    public void setControlParser(ControlParser controlParser){
        this.controlParser = controlParser;
    }

    public static void newScope(){
	typenames.push(new HashSet<String>());
    }
    public static void deleteScope(){
	typenames.pop();
    }
    public static boolean lookupType(String name){
	for (HashSet<String> scope: typenames)
	    if (scope.contains(name)) return true;
	return false;
    }
    public static void addType(String name){
	typenames.peek().add(name);
    }
    public static LinkedList<HashSet<String>> typenames = new LinkedList<HashSet<String>>();

    public Parser(LexerCupAnalyzer lex, ComplexSymbolFactory sf) {
	super(lex,sf);
    }

    public static void main(String args[]) {
	try {
	    ComplexSymbolFactory csf = new ComplexSymbolFactory();
	    // create a buffering scanner wrapper
	   String expresion = "int prueba(){if (a == b){int hola = 0;}else{} return 0;};";
       LexerCupAnalyzer lexer = new LexerCupAnalyzer(new StringReader(expresion));
	    // start parsing
	    Parser p = new Parser(lexer,csf);
	    System.out.println("Parser runs: ");
	    newScope();
	    XMLElement e = (XMLElement)p.parse().value;/*
	    // create XML output file
	    XMLOutputFactory outFactory = XMLOutputFactory.newInstance();
	    XMLStreamWriter sw = outFactory.createXMLStreamWriter(new FileOutputStream(args[1]));
	    // dump XML output to the file
	    XMLElement.dump(lexer,sw,e); //,"expr","stmt");
	    // transform the parse tree into an AST and a rendered HTML version
	    Transformer transformer = TransformerFactory.newInstance()
		.newTransformer(new StreamSource(new File("tree.xsl")));
	    Source text = new StreamSource(new File(args[1]));
	    transformer.transform(text, new StreamResult(new File("output.html")));
*/
	    System.out.println("Parsing finished!");
	} catch (Exception e) {
	    e.printStackTrace();
	}
    }

    public void report_error(String message, Object info) {
        if (info instanceof String){
    	errors++;

          System.err.println("  "+ errors + "==> " + info + " "+ message +
    					"\n       Parsing resumed from 2nd token before" ); //+ s.current_lexeme()+"\n");
        }
        else {
        	StringBuffer m = new StringBuffer("Error ");
        	if (info instanceof java_cup.runtime.Symbol)
         	   m.append( "("+info.toString()+")" );
        	m.append(" : "+message);
        	System.err.println(m);
        }
      }

      public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal Syntax Error");
      }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {




    public void trigger(AccionSemantica accionSemantica, String s){
        Traductor.getInstance();
        System.out.println("Se disparo una accion semantica: " + String.valueOf(accionSemantica));
        try{
            if(s.contains("$")){
                InsertarTS insertarTS = (InsertarTS) Traductor.accionesSemanticas.get(accionSemantica);
                if(s.contains("Variable")){
                    System.out.println("Se inserta una variable");

                    insertarTS.ejecutar("Variable");
                }else if(s.contains("Funcion")){
                    System.out.println("Se inserta una funcion");
                    insertarTS.ejecutar("Funcion");
                }else if(s.contains("Parametro")){
                    System.out.println("Se inserta un parametro");
                    insertarTS.ejecutar("Parametro");
                }
            }else{
                Traductor.accionesSemanticas.get(accionSemantica).ejecutar(s);


            }
            System.out.println("--------------------------------Pila semantica----------------------------");
                            Traductor.getInstance().getPilaSemantica().mostrarPila();
                            System.out.println("--------------------------------fin de la pila semantica----------------------------");
        }catch(ErrorSemantico e){
            Traductor.getInstance().addError(e);
            System.out.println("Error al ejecutar accion semantica: " + String.valueOf(accionSemantica));
        }
    }
    public void testPrint(String s){
        System.out.println("Test print: " + s);
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Declaracion ::= Declaracion_Specs PuntoComa 
            {
              Object RESULT =null;
		trigger(AccionSemantica.INSERTAR_TS, "$Variable");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Declaracion ::= Declaracion_Specs Init_Declarador_Lista PuntoComa 
            {
              Object RESULT =null;
		trigger(AccionSemantica.INSERTAR_TS, "$Variable");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TipoDato ::= Char 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.RECUERDA_TIPO, tipo.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoDato",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TipoDato ::= Int 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.RECUERDA_TIPO, tipo.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoDato",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TipoDato ::= Long 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.RECUERDA_TIPO,  tipo.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoDato",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TipoDato ::= Short 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.RECUERDA_TIPO, tipo.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoDato",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TipoDato ::= Void 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoDato",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaracion_Specs ::= Const Declaracion_Specs 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion_Specs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaracion_Specs ::= Static Declaracion_Specs 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion_Specs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaracion_Specs ::= TipoDato 
            {
              Object RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion_Specs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Init_Declarador_Lista ::= Init_Declarador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init_Declarador_Lista",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Init_Declarador_Lista ::= Init_Declarador_Lista Coma Init_Declarador 
            {
              Object RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init_Declarador_Lista",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Init_Declarador ::= Declarador 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init_Declarador",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Init_Declarador ::= Declarador Igual Inicializador 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("Recuerda el inicializador");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init_Declarador",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Declarador ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.RECUERDA_ID, identifier.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Declarador ::= ParentesisIzq Declarador ParentesisDer 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Declarador ::= Declarador CorcheteIzq ExpConst CorcheteDer 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Declarador ::= Declarador CorcheteIzq CorcheteDer 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Declarador ::= Declarador ParentesisIzq Parametros_Lista ParentesisDer 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		trigger(AccionSemantica.INSERTAR_TS, "$Parametro");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Declarador ::= Declarador ParentesisIzq Lista_Identificador ParentesisDer 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Declarador ::= Declarador ParentesisIzq ParentesisDer 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Parametros_Lista ::= DeclaracionParametros 
            {
              Object RESULT =null;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros_Lista",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Parametros_Lista ::= Parametros_Lista Coma DeclaracionParametros 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros_Lista",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DeclaracionParametros ::= Declaracion_Specs Declarador 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionParametros",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DeclaracionParametros ::= Declaracion_Specs Declarador_Abstracto 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ad = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionParametros",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DeclaracionParametros ::= Declaracion_Specs 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionParametros",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Declarador_Abstracto ::= ParentesisIzq Declarador_Abstracto ParentesisDer 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ad = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador_Abstracto",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Declarador_Abstracto ::= CorcheteIzq CorcheteDer 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador_Abstracto",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Declarador_Abstracto ::= CorcheteIzq ExpConst CorcheteDer 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador_Abstracto",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Declarador_Abstracto ::= Declarador_Abstracto CorcheteIzq CorcheteDer 
            {
              Object RESULT =null;
		int dadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dad = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador_Abstracto",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Declarador_Abstracto ::= Declarador_Abstracto CorcheteIzq ExpConst CorcheteDer 
            {
              Object RESULT =null;
		int dadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dad = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador_Abstracto",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Declarador_Abstracto ::= ParentesisIzq ParentesisDer 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador_Abstracto",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Declarador_Abstracto ::= ParentesisIzq Parametros_Lista ParentesisDer 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ptlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ptlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ptl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador_Abstracto",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Declarador_Abstracto ::= Declarador_Abstracto ParentesisIzq ParentesisDer 
            {
              Object RESULT =null;
		int dadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dad = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador_Abstracto",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Declarador_Abstracto ::= Declarador_Abstracto ParentesisIzq Parametros_Lista ParentesisDer 
            {
              Object RESULT =null;
		int dadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dad = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ptlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ptlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ptl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador_Abstracto",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Lista_Identificador ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.RECUERDA_ID,  id.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lista_Identificador",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Lista_Identificador ::= Lista_Identificador Coma IDENTIFICADOR 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.RECUERDA_ID,  id.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lista_Identificador",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Inicializador ::= Asignar_Expresion 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inicializador",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Inicializador ::= LlaveIzq Inicializador_lista LlaveDer 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inicializador",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Inicializador ::= LlaveIzq Inicializador_lista Coma LlaveDer 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inicializador",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Inicializador_lista ::= Inicializador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inicializador_lista",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Inicializador_lista ::= Inicializador_lista Coma Inicializador 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inicializador_lista",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Asignar_Expresion ::= ExpCondicional 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignar_Expresion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Asignar_Expresion ::= ExpUnaria Operador_Asignacion Asignar_Expresion 
            {
              Object RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ue = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object aop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignar_Expresion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Operador_Asignacion ::= Igual 
            {
              Object RESULT =null;
		trigger(AccionSemantica.INSERTAR_TS, "$Variable");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operador_Asignacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Operador_Asignacion ::= MultiplicacionAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operador_Asignacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Operador_Asignacion ::= DivisionAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operador_Asignacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Operador_Asignacion ::= ModuloAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operador_Asignacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Operador_Asignacion ::= SumaAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operador_Asignacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Operador_Asignacion ::= RestaAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operador_Asignacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ExpCondicional ::= ExpLogica_OR 
            {
              Object RESULT =null;
		int eloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object elo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpCondicional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpCondicional ::= ExpLogica_OR SignoPregunta Exp DosPuntos ExpCondicional 
            {
              Object RESULT =null;
		int eloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object elo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpCondicional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpLogica_OR ::= ExpLogica_AND 
            {
              Object RESULT =null;
		int elaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ela = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpLogica_OR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$0 ::= 
            {
              Object RESULT =null;
		int eloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object elo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println("Recuerda ||");trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ExpLogica_OR ::= ExpLogica_OR OrDoble NT$0 ExpLogica_AND 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object elo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpLogica_OR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExpLogica_AND ::= ExpOr 
            {
              Object RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpLogica_AND",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$1 ::= 
            {
              Object RESULT =null;
		int elaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ela = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println("Recuerda &&");trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ExpLogica_AND ::= ExpLogica_AND AndDoble NT$1 ExpOr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ela = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpLogica_AND",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExpOr ::= ExpAnd 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpOr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$2 ::= 
            {
              Object RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println("Recuerda |");trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExpOr ::= ExpOr Or NT$2 ExpAnd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpOr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExpAnd ::= ExpIgualdad 
            {
              Object RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAnd",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$3 ::= 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println("Recuerda &");trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExpAnd ::= ExpAnd And NT$3 ExpIgualdad 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAnd",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExpIgualdad ::= ExpRelacional 
            {
              Object RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpIgualdad",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$4 ::= 
            {
              Object RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int igigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int igigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object igig = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println("Recuerda ==");trigger(AccionSemantica.RECUERDA_OP, igig.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ExpIgualdad ::= ExpIgualdad DobleIgual NT$4 ExpRelacional 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int igigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int igigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object igig = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpIgualdad",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$5 ::= 
            {
              Object RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int difleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int difright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dif = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println("Recuerda !=");trigger(AccionSemantica.RECUERDA_OP, dif.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ExpIgualdad ::= ExpIgualdad Diferente NT$5 ExpRelacional 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int difleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int difright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dif = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpIgualdad",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExpRelacional ::= ExpAditiva 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$6 ::= 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println("Recuerda <");trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ExpRelacional ::= ExpRelacional Menor NT$6 ExpAditiva 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$7 ::= 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println("Recuerda >");trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ExpRelacional ::= ExpRelacional Mayor NT$7 ExpAditiva 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$8 ::= 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println("Recuerda <=");trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ExpRelacional ::= ExpRelacional MenorIgual NT$8 ExpAditiva 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$9 ::= 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println("Recuerda >=");trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ExpRelacional ::= ExpRelacional MayorIgual NT$9 ExpAditiva 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ExpAditiva ::= ExpMultiplicativa 
            {
              Object RESULT =null;
		int emleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int emright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object em = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAditiva",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$10 ::= 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ExpAditiva ::= ExpAditiva Mas NT$10 ExpMultiplicativa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int emleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int emright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object em = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAditiva",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$11 ::= 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExpAditiva ::= ExpAditiva Menos NT$11 ExpMultiplicativa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int emleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int emright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object em = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAditiva",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExpMultiplicativa ::= ExpUnaria 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiplicativa",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$12 ::= 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ExpMultiplicativa ::= ExpMultiplicativa Multiplicacion NT$12 ExpUnaria 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiplicativa",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$13 ::= 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ExpMultiplicativa ::= ExpMultiplicativa Division NT$13 ExpUnaria 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiplicativa",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$14 ::= 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExpMultiplicativa ::= ExpMultiplicativa Modulo NT$14 ExpUnaria 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiplicativa",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExpUnaria ::= ExpPostfija 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpUnaria",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$15 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println("Acordarse inc");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExpUnaria ::= Incremento NT$15 ExpUnaria 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpUnaria",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$16 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println("Acordarse dec");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExpUnaria ::= Decremento NT$16 ExpUnaria 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpUnaria",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExpPostfija ::= ExpPrimaria 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ExpPostfija ::= ExpPostfija CorcheteIzq Exp CorcheteDer 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object index = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ExpPostfija ::= ExpPostfija ParentesisIzq ParentesisDer 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ExpPostfija ::= ExpPostfija ParentesisIzq Exp ParentesisDer 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExpPostfija ::= ExpPostfija Punto IDENTIFICADOR 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ExpPostfija ::= ExpPostfija Incremento 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ExpPostfija ::= ExpPostfija Decremento 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Exp ::= Asignar_Expresion 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Exp ::= Exp Coma Asignar_Expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ExpConst ::= ExpCondicional 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpConst",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ExpPrimaria ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.RECUERDA_VARIABLE, ident.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExpPrimaria ::= Const 
            {
              Object RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object constant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ExpPrimaria ::= LITERAL 
            {
              Object RESULT =null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object literal = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.RECUERDA_CONSTANTE, literal.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ExpPrimaria ::= ParentesisIzq Exp ParentesisDer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$17 ::= 
            {
              Object RESULT =null;
MSG_ERROR = "Token inesperado";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ExpPrimaria ::= error NT$17 ParentesisIzq 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PROGRAMA ::= DECLARACIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PROGRAMA ::= PROGRAMA DECLARACIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DECLARACIONES ::= Declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DECLARACIONES ::= DeclaracionFuncion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$18 ::= 
            {
              Object RESULT =null;
MSG_ERROR = "Token insperado";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$18",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DECLARACIONES ::= error NT$18 PuntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$19 ::= 
            {
              Object RESULT =null;
MSG_ERROR = "Token inesperado }";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$19",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DECLARACIONES ::= error NT$19 LlaveIzq 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$20 ::= 
            {
              Object RESULT =null;
MSG_ERROR = "Se esperaba una }";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$20",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DECLARACIONES ::= error NT$20 LlaveDer 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Declaracion_Lista ::= Declaracion 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion_Lista",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Declaracion_Lista ::= Declaracion_Lista Declaracion 
            {
              Object RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion_Lista",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$21 ::= 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 trigger(AccionSemantica.INSERTAR_TS,"$Funcion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$21",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$22 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Parser.newScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$22",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DeclaracionFuncion ::= Declaracion_Specs Declarador NT$21 Declaracion_Lista NT$22 DeclaracionCompuesta 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Parser.deleteScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$23 ::= 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Parser.newScope();trigger(AccionSemantica.INSERTAR_TS,"$Funcion"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$23",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DeclaracionFuncion ::= Declaracion_Specs Declarador NT$23 DeclaracionCompuesta 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Parser.deleteScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$24 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 trigger(AccionSemantica.INSERTAR_TS,"$Funcion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$24",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$25 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Parser.newScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$25",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DeclaracionFuncion ::= Declarador NT$24 Declaracion_Lista NT$25 DeclaracionCompuesta 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Parser.deleteScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // NT$26 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Parser.newScope(); trigger(AccionSemantica.INSERTAR_TS,"$Funcion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$26",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DeclaracionFuncion ::= Declarador NT$26 DeclaracionCompuesta 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Parser.deleteScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DeclaracionFuncion ::= DeclaracionCompuesta 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Lista_Statement ::= Statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lista_Statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Lista_Statement ::= Lista_Statement Statement 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lista_Statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DeclaracionCompuesta ::= LlaveIzq LlaveDer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionCompuesta",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DeclaracionCompuesta ::= LlaveIzq Lista_Statement LlaveDer 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionCompuesta",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DeclaracionCompuesta ::= LlaveIzq Declaracion_Lista LlaveDer 
            {
              Object RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionCompuesta",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DeclaracionCompuesta ::= LlaveIzq Declaracion_Lista Lista_Statement LlaveDer 
            {
              Object RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionCompuesta",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ExpStatement ::= PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ExpStatement ::= Exp PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$27 ::= 
            {
              Object RESULT =null;
MSG_ERROR = "Se esperaba otro token";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$27",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ExpStatement ::= error NT$27 PuntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Statement_Label ::= IDENTIFICADOR DosPuntos Statement 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement_Label",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Statement_Label ::= Case ExpConst DosPuntos Statement 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement_Label",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Statement_Label ::= Default DosPuntos Statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement_Label",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SeleccionStatement ::= seleccionStatementIF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SeleccionStatement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SeleccionStatement ::= Switch ParentesisIzq Exp ParentesisDer Statement 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SeleccionStatement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$28 ::= 
            {
              Object RESULT =null;
trigger(AccionSemantica.START_IF, "IF 339");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$28",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
trigger(AccionSemantica.EVAL_BINARY, "Eval binary") ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$29",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$30 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
trigger(AccionSemantica.TEST_IF, "test if");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$30",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // seleccionStatementIF ::= If NT$28 ParentesisIzq Exp NT$29 ParentesisDer NT$30 Statement seleccionStatementIFElse 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seleccionStatementIF",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$31 ::= 
            {
              Object RESULT =null;
trigger(AccionSemantica.START_ELSE, "Else 340");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$31",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // seleccionStatementIFElse ::= Else NT$31 Statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.END_IF, "End IF 339");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seleccionStatementIFElse",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$32 ::= 
            {
              Object RESULT =null;
trigger(AccionSemantica.START_WHILE, "start while 365");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$32",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$33 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
trigger(AccionSemantica.TEST_WHILE, "TEST while 365");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$33",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // IteracionStatement ::= While NT$32 ParentesisIzq Exp NT$33 ParentesisDer Statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.END_WHILE, "End while 365");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IteracionStatement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // IteracionStatement ::= Do Statement While ParentesisIzq Exp ParentesisDer PuntoComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IteracionStatement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // IteracionStatement ::= For ParentesisIzq ExpStatement ExpStatement ParentesisDer Statement 
            {
              Object RESULT =null;
		int es1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int es1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object es1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int es2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int es2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object es2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IteracionStatement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // IteracionStatement ::= For ParentesisIzq ExpStatement ExpStatement Exp ParentesisDer Statement 
            {
              Object RESULT =null;
		int es1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int es1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object es1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int es2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int es2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object es2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IteracionStatement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Statement ::= Statement_Label 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$34 ::= 
            {
              Object RESULT =null;
 Parser.newScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$34",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Statement ::= NT$34 DeclaracionCompuesta 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Parser.deleteScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Statement ::= ExpStatement 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Statement ::= SeleccionStatement 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Statement ::= IteracionStatement 
            {
              Object RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Statement ::= JumpStatement 
            {
              Object RESULT =null;
		int jsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object js = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Statement ::= ReadStatement 
            {
              Object RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Statement ::= WriteStatement 
            {
              Object RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ws = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // JumpStatement ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JumpStatement",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // JumpStatement ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JumpStatement",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // JumpStatement ::= Return PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JumpStatement",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // JumpStatement ::= Return Exp PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JumpStatement",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // ReadStatement ::= Read ParentesisIzq ExpStatement ParentesisDer 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStatement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // WriteStatement ::= Write ParentesisIzq Exp ParentesisDer 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStatement",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
