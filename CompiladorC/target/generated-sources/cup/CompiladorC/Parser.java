
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package CompiladorC;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\045\004\000\002\045" +
    "\004\000\002\045\004\000\002\045\004\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\007\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\046\004\000" +
    "\002\010\003\000\002\010\005\000\002\050\004\000\002" +
    "\050\003\000\002\050\005\000\002\050\005\000\002\012" +
    "\004\000\002\012\003\000\002\015\003\000\002\015\004" +
    "\000\002\016\004\000\002\017\004\000\002\017\006\000" +
    "\002\020\005\000\002\020\007\000\002\020\010\000\002" +
    "\020\012\000\002\020\003\000\002\021\007\000\002\021" +
    "\012\000\002\022\007\000\002\022\012\000\002\023\005" +
    "\000\002\023\003\000\002\024\006\000\002\024\003\000" +
    "\002\025\006\000\002\027\003\000\002\031\007\000\002" +
    "\032\005\000\002\033\003\000\002\034\011\000\002\035" +
    "\003\000\002\035\006\000\002\036\017\000\002\047\004" +
    "\000\002\047\004\000\002\040\011\000\002\041\013\000" +
    "\002\042\011\000\002\043\011\000\002\044\003\000\002" +
    "\044\007\000\002\030\004\000\002\030\004\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\037\004\000\002\037\004\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\044\006\041\007\017\013\034\014\043\017" +
    "\035\025\027\027\006\030\024\031\021\034\042\041\032" +
    "\045\007\047\023\054\011\055\004\067\030\072\040\001" +
    "\002\000\006\007\uffef\073\uffef\001\002\000\046\002\ufffc" +
    "\006\041\007\017\013\034\014\043\017\035\025\027\027" +
    "\006\030\024\031\021\034\042\041\032\045\007\047\023" +
    "\054\011\055\004\067\030\072\040\001\002\000\004\072" +
    "\273\001\002\000\004\007\262\001\002\000\046\002\ufffa" +
    "\006\041\007\017\013\034\014\043\017\035\025\027\027" +
    "\006\030\024\031\021\034\042\041\032\045\007\047\023" +
    "\054\011\055\004\067\030\072\040\001\002\000\006\007" +
    "\uffee\073\uffee\001\002\000\046\002\ufff9\006\041\007\017" +
    "\013\034\014\043\017\035\025\027\027\006\030\024\031" +
    "\021\034\042\041\032\045\007\047\023\054\011\055\004" +
    "\067\030\072\040\001\002\000\062\002\uffd7\006\uffd7\007" +
    "\uffd7\011\uffd7\013\uffd7\014\uffd7\017\uffd7\021\uffd7\025\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\033\uffd7\034\uffd7\041\uffd7\045" +
    "\uffd7\047\uffd7\054\uffd7\055\uffd7\067\uffd7\071\uffd7\072\uffd7" +
    "\073\uffd7\077\uffd7\001\002\000\056\002\uffb0\006\uffb0\007" +
    "\uffb0\011\uffb0\013\uffb0\014\uffb0\017\uffb0\021\uffb0\025\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\033\uffb0\034\uffb0\041\uffb0\045" +
    "\uffb0\047\uffb0\054\uffb0\055\uffb0\067\uffb0\072\uffb0\077\uffb0" +
    "\001\002\000\046\002\uffd6\006\uffd6\007\uffd6\013\uffd6\014" +
    "\uffd6\017\uffd6\025\uffd6\027\uffd6\030\uffd6\031\uffd6\034\uffd6" +
    "\041\uffd6\045\uffd6\047\uffd6\054\uffd6\055\uffd6\067\uffd6\072" +
    "\uffd6\001\002\000\056\002\uffab\006\uffab\007\uffab\011\uffab" +
    "\013\uffab\014\uffab\017\uffab\021\uffab\025\uffab\027\uffab\030" +
    "\uffab\031\uffab\033\uffab\034\uffab\041\uffab\045\uffab\047\uffab" +
    "\054\uffab\055\uffab\067\uffab\072\uffab\077\uffab\001\002\000" +
    "\020\056\252\071\251\072\244\102\250\103\246\104\245" +
    "\105\247\001\002\000\004\071\242\001\002\000\004\007" +
    "\ufff6\001\002\000\012\006\041\054\011\055\004\072\040" +
    "\001\002\000\004\072\233\001\002\000\004\007\ufff7\001" +
    "\002\000\004\002\232\001\002\000\056\002\uffb1\006\uffb1" +
    "\007\uffb1\011\uffb1\013\uffb1\014\uffb1\017\uffb1\021\uffb1\025" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\033\uffb1\034\uffb1\041\uffb1" +
    "\045\uffb1\047\uffb1\054\uffb1\055\uffb1\067\uffb1\072\uffb1\077" +
    "\uffb1\001\002\000\004\072\212\001\002\000\012\006\uffe8" +
    "\054\uffe8\055\uffe8\072\uffe8\001\002\000\062\002\uffde\006" +
    "\uffde\007\uffde\011\uffde\013\uffde\014\uffde\017\uffde\021\uffde" +
    "\025\uffde\027\uffde\030\uffde\031\uffde\033\uffde\034\uffde\041" +
    "\uffde\045\uffde\047\uffde\054\uffde\055\uffde\067\uffde\071\uffde" +
    "\072\uffde\073\uffde\077\uffde\001\002\000\004\072\167\001" +
    "\002\000\004\007\166\001\002\000\004\007\ufff8\001\002" +
    "\000\004\076\151\001\002\000\056\002\uffac\006\uffac\007" +
    "\uffac\011\uffac\013\uffac\014\uffac\017\uffac\021\uffac\025\uffac" +
    "\027\uffac\030\uffac\031\uffac\033\uffac\034\uffac\041\uffac\045" +
    "\uffac\047\uffac\054\uffac\055\uffac\067\uffac\072\uffac\077\uffac" +
    "\001\002\000\056\002\uffad\006\uffad\007\uffad\011\uffad\013" +
    "\uffad\014\uffad\017\uffad\021\uffad\025\uffad\027\uffad\030\uffad" +
    "\031\uffad\033\uffad\034\uffad\041\uffad\045\uffad\047\uffad\054" +
    "\uffad\055\uffad\067\uffad\072\uffad\077\uffad\001\002\000\010" +
    "\006\041\054\011\055\004\001\002\000\114\002\uffdb\006" +
    "\uffdb\007\uffdb\011\uffdb\013\uffdb\014\uffdb\017\uffdb\021\uffdb" +
    "\025\uffdb\027\uffdb\030\uffdb\031\uffdb\033\uffdb\034\uffdb\041" +
    "\uffdb\045\uffdb\047\uffdb\050\144\051\130\052\127\053\132" +
    "\054\uffdb\055\uffdb\057\136\060\141\061\140\062\134\063" +
    "\131\064\142\065\133\066\126\067\uffdb\071\uffdb\072\uffdb" +
    "\073\uffdb\077\uffdb\111\143\001\002\000\004\007\ufff5\001" +
    "\002\000\012\013\034\030\024\031\021\034\042\001\002" +
    "\000\056\002\uffaf\006\uffaf\007\uffaf\011\uffaf\013\uffaf\014" +
    "\uffaf\017\uffaf\021\uffaf\025\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\033\uffaf\034\uffaf\041\uffaf\045\uffaf\047\uffaf\054\uffaf\055" +
    "\uffaf\067\uffaf\072\uffaf\077\uffaf\001\002\000\056\002\uffae" +
    "\006\uffae\007\uffae\011\uffae\013\uffae\014\uffae\017\uffae\021" +
    "\uffae\025\uffae\027\uffae\030\uffae\031\uffae\033\uffae\034\uffae" +
    "\041\uffae\045\uffae\047\uffae\054\uffae\055\uffae\067\uffae\072" +
    "\uffae\077\uffae\001\002\000\004\007\052\001\002\000\046" +
    "\002\ufffb\006\041\007\017\013\034\014\043\017\035\025" +
    "\027\027\006\030\024\031\021\034\042\041\032\045\007" +
    "\047\023\054\011\055\004\067\030\072\040\001\002\000" +
    "\004\002\uffff\001\002\000\046\002\uffd4\006\uffd4\007\uffd4" +
    "\013\uffd4\014\uffd4\017\uffd4\025\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\034\uffd4\041\uffd4\045\uffd4\047\uffd4\054\uffd4\055\uffd4" +
    "\067\uffd4\072\uffd4\001\002\000\012\056\057\070\053\071" +
    "\056\072\054\001\002\000\004\007\105\001\002\000\014" +
    "\013\034\030\024\031\021\034\042\073\062\001\002\000" +
    "\046\002\uffd3\006\uffd3\007\uffd3\013\uffd3\014\uffd3\017\uffd3" +
    "\025\uffd3\027\uffd3\030\uffd3\031\uffd3\034\uffd3\041\uffd3\045" +
    "\uffd3\047\uffd3\054\uffd3\055\uffd3\067\uffd3\072\uffd3\001\002" +
    "\000\046\002\uffcd\006\uffcd\007\uffcd\013\uffcd\014\uffcd\017" +
    "\uffcd\025\uffcd\027\uffcd\030\uffcd\031\uffcd\034\uffcd\041\uffcd" +
    "\045\uffcd\047\uffcd\054\uffcd\055\uffcd\067\uffcd\072\uffcd\001" +
    "\002\000\004\006\060\001\002\000\006\070\053\071\056" +
    "\001\002\000\046\002\uffd2\006\uffd2\007\uffd2\013\uffd2\014" +
    "\uffd2\017\uffd2\025\uffd2\027\uffd2\030\uffd2\031\uffd2\034\uffd2" +
    "\041\uffd2\045\uffd2\047\uffd2\054\uffd2\055\uffd2\067\uffd2\072" +
    "\uffd2\001\002\000\006\071\uffc7\073\uffc7\001\002\000\004" +
    "\007\076\001\002\000\006\071\066\073\065\001\002\000" +
    "\004\076\067\001\002\000\046\002\uffcc\006\uffcc\007\uffcc" +
    "\013\uffcc\014\uffcc\017\uffcc\025\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\034\uffcc\041\uffcc\045\uffcc\047\uffcc\054\uffcc\055\uffcc" +
    "\067\uffcc\072\uffcc\001\002\000\030\006\041\007\017\017" +
    "\035\025\027\027\006\041\032\047\023\054\011\055\004" +
    "\067\030\072\040\001\002\000\004\033\073\001\002\000" +
    "\004\077\072\001\002\000\046\002\uffcb\006\uffcb\007\uffcb" +
    "\013\uffcb\014\uffcb\017\uffcb\025\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\034\uffcb\041\uffcb\045\uffcb\047\uffcb\054\uffcb\055\uffcb" +
    "\067\uffcb\072\uffcb\001\002\000\002\001\002\000\004\071" +
    "\075\001\002\000\004\077\uffc4\001\002\000\006\070\100" +
    "\073\101\001\002\000\006\071\uffc8\073\uffc8\001\002\000" +
    "\012\013\034\030\024\031\021\034\042\001\002\000\006" +
    "\071\uffc5\073\uffc5\001\002\000\004\007\103\001\002\000" +
    "\006\070\100\073\101\001\002\000\006\071\uffc6\073\uffc6" +
    "\001\002\000\012\056\110\070\053\071\056\074\107\001" +
    "\002\000\046\002\uffd1\006\uffd1\007\uffd1\013\uffd1\014\uffd1" +
    "\017\uffd1\025\uffd1\027\uffd1\030\uffd1\031\uffd1\034\uffd1\041" +
    "\uffd1\045\uffd1\047\uffd1\054\uffd1\055\uffd1\067\uffd1\072\uffd1" +
    "\001\002\000\004\006\113\001\002\000\004\006\111\001" +
    "\002\000\006\070\053\071\056\001\002\000\046\002\uffd0" +
    "\006\uffd0\007\uffd0\013\uffd0\014\uffd0\017\uffd0\025\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\034\uffd0\041\uffd0\045\uffd0\047\uffd0" +
    "\054\uffd0\055\uffd0\067\uffd0\072\uffd0\001\002\000\004\075" +
    "\114\001\002\000\010\056\116\070\053\071\056\001\002" +
    "\000\046\002\uffcf\006\uffcf\007\uffcf\013\uffcf\014\uffcf\017" +
    "\uffcf\025\uffcf\027\uffcf\030\uffcf\031\uffcf\034\uffcf\041\uffcf" +
    "\045\uffcf\047\uffcf\054\uffcf\055\uffcf\067\uffcf\072\uffcf\001" +
    "\002\000\004\076\117\001\002\000\004\077\122\001\002" +
    "\000\006\070\053\071\056\001\002\000\046\002\uffce\006" +
    "\uffce\007\uffce\013\uffce\014\uffce\017\uffce\025\uffce\027\uffce" +
    "\030\uffce\031\uffce\034\uffce\041\uffce\045\uffce\047\uffce\054" +
    "\uffce\055\uffce\067\uffce\072\uffce\001\002\000\006\070\uffdf" +
    "\071\uffdf\001\002\000\046\002\uffd5\006\uffd5\007\uffd5\013" +
    "\uffd5\014\uffd5\017\uffd5\025\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\034\uffd5\041\uffd5\045\uffd5\047\uffd5\054\uffd5\055\uffd5\067" +
    "\uffd5\072\uffd5\001\002\000\004\007\125\001\002\000\010" +
    "\056\057\070\053\071\056\001\002\000\014\006\uffe1\054" +
    "\uffe1\055\uffe1\067\uffe1\072\uffe1\001\002\000\012\006\uffeb" +
    "\054\uffeb\055\uffeb\072\uffeb\001\002\000\012\006\uffec\054" +
    "\uffec\055\uffec\072\uffec\001\002\000\014\006\uffe5\054\uffe5" +
    "\055\uffe5\067\uffe5\072\uffe5\001\002\000\012\006\uffea\054" +
    "\uffea\055\uffea\072\uffea\001\002\000\014\006\uffe0\054\uffe0" +
    "\055\uffe0\067\uffe0\072\uffe0\001\002\000\014\006\uffe2\054" +
    "\uffe2\055\uffe2\067\uffe2\072\uffe2\001\002\000\012\006\041" +
    "\054\011\055\004\072\040\001\002\000\014\006\uffe7\054" +
    "\uffe7\055\uffe7\067\uffe7\072\uffe7\001\002\000\014\006\041" +
    "\054\011\055\004\067\030\072\040\001\002\000\014\006" +
    "\uffe4\054\uffe4\055\uffe4\067\uffe4\072\uffe4\001\002\000\014" +
    "\006\uffe3\054\uffe3\055\uffe3\067\uffe3\072\uffe3\001\002\000" +
    "\014\006\uffe6\054\uffe6\055\uffe6\067\uffe6\072\uffe6\001\002" +
    "\000\012\006\uffe9\054\uffe9\055\uffe9\072\uffe9\001\002\000" +
    "\012\006\uffed\054\uffed\055\uffed\072\uffed\001\002\000\062" +
    "\002\uffd9\006\uffd9\007\uffd9\011\uffd9\013\uffd9\014\uffd9\017" +
    "\uffd9\021\uffd9\025\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9" +
    "\034\uffd9\041\uffd9\045\uffd9\047\uffd9\054\uffd9\055\uffd9\067" +
    "\uffd9\071\uffd9\072\uffd9\073\uffd9\077\uffd9\001\002\000\062" +
    "\002\uffda\006\uffda\007\uffda\011\uffda\013\uffda\014\uffda\017" +
    "\uffda\021\uffda\025\uffda\027\uffda\030\uffda\031\uffda\033\uffda" +
    "\034\uffda\041\uffda\045\uffda\047\uffda\054\uffda\055\uffda\067" +
    "\uffda\071\uffda\072\uffda\073\uffda\077\uffda\001\002\000\004" +
    "\073\150\001\002\000\062\002\uffdd\006\uffdd\007\uffdd\011" +
    "\uffdd\013\uffdd\014\uffdd\017\uffdd\021\uffdd\025\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\033\uffdd\034\uffdd\041\uffdd\045\uffdd\047" +
    "\uffdd\054\uffdd\055\uffdd\067\uffdd\071\uffdd\072\uffdd\073\uffdd" +
    "\077\uffdd\001\002\000\034\006\041\007\017\011\154\015" +
    "\152\017\035\025\027\027\006\041\032\047\023\054\011" +
    "\055\004\067\030\072\040\001\002\000\004\071\165\001" +
    "\002\000\004\077\uffa8\001\002\000\004\071\164\001\002" +
    "\000\004\077\156\001\002\000\004\047\157\001\002\000" +
    "\004\072\160\001\002\000\014\006\041\054\011\055\004" +
    "\067\030\072\040\001\002\000\004\073\162\001\002\000" +
    "\004\071\163\001\002\000\056\002\uffb8\006\uffb8\007\uffb8" +
    "\011\uffb8\013\uffb8\014\uffb8\017\uffb8\021\uffb8\025\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\033\uffb8\034\uffb8\041\uffb8\045\uffb8" +
    "\047\uffb8\054\uffb8\055\uffb8\067\uffb8\072\uffb8\077\uffb8\001" +
    "\002\000\004\077\uffaa\001\002\000\004\077\uffa9\001\002" +
    "\000\062\002\uffdc\006\uffdc\007\uffdc\011\uffdc\013\uffdc\014" +
    "\uffdc\017\uffdc\021\uffdc\025\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\033\uffdc\034\uffdc\041\uffdc\045\uffdc\047\uffdc\054\uffdc\055" +
    "\uffdc\067\uffdc\071\uffdc\072\uffdc\073\uffdc\077\uffdc\001\002" +
    "\000\004\007\170\001\002\000\004\073\171\001\002\000" +
    "\004\076\172\001\002\000\004\012\173\001\002\000\004" +
    "\006\176\001\002\000\004\077\175\001\002\000\056\002" +
    "\uffb7\006\uffb7\007\uffb7\011\uffb7\013\uffb7\014\uffb7\017\uffb7" +
    "\021\uffb7\025\uffb7\027\uffb7\030\uffb7\031\uffb7\033\uffb7\034" +
    "\uffb7\041\uffb7\045\uffb7\047\uffb7\054\uffb7\055\uffb7\067\uffb7" +
    "\072\uffb7\077\uffb7\001\002\000\004\100\177\001\002\000" +
    "\030\006\041\007\017\017\035\025\027\027\006\041\032" +
    "\047\023\054\011\055\004\067\030\072\040\001\002\000" +
    "\004\011\201\001\002\000\004\071\202\001\002\000\006" +
    "\012\173\016\204\001\002\000\004\077\uffb6\001\002\000" +
    "\004\100\206\001\002\000\004\077\uffb5\001\002\000\030" +
    "\006\041\007\017\017\035\025\027\027\006\041\032\047" +
    "\023\054\011\055\004\067\030\072\040\001\002\000\004" +
    "\011\210\001\002\000\004\071\211\001\002\000\004\077" +
    "\uffb4\001\002\000\012\013\034\030\024\031\021\034\042" +
    "\001\002\000\004\007\214\001\002\000\004\056\215\001" +
    "\002\000\004\006\216\001\002\000\004\070\217\001\002" +
    "\000\014\006\041\054\011\055\004\067\030\072\040\001" +
    "\002\000\010\007\221\054\011\055\004\001\002\000\006" +
    "\054\011\055\004\001\002\000\004\007\230\001\002\000" +
    "\004\073\224\001\002\000\004\076\225\001\002\000\034" +
    "\006\041\007\017\011\154\015\152\017\035\025\027\027" +
    "\006\041\032\047\023\054\011\055\004\067\030\072\040" +
    "\001\002\000\004\077\227\001\002\000\056\002\uffbc\006" +
    "\uffbc\007\uffbc\011\uffbc\013\uffbc\014\uffbc\017\uffbc\021\uffbc" +
    "\025\uffbc\027\uffbc\030\uffbc\031\uffbc\033\uffbc\034\uffbc\041" +
    "\uffbc\045\uffbc\047\uffbc\054\uffbc\055\uffbc\067\uffbc\072\uffbc" +
    "\077\uffbc\001\002\000\004\073\uffbb\001\002\000\004\073" +
    "\uffba\001\002\000\004\002\001\001\002\000\014\006\041" +
    "\054\011\055\004\067\030\072\040\001\002\000\004\073" +
    "\235\001\002\000\004\076\236\001\002\000\034\006\041" +
    "\007\017\011\154\015\152\017\035\025\027\027\006\041" +
    "\032\047\023\054\011\055\004\067\030\072\040\001\002" +
    "\000\004\077\240\001\002\000\056\002\uffb9\006\uffb9\007" +
    "\uffb9\011\uffb9\013\uffb9\014\uffb9\017\uffb9\021\uffb9\025\uffb9" +
    "\027\uffb9\030\uffb9\031\uffb9\033\uffb9\034\uffb9\041\uffb9\045" +
    "\uffb9\047\uffb9\054\uffb9\055\uffb9\067\uffb9\072\uffb9\077\uffb9" +
    "\001\002\000\062\002\uffd8\006\uffd8\007\uffd8\011\uffd8\013" +
    "\uffd8\014\uffd8\017\uffd8\021\uffd8\025\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\033\uffd8\034\uffd8\041\uffd8\045\uffd8\047\uffd8\054" +
    "\uffd8\055\uffd8\067\uffd8\071\uffd8\072\uffd8\073\uffd8\077\uffd8" +
    "\001\002\000\056\002\uffb2\006\uffb2\007\uffb2\011\uffb2\013" +
    "\uffb2\014\uffb2\017\uffb2\021\uffb2\025\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\033\uffb2\034\uffb2\041\uffb2\045\uffb2\047\uffb2\054" +
    "\uffb2\055\uffb2\067\uffb2\072\uffb2\077\uffb2\001\002\000\012" +
    "\006\041\054\011\055\004\072\040\001\002\000\014\013" +
    "\034\030\024\031\021\034\042\073\062\001\002\000\012" +
    "\006\ufff1\054\ufff1\055\ufff1\072\ufff1\001\002\000\012\006" +
    "\ufff2\054\ufff2\055\ufff2\072\ufff2\001\002\000\012\006\ufff0" +
    "\054\ufff0\055\ufff0\072\ufff0\001\002\000\012\006\ufff3\054" +
    "\ufff3\055\ufff3\072\ufff3\001\002\000\056\002\uffb3\006\uffb3" +
    "\007\uffb3\011\uffb3\013\uffb3\014\uffb3\017\uffb3\021\uffb3\025" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\033\uffb3\034\uffb3\041\uffb3" +
    "\045\uffb3\047\uffb3\054\uffb3\055\uffb3\067\uffb3\072\uffb3\077" +
    "\uffb3\001\002\000\012\006\ufff4\054\ufff4\055\ufff4\072\ufff4" +
    "\001\002\000\004\073\254\001\002\000\004\071\255\001" +
    "\002\000\056\002\uffc2\006\uffc2\007\uffc2\011\uffc2\013\uffc2" +
    "\014\uffc2\017\uffc2\021\uffc2\025\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\033\uffc2\034\uffc2\041\uffc2\045\uffc2\047\uffc2\054\uffc2" +
    "\055\uffc2\067\uffc2\072\uffc2\077\uffc2\001\002\000\056\002" +
    "\uffc1\006\uffc1\007\uffc1\011\uffc1\013\uffc1\014\uffc1\017\uffc1" +
    "\021\uffc1\025\uffc1\027\uffc1\030\uffc1\031\uffc1\033\uffc1\034" +
    "\uffc1\041\uffc1\045\uffc1\047\uffc1\054\uffc1\055\uffc1\067\uffc1" +
    "\072\uffc1\077\uffc1\001\002\000\056\002\uffc0\006\uffc0\007" +
    "\uffc0\011\uffc0\013\uffc0\014\uffc0\017\uffc0\021\uffc0\025\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\033\uffc0\034\uffc0\041\uffc0\045" +
    "\uffc0\047\uffc0\054\uffc0\055\uffc0\067\uffc0\072\uffc0\077\uffc0" +
    "\001\002\000\004\002\ufffd\001\002\000\004\002\ufffe\001" +
    "\002\000\004\072\263\001\002\000\014\013\034\030\024" +
    "\031\021\034\042\073\062\001\002\000\006\071\266\073" +
    "\265\001\002\000\004\076\267\001\002\000\046\002\uffca" +
    "\006\uffca\007\uffca\013\uffca\014\uffca\017\uffca\025\uffca\027" +
    "\uffca\030\uffca\031\uffca\034\uffca\041\uffca\045\uffca\047\uffca" +
    "\054\uffca\055\uffca\067\uffca\072\uffca\001\002\000\030\006" +
    "\041\007\017\017\035\025\027\027\006\041\032\047\023" +
    "\054\011\055\004\067\030\072\040\001\002\000\004\077" +
    "\uffc3\001\002\000\004\077\272\001\002\000\046\002\uffc9" +
    "\006\uffc9\007\uffc9\013\uffc9\014\uffc9\017\uffc9\025\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\034\uffc9\041\uffc9\045\uffc9\047\uffc9" +
    "\054\uffc9\055\uffc9\067\uffc9\072\uffc9\001\002\000\014\006" +
    "\041\054\011\055\004\067\030\072\040\001\002\000\004" +
    "\073\275\001\002\000\004\076\276\001\002\000\030\006" +
    "\041\007\017\017\035\025\027\027\006\041\032\047\023" +
    "\054\011\055\004\067\030\072\040\001\002\000\006\021" +
    "\302\077\301\001\002\000\056\002\uffbf\006\uffbf\007\uffbf" +
    "\011\uffbf\013\uffbf\014\uffbf\017\uffbf\021\uffbf\025\uffbf\027" +
    "\uffbf\030\uffbf\031\uffbf\033\uffbf\034\uffbf\041\uffbf\045\uffbf" +
    "\047\uffbf\054\uffbf\055\uffbf\067\uffbf\072\uffbf\077\uffbf\001" +
    "\002\000\056\002\uffbe\006\uffbe\007\uffbe\011\uffbe\013\uffbe" +
    "\014\uffbe\017\uffbe\021\uffbe\025\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\033\uffbe\034\uffbe\041\uffbe\045\uffbe\047\uffbe\054\uffbe" +
    "\055\uffbe\067\uffbe\072\uffbe\077\uffbe\001\002\000\004\076" +
    "\303\001\002\000\030\006\041\007\017\017\035\025\027" +
    "\027\006\041\032\047\023\054\011\055\004\067\030\072" +
    "\040\001\002\000\004\077\305\001\002\000\056\002\uffbd" +
    "\006\uffbd\007\uffbd\011\uffbd\013\uffbd\014\uffbd\017\uffbd\021" +
    "\uffbd\025\uffbd\027\uffbd\030\uffbd\031\uffbd\033\uffbd\034\uffbd" +
    "\041\uffbd\045\uffbd\047\uffbd\054\uffbd\055\uffbd\067\uffbd\072" +
    "\uffbd\077\uffbd\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\050\002\045\004\032\007\021\010\012\012" +
    "\017\015\004\016\014\021\046\022\007\030\011\031\015" +
    "\032\035\034\025\036\013\040\043\041\044\042\036\045" +
    "\024\050\030\001\001\000\002\001\001\000\050\002\045" +
    "\004\032\007\021\010\012\012\017\015\004\016\014\021" +
    "\046\022\007\030\011\031\015\032\035\034\025\036\013" +
    "\040\043\041\044\042\036\045\305\050\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\002\045\004\032" +
    "\007\021\010\012\012\017\015\004\016\014\021\046\022" +
    "\007\030\011\031\015\032\035\034\025\036\013\040\043" +
    "\041\044\042\036\045\260\050\030\001\001\000\002\001" +
    "\001\000\050\002\045\004\032\007\021\010\012\012\017" +
    "\015\004\016\014\021\046\022\007\030\011\031\015\032" +
    "\035\034\025\036\013\040\043\041\044\042\036\045\257" +
    "\050\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\032\010" +
    "\240\050\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\032\050\146\001\001" +
    "\000\006\005\134\006\136\001\001\000\002\001\001\000" +
    "\006\002\123\016\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\050\001\001\000\050\002\045\004" +
    "\032\007\021\010\012\012\017\015\004\016\014\021\046" +
    "\022\007\030\011\031\015\032\035\034\025\036\013\040" +
    "\043\041\044\042\036\045\047\050\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\054\001\001\000" +
    "\002\001\001\000\006\002\062\023\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\032\007\021\010\012\012\017\025\070" +
    "\030\067\031\015\032\035\034\025\036\013\040\043\041" +
    "\044\042\036\050\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\076\001\001" +
    "\000\002\001\001\000\004\002\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\103\001\001\000\002" +
    "\001\001\000\004\020\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\114\001" +
    "\001\000\002\001\001\000\004\046\117\001\001\000\002" +
    "\001\001\000\004\020\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\050\001\001" +
    "\000\004\020\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\032\010" +
    "\145\050\030\001\001\000\002\001\001\000\014\004\032" +
    "\007\021\010\012\012\144\050\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\004\032\007\021" +
    "\010\012\012\017\030\152\031\015\032\035\034\025\036" +
    "\013\037\154\040\043\041\044\042\036\050\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\032\007\021\010\012\012\160\050\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\032\007\021\010\012" +
    "\012\017\030\177\031\015\032\035\034\025\036\013\040" +
    "\043\041\044\042\036\050\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\043\204\044\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\032\007\021\010\012\012\017\030\206\031\015\032" +
    "\035\034\025\036\013\040\043\041\044\042\036\050\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\032\007\021\010\012\012\217\050\030\001\001\000\006" +
    "\004\221\047\222\001\001\000\004\004\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\004\032\007\021\010\012\012\017\030\152\031\015\032" +
    "\035\034\025\036\013\037\225\040\043\041\044\042\036" +
    "\050\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\032\007\021\010\012\012\233\050\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\004\032\007\021" +
    "\010\012\012\017\030\152\031\015\032\035\034\025\036" +
    "\013\037\236\040\043\041\044\042\036\050\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\032\010\256\033\255\050\030" +
    "\001\001\000\006\002\062\023\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\062\023\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\004\032\007" +
    "\021\010\012\012\017\027\270\030\267\031\015\032\035" +
    "\034\025\036\013\040\043\041\044\042\036\050\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\032\007\021\010\012\012\273\050\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\032" +
    "\007\021\010\012\012\017\030\276\031\015\032\035\034" +
    "\025\036\013\040\043\041\044\042\036\050\030\001\001" +
    "\000\004\035\277\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\032\007\021\010\012" +
    "\012\017\030\303\031\015\032\035\034\025\036\013\040" +
    "\043\041\044\042\036\050\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= MAIN EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // MAIN ::= DeclaracionVariable MAIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN ::= DeclaracionFuncion MAIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MAIN ::= DeclaracionFuncionVoid MAIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MAIN ::= CUERPO MAIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MAIN ::= DeclaracionVariable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MAIN ::= DeclaracionFuncion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MAIN ::= DeclaracionFuncionVoid 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MAIN ::= CUERPO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TipoDato ::= Char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoDato",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TipoDato ::= Int 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoDato",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TipoDato ::= Long 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoDato",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TipoDato ::= Short 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoDato",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OpAsignacion ::= Igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpAsignacion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OpAsignacion ::= SumaAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpAsignacion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OpAsignacion ::= RestaAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpAsignacion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OpAsignacion ::= MultiplicacionAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpAsignacion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OpAsignacion ::= DivisionAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpAsignacion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OpAritmeticoUnario ::= Incremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpAritmeticoUnario",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OpAritmeticoUnario ::= Decremento 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpAritmeticoUnario",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OpAritmeticoBinario ::= Mas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpAritmeticoBinario",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OpAritmeticoBinario ::= Menos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpAritmeticoBinario",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OpAritmeticoBinario ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpAritmeticoBinario",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OpAritmeticoBinario ::= Division 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpAritmeticoBinario",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OpAritmeticoBinario ::= Modulo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpAritmeticoBinario",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OpBoolUnario ::= Not 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpBoolUnario",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OpBoolBinario ::= DobleIgual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpBoolBinario",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OpBoolBinario ::= Diferente 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpBoolBinario",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OpBoolBinario ::= Menor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpBoolBinario",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OpBoolBinario ::= Mayor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpBoolBinario",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OpBoolBinario ::= MayorIgual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpBoolBinario",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OpBoolBinario ::= MenorIgual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpBoolBinario",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OpBoolBinario ::= AndDoble 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpBoolBinario",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OpBoolBinario ::= OrDoble 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpBoolBinario",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DefAsignarArray ::= LlaveIzq LlaveDer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefAsignarArray",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ExpAritmetica ::= ExpAritmeticaBoolP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ExpAritmetica ::= ParentesisIzq ExpAritmeticaBoolP ParentesisDer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAritmetica",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ExpAritmeticaBoolP ::= OpAritmeticoUnario IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAritmeticaBoolP",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ExpAritmeticaBoolP ::= LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAritmeticaBoolP",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ExpAritmeticaBoolP ::= LITERAL OpAritmeticoBinario ExpAritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAritmeticaBoolP",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ExpAritmeticaBoolP ::= LITERAL OpBoolBinario ExpBool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAritmeticaBoolP",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExpBool ::= OpBoolUnario ExpAritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpBool",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ExpBool ::= ExpAritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpBool",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DeclaracionVariable ::= DeclaracionVariableP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionVariable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DeclaracionVariable ::= Const DeclaracionVariableP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionVariable",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DeclaracionVariableP ::= TipoDato NuevaVariable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionVariableP",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NuevaVariable ::= IDENTIFICADOR MasVariables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NuevaVariable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NuevaVariable ::= IDENTIFICADOR Igual LITERAL MasVariables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NuevaVariable",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MasVariables ::= Coma IDENTIFICADOR MasVariables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MasVariables",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MasVariables ::= Coma IDENTIFICADOR Igual LITERAL MasVariables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MasVariables",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MasVariables ::= Coma IDENTIFICADOR CorcheteIzq LITERAL CorcheteDer MasVariables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MasVariables",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MasVariables ::= Coma IDENTIFICADOR CorcheteIzq LITERAL CorcheteDer Igual DefAsignarArray MasVariables 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MasVariables",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MasVariables ::= PuntoComa 
            {
              Object RESULT =null;
		RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MasVariables",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DeclaracionFuncion ::= TipoDato IDENTIFICADOR ParentesisIzq Parametros PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DeclaracionFuncion ::= TipoDato IDENTIFICADOR ParentesisIzq Parametros ParentesisDer LlaveIzq CuerpoFunciones LlaveDer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DeclaracionFuncionVoid ::= Void IDENTIFICADOR ParentesisIzq Parametros PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncionVoid",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DeclaracionFuncionVoid ::= Void IDENTIFICADOR ParentesisIzq Parametros ParentesisDer LlaveIzq CuerpoFuncionesVoid LlaveDer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncionVoid",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Parametros ::= TipoDato IDENTIFICADOR ParametrosAdicionales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Parametros ::= ParentesisDer 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ParametrosAdicionales ::= Coma TipoDato IDENTIFICADOR ParametrosAdicionales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParametrosAdicionales",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ParametrosAdicionales ::= ParentesisDer 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParametrosAdicionales",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CuerpoFunciones ::= CUERPO Return Retornable PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CuerpoFunciones",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CuerpoFuncionesVoid ::= CUERPO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CuerpoFuncionesVoid",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LlamarFunciones ::= IDENTIFICADOR ParentesisIzq Parametros ParentesisDer PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LlamarFunciones",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIGNACION ::= IDENTIFICADOR OpAsignacion VALOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALOR ::= ExpAritmetica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IF ::= If ParentesisIzq ExpBool ParentesisDer LlaveIzq CUERPO ELSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ELSE ::= LlaveDer 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ELSE ::= Else LlaveIzq CUERPO LlaveDer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FOR ::= For ParentesisIzq TipoDato IDENTIFICADOR Igual LITERAL Coma ExpBool IncrementoCiclo ParentesisDer LlaveIzq CuerpoCiclo LlaveDer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IncrementoCiclo ::= OpAritmeticoUnario IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IncrementoCiclo",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IncrementoCiclo ::= IDENTIFICADOR OpAritmeticoUnario 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IncrementoCiclo",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // WHILE ::= While ParentesisIzq ExpBool ParentesisDer LlaveIzq CuerpoCiclo LlaveDer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DoWhile ::= Do LlaveIzq CuerpoCiclo LlaveDer While ParentesisIzq ExpBool ParentesisDer PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DoWhile",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SWITCH ::= Switch ParentesisIzq IDENTIFICADOR ParentesisDer LlaveIzq CASE LlaveDer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CASE ::= Case LITERAL DosPuntos CUERPO Break PuntoComa DEFAULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DEFAULT ::= CASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DEFAULT ::= Default DosPuntos CUERPO Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CUERPO ::= IDENTIFICADOR PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CUERPO ::= ExpBool PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CUERPO ::= IF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CUERPO ::= FOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CUERPO ::= WHILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CUERPO ::= DoWhile 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CUERPO ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CUERPO ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CUERPO ::= LlamarFunciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CuerpoCiclo ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CuerpoCiclo",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CuerpoCiclo ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CuerpoCiclo",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CuerpoCiclo ::= CUERPO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CuerpoCiclo",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
