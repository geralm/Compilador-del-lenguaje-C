
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package CompiladorC;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement.*;
import javax.xml.stream.*;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;
import Semantic.*;
import Semantic.AccionesSemanticas.AccionSemantica;
import Semantic.TablaSimbolos.*;
import Semantic.AccionesSemanticas.*;
import Semantic.RegistrosSemanticos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\250\000\002\002\004\000\002\005\004\000\002\005" +
    "\005\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\006\004\000" +
    "\002\006\004\000\002\006\003\000\002\007\003\000\002" +
    "\007\005\000\002\010\003\000\002\010\005\000\002\011" +
    "\003\000\002\011\005\000\002\011\006\000\002\011\005" +
    "\000\002\057\002\000\002\011\007\000\002\011\006\000" +
    "\002\011\005\000\002\047\003\000\002\047\005\000\002" +
    "\052\004\000\002\052\004\000\002\052\003\000\002\053" +
    "\005\000\002\053\004\000\002\053\005\000\002\053\005" +
    "\000\002\053\006\000\002\053\004\000\002\053\005\000" +
    "\002\053\005\000\002\053\006\000\002\054\003\000\002" +
    "\054\005\000\002\023\003\000\002\023\005\000\002\023" +
    "\006\000\002\024\003\000\002\024\005\000\002\012\003" +
    "\000\002\012\005\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\046\003\000\002\046\007\000\002\013" +
    "\003\000\002\060\002\000\002\013\006\000\002\014\003" +
    "\000\002\061\002\000\002\014\006\000\002\015\003\000" +
    "\002\062\002\000\002\015\006\000\002\016\003\000\002" +
    "\063\002\000\002\016\006\000\002\017\003\000\002\017" +
    "\005\000\002\017\005\000\002\020\003\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\021\003\000\002\064\002\000\002\021\006\000\002" +
    "\065\002\000\002\021\006\000\002\022\003\000\002\066" +
    "\002\000\002\022\006\000\002\067\002\000\002\022\006" +
    "\000\002\070\002\000\002\022\006\000\002\025\003\000" +
    "\002\071\002\000\002\025\005\000\002\072\002\000\002" +
    "\025\005\000\002\026\003\000\002\026\006\000\002\026" +
    "\005\000\002\026\006\000\002\026\005\000\002\026\004" +
    "\000\002\026\004\000\002\030\003\000\002\030\005\000" +
    "\002\045\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\005\000\002\073\002\000\002\027" +
    "\005\000\002\003\003\000\002\003\004\000\002\004\003" +
    "\000\002\004\003\000\002\074\002\000\002\004\005\000" +
    "\002\075\002\000\002\004\005\000\002\076\002\000\002" +
    "\004\005\000\002\033\003\000\002\033\004\000\002\077" +
    "\002\000\002\032\007\000\002\100\002\000\002\032\006" +
    "\000\002\101\002\000\002\032\006\000\002\102\002\000" +
    "\002\032\005\000\002\032\003\000\002\035\003\000\002" +
    "\035\004\000\002\034\004\000\002\034\005\000\002\034" +
    "\005\000\002\034\006\000\002\040\003\000\002\040\004" +
    "\000\002\103\002\000\002\040\005\000\002\037\005\000" +
    "\002\037\006\000\002\037\005\000\002\041\003\000\002" +
    "\041\007\000\002\104\002\000\002\105\002\000\002\106" +
    "\002\000\002\051\013\000\002\107\002\000\002\050\005" +
    "\000\002\042\007\000\002\042\011\000\002\042\010\000" +
    "\002\042\011\000\002\036\003\000\002\110\002\000\002" +
    "\036\004\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\043\004\000\002\043\004\000\002\043\004\000" +
    "\002\043\005\000\002\056\006\000\002\055\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\030\003\022\007\023\013\005\014\015\030" +
    "\013\031\026\034\016\037\025\045\024\072\014\076\007" +
    "\001\002\000\032\002\u011e\003\022\007\023\013\005\014" +
    "\015\030\013\031\026\034\016\037\025\045\024\072\014" +
    "\076\007\001\002\000\016\007\ufffe\070\ufffe\071\ufffe\072" +
    "\ufffe\073\ufffe\074\ufffe\001\002\000\026\013\005\014\015" +
    "\030\013\031\026\034\016\037\025\045\024\072\041\074" +
    "\042\076\uff84\001\002\000\072\003\320\006\052\007\311" +
    "\011\307\012\327\013\005\014\330\015\324\016\306\017" +
    "\323\025\316\027\303\030\013\031\026\033\313\034\016" +
    "\037\025\041\321\045\024\047\315\054\044\055\067\071" +
    "\277\072\053\076\uff67\077\314\125\310\126\334\001\002" +
    "\000\032\002\uff82\003\uff82\007\uff82\013\uff82\014\uff82\030" +
    "\uff82\031\uff82\034\uff82\037\uff82\045\uff82\072\uff82\076\uff82" +
    "\001\002\000\016\007\ufff7\070\ufff7\071\ufff7\072\ufff7\073" +
    "\ufff7\074\ufff7\001\002\000\010\007\023\071\247\072\014" +
    "\001\002\000\016\007\ufffd\070\ufffd\071\ufffd\072\ufffd\073" +
    "\ufffd\074\ufffd\001\002\000\006\007\023\072\014\001\002" +
    "\000\020\013\005\014\015\030\013\031\026\034\016\037" +
    "\025\045\024\001\002\000\016\007\ufffb\070\ufffb\071\ufffb" +
    "\072\ufffb\073\ufffb\074\ufffb\001\002\000\032\002\uff93\003" +
    "\uff93\007\uff93\013\uff93\014\uff93\030\uff93\031\uff93\034\uff93" +
    "\037\uff93\045\uff93\072\uff93\076\uff93\001\002\000\032\002" +
    "\uff96\003\uff96\007\uff96\013\uff96\014\uff96\030\uff96\031\uff96" +
    "\034\uff96\037\uff96\045\uff96\072\uff96\076\uff96\001\002\000" +
    "\032\002\uff94\003\uff94\007\uff94\013\uff94\014\uff94\030\uff94" +
    "\031\uff94\034\uff94\037\uff94\045\uff94\072\uff94\076\uff94\001" +
    "\002\000\010\071\uff92\076\uff90\077\uff8e\001\002\000\036" +
    "\013\ufff2\014\ufff2\030\ufff2\031\ufff2\034\ufff2\037\ufff2\045" +
    "\ufff2\056\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2" +
    "\076\ufff2\001\002\000\016\007\ufffa\070\ufffa\071\ufffa\072" +
    "\ufffa\073\ufffa\074\ufffa\001\002\000\020\013\005\014\015" +
    "\030\013\031\026\034\016\037\025\045\024\001\002\000" +
    "\016\007\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc" +
    "\001\002\000\016\007\ufff8\070\ufff8\071\ufff8\072\ufff8\073" +
    "\ufff8\074\ufff8\001\002\000\004\077\035\001\002\000\004" +
    "\076\034\001\002\000\004\071\033\001\002\000\032\002" +
    "\uff91\003\uff91\007\uff91\013\uff91\014\uff91\030\uff91\031\uff91" +
    "\034\uff91\037\uff91\045\uff91\072\uff91\076\uff91\001\002\000" +
    "\032\002\uff8f\003\uff8f\007\uff8f\013\uff8f\014\uff8f\030\uff8f" +
    "\031\uff8f\034\uff8f\037\uff8f\045\uff8f\072\uff8f\076\uff8f\001" +
    "\002\000\032\002\uff8d\003\uff8d\007\uff8d\013\uff8d\014\uff8d" +
    "\030\uff8d\031\uff8d\034\uff8d\037\uff8d\045\uff8d\072\uff8d\076" +
    "\uff8d\001\002\000\016\007\ufff9\070\ufff9\071\ufff9\072\ufff9" +
    "\073\ufff9\074\ufff9\001\002\000\010\072\041\073\040\074" +
    "\042\001\002\000\036\013\ufff1\014\ufff1\030\ufff1\031\ufff1" +
    "\034\ufff1\037\ufff1\045\ufff1\056\ufff1\070\ufff1\071\ufff1\072" +
    "\ufff1\073\ufff1\074\ufff1\076\ufff1\001\002\000\024\007\211" +
    "\013\005\014\015\030\013\031\026\034\016\037\025\045" +
    "\024\073\205\001\002\000\022\003\061\006\052\007\062" +
    "\014\055\054\044\055\067\072\053\075\047\001\002\000" +
    "\056\050\uffb7\051\uffb7\052\116\053\114\057\uffb7\060\uffb7" +
    "\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\070" +
    "\uffb7\071\uffb7\073\uffb7\075\uffb7\077\uffb7\100\uffb7\106\uffb7" +
    "\107\uffb7\111\115\112\uffb7\001\002\000\020\003\uffa8\006" +
    "\uffa8\007\uffa8\014\uffa8\054\uffa8\055\uffa8\072\uffa8\001\002" +
    "\000\050\050\111\051\110\057\uffbc\060\uffbc\061\uffbc\062" +
    "\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\070\uffbc\071\uffbc" +
    "\073\uffbc\075\uffbc\077\uffbc\100\uffbc\106\uffbc\107\uffbc\112" +
    "\uffbc\001\002\000\022\065\174\070\uffcd\071\uffcd\073\uffcd" +
    "\075\uffcd\077\uffcd\100\uffcd\106\173\001\002\000\036\013" +
    "\uffef\014\uffef\030\uffef\031\uffef\034\uffef\037\uffef\045\uffef" +
    "\056\uffef\070\uffef\071\uffef\072\uffef\073\uffef\074\uffef\076" +
    "\uffef\001\002\000\056\050\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065" +
    "\uffb2\066\uffb2\070\uffb2\071\uffb2\073\uffb2\075\uffb2\077\uffb2" +
    "\100\uffb2\106\uffb2\107\uffb2\111\uffb2\112\uffb2\001\002\000" +
    "\004\075\172\001\002\000\104\050\uff9a\051\uff9a\052\uff9a" +
    "\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061" +
    "\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\070\uff9a" +
    "\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a\077\uff9a\100" +
    "\uff9a\101\uff9a\102\uff9a\103\uff9a\104\uff9a\105\uff9a\106\uff9a" +
    "\107\uff9a\111\uff9a\112\uff9a\116\uff9a\001\002\000\020\003" +
    "\061\006\052\007\062\014\055\054\044\055\067\072\053" +
    "\001\002\000\034\057\100\064\101\065\uffc2\066\uffc2\070" +
    "\uffc2\071\uffc2\073\uffc2\075\uffc2\077\uffc2\100\uffc2\106\uffc2" +
    "\107\uffc2\112\uffc2\001\002\000\104\050\uff9b\051\uff9b\052" +
    "\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b" +
    "\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\070" +
    "\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\077\uff9b" +
    "\100\uff9b\101\uff9b\102\uff9b\103\uff9b\104\uff9b\105\uff9b\106" +
    "\uff9b\107\uff9b\111\uff9b\112\uff9b\116\uff9b\001\002\000\104" +
    "\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056" +
    "\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6" +
    "\065\uffa6\066\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074" +
    "\uffa6\075\uffa6\077\uffa6\100\uffa6\101\uffa6\102\uffa6\103\uffa6" +
    "\104\uffa6\105\uffa6\106\uffa6\107\uffa6\111\uffa6\112\uffa6\116" +
    "\uffa6\001\002\000\024\065\uffcb\066\165\070\uffcb\071\uffcb" +
    "\073\uffcb\075\uffcb\077\uffcb\100\uffcb\106\uffcb\001\002\000" +
    "\044\057\uffbf\060\105\061\104\062\106\063\103\064\uffbf" +
    "\065\uffbf\066\uffbf\070\uffbf\071\uffbf\073\uffbf\075\uffbf\077" +
    "\uffbf\100\uffbf\106\uffbf\107\uffbf\112\uffbf\001\002\000\004" +
    "\072\uff98\001\002\000\104\050\uff9c\051\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c" +
    "\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\070\uff9c\071" +
    "\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\077\uff9c\100\uff9c" +
    "\101\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c\106\uff9c\107" +
    "\uff9c\111\uff9c\112\uff9c\116\uff9c\001\002\000\030\065\uffc5" +
    "\066\uffc5\070\uffc5\071\uffc5\073\uffc5\075\uffc5\077\uffc5\100" +
    "\uffc5\106\uffc5\107\075\112\uffc5\001\002\000\006\075\uff9d" +
    "\100\uff9d\001\002\000\104\050\uffab\051\uffab\052\uffab\053" +
    "\uffab\054\135\055\133\056\uffab\057\uffab\060\uffab\061\uffab" +
    "\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab\070\uffab\071" +
    "\uffab\072\134\073\uffab\074\137\075\uffab\077\uffab\100\uffab" +
    "\101\136\102\uffab\103\uffab\104\uffab\105\uffab\106\uffab\107" +
    "\uffab\111\uffab\112\uffab\116\uffab\001\002\000\026\065\uffc8" +
    "\066\uffc8\070\uffc8\071\uffc8\073\uffc8\075\uffc8\077\uffc8\100" +
    "\uffc8\106\uffc8\112\072\001\002\000\020\003\uffaa\006\uffaa" +
    "\007\uffaa\014\uffaa\054\uffaa\055\uffaa\072\uffaa\001\002\000" +
    "\020\003\061\006\052\007\062\014\055\054\044\055\067" +
    "\072\053\001\002\000\072\050\uffa9\051\uffa9\052\uffa9\053" +
    "\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9" +
    "\064\uffa9\065\uffa9\066\uffa9\070\uffa9\071\uffa9\073\uffa9\075" +
    "\uffa9\077\uffa9\100\uffa9\102\uffa9\103\uffa9\104\uffa9\105\uffa9" +
    "\106\uffa9\107\uffa9\111\uffa9\112\uffa9\116\uffa9\001\002\000" +
    "\020\003\uffc4\006\uffc4\007\uffc4\014\uffc4\054\uffc4\055\uffc4" +
    "\072\uffc4\001\002\000\020\003\061\006\052\007\062\014" +
    "\055\054\044\055\067\072\053\001\002\000\030\065\uffc3" +
    "\066\uffc3\070\uffc3\071\uffc3\073\uffc3\075\uffc3\077\uffc3\100" +
    "\uffc3\106\uffc3\107\075\112\uffc3\001\002\000\020\003\uffc1" +
    "\006\uffc1\007\uffc1\014\uffc1\054\uffc1\055\uffc1\072\uffc1\001" +
    "\002\000\020\003\061\006\052\007\062\014\055\054\044" +
    "\055\067\072\053\001\002\000\034\057\100\064\101\065" +
    "\uffc0\066\uffc0\070\uffc0\071\uffc0\073\uffc0\075\uffc0\077\uffc0" +
    "\100\uffc0\106\uffc0\107\uffc0\112\uffc0\001\002\000\020\003" +
    "\061\006\052\007\062\014\055\054\044\055\067\072\053" +
    "\001\002\000\020\003\061\006\052\007\062\014\055\054" +
    "\044\055\067\072\053\001\002\000\044\057\uffbd\060\105" +
    "\061\104\062\106\063\103\064\uffbd\065\uffbd\066\uffbd\070" +
    "\uffbd\071\uffbd\073\uffbd\075\uffbd\077\uffbd\100\uffbd\106\uffbd" +
    "\107\uffbd\112\uffbd\001\002\000\020\003\061\006\052\007" +
    "\062\014\055\054\044\055\067\072\053\001\002\000\020" +
    "\003\061\006\052\007\062\014\055\054\044\055\067\072" +
    "\053\001\002\000\020\003\061\006\052\007\062\014\055" +
    "\054\044\055\067\072\053\001\002\000\020\003\061\006" +
    "\052\007\062\014\055\054\044\055\067\072\053\001\002" +
    "\000\050\050\111\051\110\057\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\070\uffb9\071\uffb9" +
    "\073\uffb9\075\uffb9\077\uffb9\100\uffb9\106\uffb9\107\uffb9\112" +
    "\uffb9\001\002\000\020\003\uffb4\006\uffb4\007\uffb4\014\uffb4" +
    "\054\uffb4\055\uffb4\072\uffb4\001\002\000\020\003\uffb6\006" +
    "\uffb6\007\uffb6\014\uffb6\054\uffb6\055\uffb6\072\uffb6\001\002" +
    "\000\020\003\061\006\052\007\062\014\055\054\044\055" +
    "\067\072\053\001\002\000\056\050\uffb5\051\uffb5\052\116" +
    "\053\114\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064" +
    "\uffb5\065\uffb5\066\uffb5\070\uffb5\071\uffb5\073\uffb5\075\uffb5" +
    "\077\uffb5\100\uffb5\106\uffb5\107\uffb5\111\115\112\uffb5\001" +
    "\002\000\020\003\uffaf\006\uffaf\007\uffaf\014\uffaf\054\uffaf" +
    "\055\uffaf\072\uffaf\001\002\000\020\003\uffad\006\uffad\007" +
    "\uffad\014\uffad\054\uffad\055\uffad\072\uffad\001\002\000\020" +
    "\003\uffb1\006\uffb1\007\uffb1\014\uffb1\054\uffb1\055\uffb1\072" +
    "\uffb1\001\002\000\020\003\061\006\052\007\062\014\055" +
    "\054\044\055\067\072\053\001\002\000\056\050\uffb0\051" +
    "\uffb0\052\uffb0\053\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0" +
    "\063\uffb0\064\uffb0\065\uffb0\066\uffb0\070\uffb0\071\uffb0\073" +
    "\uffb0\075\uffb0\077\uffb0\100\uffb0\106\uffb0\107\uffb0\111\uffb0" +
    "\112\uffb0\001\002\000\020\003\061\006\052\007\062\014" +
    "\055\054\044\055\067\072\053\001\002\000\056\050\uffac" +
    "\051\uffac\052\uffac\053\uffac\057\uffac\060\uffac\061\uffac\062" +
    "\uffac\063\uffac\064\uffac\065\uffac\066\uffac\070\uffac\071\uffac" +
    "\073\uffac\075\uffac\077\uffac\100\uffac\106\uffac\107\uffac\111" +
    "\uffac\112\uffac\001\002\000\020\003\061\006\052\007\062" +
    "\014\055\054\044\055\067\072\053\001\002\000\056\050" +
    "\uffae\051\uffae\052\uffae\053\uffae\057\uffae\060\uffae\061\uffae" +
    "\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae\070\uffae\071" +
    "\uffae\073\uffae\075\uffae\077\uffae\100\uffae\106\uffae\107\uffae" +
    "\111\uffae\112\uffae\001\002\000\020\003\061\006\052\007" +
    "\062\014\055\054\044\055\067\072\053\001\002\000\056" +
    "\050\uffb3\051\uffb3\052\116\053\114\057\uffb3\060\uffb3\061" +
    "\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\070\uffb3" +
    "\071\uffb3\073\uffb3\075\uffb3\077\uffb3\100\uffb3\106\uffb3\107" +
    "\uffb3\111\115\112\uffb3\001\002\000\050\050\111\051\110" +
    "\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065" +
    "\uffb8\066\uffb8\070\uffb8\071\uffb8\073\uffb8\075\uffb8\077\uffb8" +
    "\100\uffb8\106\uffb8\107\uffb8\112\uffb8\001\002\000\050\050" +
    "\111\051\110\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba" +
    "\064\uffba\065\uffba\066\uffba\070\uffba\071\uffba\073\uffba\075" +
    "\uffba\077\uffba\100\uffba\106\uffba\107\uffba\112\uffba\001\002" +
    "\000\050\050\111\051\110\057\uffbb\060\uffbb\061\uffbb\062" +
    "\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\070\uffbb\071\uffbb" +
    "\073\uffbb\075\uffbb\077\uffbb\100\uffbb\106\uffbb\107\uffbb\112" +
    "\uffbb\001\002\000\044\057\uffbe\060\105\061\104\062\106" +
    "\063\103\064\uffbe\065\uffbe\066\uffbe\070\uffbe\071\uffbe\073" +
    "\uffbe\075\uffbe\077\uffbe\100\uffbe\106\uffbe\107\uffbe\112\uffbe" +
    "\001\002\000\104\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054" +
    "\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1" +
    "\063\uffa1\064\uffa1\065\uffa1\066\uffa1\070\uffa1\071\uffa1\072" +
    "\uffa1\073\uffa1\074\uffa1\075\uffa1\077\uffa1\100\uffa1\101\uffa1" +
    "\102\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\111" +
    "\uffa1\112\uffa1\116\uffa1\001\002\000\022\003\061\006\052" +
    "\007\062\014\055\054\044\055\067\072\053\073\160\001" +
    "\002\000\104\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0" +
    "\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063" +
    "\uffa0\064\uffa0\065\uffa0\066\uffa0\070\uffa0\071\uffa0\072\uffa0" +
    "\073\uffa0\074\uffa0\075\uffa0\077\uffa0\100\uffa0\101\uffa0\102" +
    "\uffa0\103\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0\111\uffa0" +
    "\112\uffa0\116\uffa0\001\002\000\004\007\157\001\002\000" +
    "\020\003\061\006\052\007\062\014\055\054\044\055\067" +
    "\072\053\001\002\000\014\070\uff9f\071\uff9f\073\uff9f\075" +
    "\uff9f\100\uff9f\001\002\000\072\050\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\056\155\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063" +
    "\uffb2\064\uffb2\065\uffb2\066\uffb2\070\uffb2\071\uffb2\073\uffb2" +
    "\075\uffb2\077\uffb2\100\uffb2\102\154\103\152\104\151\105" +
    "\153\106\uffb2\107\uffb2\111\uffb2\112\uffb2\116\150\001\002" +
    "\000\006\070\144\075\145\001\002\000\016\070\uffd5\071" +
    "\uffd5\073\uffd5\075\uffd5\077\uffd5\100\uffd5\001\002\000\020" +
    "\003\061\006\052\007\062\014\055\054\044\055\067\072" +
    "\053\001\002\000\104\050\uffa5\051\uffa5\052\uffa5\053\uffa5" +
    "\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062" +
    "\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\070\uffa5\071\uffa5" +
    "\072\uffa5\073\uffa5\074\uffa5\075\uffa5\077\uffa5\100\uffa5\101" +
    "\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5" +
    "\111\uffa5\112\uffa5\116\uffa5\001\002\000\014\070\uff9e\071" +
    "\uff9e\073\uff9e\075\uff9e\100\uff9e\001\002\000\020\003\061" +
    "\006\052\007\062\014\055\054\044\055\067\072\053\001" +
    "\002\000\020\003\uffd0\006\uffd0\007\uffd0\014\uffd0\054\uffd0" +
    "\055\uffd0\072\uffd0\001\002\000\020\003\uffd2\006\uffd2\007" +
    "\uffd2\014\uffd2\054\uffd2\055\uffd2\072\uffd2\001\002\000\020" +
    "\003\uffce\006\uffce\007\uffce\014\uffce\054\uffce\055\uffce\072" +
    "\uffce\001\002\000\020\003\uffd1\006\uffd1\007\uffd1\014\uffd1" +
    "\054\uffd1\055\uffd1\072\uffd1\001\002\000\020\003\uffcf\006" +
    "\uffcf\007\uffcf\014\uffcf\054\uffcf\055\uffcf\072\uffcf\001\002" +
    "\000\020\003\uffd3\006\uffd3\007\uffd3\014\uffd3\054\uffd3\055" +
    "\uffd3\072\uffd3\001\002\000\016\070\uffd4\071\uffd4\073\uffd4" +
    "\075\uffd4\077\uffd4\100\uffd4\001\002\000\104\050\uffa2\051" +
    "\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2" +
    "\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066" +
    "\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2" +
    "\077\uffa2\100\uffa2\101\uffa2\102\uffa2\103\uffa2\104\uffa2\105" +
    "\uffa2\106\uffa2\107\uffa2\111\uffa2\112\uffa2\116\uffa2\001\002" +
    "\000\104\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055" +
    "\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4" +
    "\064\uffa4\065\uffa4\066\uffa4\070\uffa4\071\uffa4\072\uffa4\073" +
    "\uffa4\074\uffa4\075\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4" +
    "\103\uffa4\104\uffa4\105\uffa4\106\uffa4\107\uffa4\111\uffa4\112" +
    "\uffa4\116\uffa4\001\002\000\006\070\144\073\162\001\002" +
    "\000\104\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055" +
    "\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3" +
    "\064\uffa3\065\uffa3\066\uffa3\070\uffa3\071\uffa3\072\uffa3\073" +
    "\uffa3\074\uffa3\075\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3" +
    "\103\uffa3\104\uffa3\105\uffa3\106\uffa3\107\uffa3\111\uffa3\112" +
    "\uffa3\116\uffa3\001\002\000\004\072\164\001\002\000\104" +
    "\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056" +
    "\uff97\057\uff97\060\uff97\061\uff97\062\uff97\063\uff97\064\uff97" +
    "\065\uff97\066\uff97\070\uff97\071\uff97\072\uff97\073\uff97\074" +
    "\uff97\075\uff97\077\uff97\100\uff97\101\uff97\102\uff97\103\uff97" +
    "\104\uff97\105\uff97\106\uff97\107\uff97\111\uff97\112\uff97\116" +
    "\uff97\001\002\000\020\003\uffc7\006\uffc7\007\uffc7\014\uffc7" +
    "\054\uffc7\055\uffc7\072\uffc7\001\002\000\020\003\061\006" +
    "\052\007\062\014\055\054\044\055\067\072\053\001\002" +
    "\000\026\065\uffc6\066\uffc6\070\uffc6\071\uffc6\073\uffc6\075" +
    "\uffc6\077\uffc6\100\uffc6\106\uffc6\112\072\001\002\000\006" +
    "\070\144\073\171\001\002\000\104\050\uff99\051\uff99\052" +
    "\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99" +
    "\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99\070" +
    "\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075\uff99\077\uff99" +
    "\100\uff99\101\uff99\102\uff99\103\uff99\104\uff99\105\uff99\106" +
    "\uff99\107\uff99\111\uff99\112\uff99\116\uff99\001\002\000\036" +
    "\013\ufff0\014\ufff0\030\ufff0\031\ufff0\034\ufff0\037\ufff0\045" +
    "\ufff0\056\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0" +
    "\076\ufff0\001\002\000\020\003\061\006\052\007\062\014" +
    "\055\054\044\055\067\072\053\001\002\000\020\003\uffca" +
    "\006\uffca\007\uffca\014\uffca\054\uffca\055\uffca\072\uffca\001" +
    "\002\000\020\003\061\006\052\007\062\014\055\054\044" +
    "\055\067\072\053\001\002\000\024\065\uffc9\066\165\070" +
    "\uffc9\071\uffc9\073\uffc9\075\uffc9\077\uffc9\100\uffc9\106\uffc9" +
    "\001\002\000\006\070\144\100\200\001\002\000\020\003" +
    "\061\006\052\007\062\014\055\054\044\055\067\072\053" +
    "\001\002\000\016\070\uffcc\071\uffcc\073\uffcc\075\uffcc\077" +
    "\uffcc\100\uffcc\001\002\000\020\003\061\006\052\007\062" +
    "\014\055\054\044\055\067\072\053\001\002\000\072\050" +
    "\uffa7\051\uffa7\052\uffa7\053\uffa7\056\uffa7\057\uffa7\060\uffa7" +
    "\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\070" +
    "\uffa7\071\uffa7\073\uffa7\075\uffa7\077\uffa7\100\uffa7\102\uffa7" +
    "\103\uffa7\104\uffa7\105\uffa7\106\uffa7\107\uffa7\111\uffa7\112" +
    "\uffa7\116\uffa7\001\002\000\006\070\231\073\uffee\001\002" +
    "\000\036\013\uffeb\014\uffeb\030\uffeb\031\uffeb\034\uffeb\037" +
    "\uffeb\045\uffeb\056\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb" +
    "\074\uffeb\076\uffeb\001\002\000\006\070\uffea\073\uffea\001" +
    "\002\000\006\070\240\073\241\001\002\000\014\007\023" +
    "\070\uffe6\072\212\073\uffe6\074\215\001\002\000\006\070" +
    "\uffdc\073\uffdc\001\002\000\030\007\023\013\005\014\015" +
    "\030\013\031\026\034\016\037\025\045\024\072\212\073" +
    "\234\074\215\001\002\000\012\070\uffe8\072\041\073\uffe8" +
    "\074\042\001\002\000\012\070\uffe7\072\221\073\uffe7\074" +
    "\222\001\002\000\022\003\061\006\052\007\062\014\055" +
    "\054\044\055\067\072\053\075\216\001\002\000\012\070" +
    "\uffe4\072\uffe4\073\uffe4\074\uffe4\001\002\000\004\075\220" +
    "\001\002\000\012\070\uffe3\072\uffe3\073\uffe3\074\uffe3\001" +
    "\002\000\022\013\005\014\015\030\013\031\026\034\016" +
    "\037\025\045\024\073\227\001\002\000\022\003\061\006" +
    "\052\007\062\014\055\054\044\055\067\072\053\075\223" +
    "\001\002\000\012\070\uffe2\072\uffe2\073\uffe2\074\uffe2\001" +
    "\002\000\004\075\225\001\002\000\012\070\uffe1\072\uffe1" +
    "\073\uffe1\074\uffe1\001\002\000\006\070\231\073\230\001" +
    "\002\000\012\070\uffde\072\uffde\073\uffde\074\uffde\001\002" +
    "\000\012\070\uffdd\072\uffdd\073\uffdd\074\uffdd\001\002\000" +
    "\020\013\005\014\015\030\013\031\026\034\016\037\025" +
    "\045\024\001\002\000\006\070\uffe9\073\uffe9\001\002\000" +
    "\006\070\231\073\237\001\002\000\012\070\uffe0\072\uffe0" +
    "\073\uffe0\074\uffe0\001\002\000\010\072\221\073\236\074" +
    "\222\001\002\000\012\070\uffe5\072\uffe5\073\uffe5\074\uffe5" +
    "\001\002\000\012\070\uffdf\072\uffdf\073\uffdf\074\uffdf\001" +
    "\002\000\004\007\242\001\002\000\036\013\uffec\014\uffec" +
    "\030\uffec\031\uffec\034\uffec\037\uffec\045\uffec\056\uffec\070" +
    "\uffec\071\uffec\072\uffec\073\uffec\074\uffec\076\uffec\001\002" +
    "\000\006\070\uffdb\073\uffdb\001\002\000\004\073\244\001" +
    "\002\000\036\013\uffed\014\uffed\030\uffed\031\uffed\034\uffed" +
    "\037\uffed\045\uffed\056\uffed\070\uffed\071\uffed\072\uffed\073" +
    "\uffed\074\uffed\076\uffed\001\002\000\006\070\ufff6\071\ufff6" +
    "\001\002\000\034\013\005\014\015\030\013\031\026\034" +
    "\016\037\025\045\024\056\255\070\ufff4\071\ufff4\072\041" +
    "\074\042\076\uff88\001\002\000\074\002\000\003\000\006" +
    "\000\007\000\011\000\012\000\013\000\014\000\015\000" +
    "\016\000\017\000\025\000\027\000\030\000\031\000\033" +
    "\000\034\000\037\000\041\000\045\000\047\000\054\000" +
    "\055\000\071\000\072\000\076\000\077\000\125\000\126" +
    "\000\001\002\000\006\070\251\071\252\001\002\000\006" +
    "\007\023\072\014\001\002\000\074\002\uffff\003\uffff\006" +
    "\uffff\007\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff" +
    "\016\uffff\017\uffff\025\uffff\027\uffff\030\uffff\031\uffff\033" +
    "\uffff\034\uffff\037\uffff\041\uffff\045\uffff\047\uffff\054\uffff" +
    "\055\uffff\071\uffff\072\uffff\076\uffff\077\uffff\125\uffff\126" +
    "\uffff\001\002\000\006\070\ufff5\071\ufff5\001\002\000\014" +
    "\056\255\070\ufff4\071\ufff4\072\041\074\042\001\002\000" +
    "\022\003\061\006\052\007\062\014\055\054\044\055\067" +
    "\072\053\076\257\001\002\000\010\070\uffda\071\uffda\077" +
    "\uffda\001\002\000\022\003\061\006\052\007\062\014\055" +
    "\054\044\055\067\072\053\076\257\001\002\000\006\070" +
    "\ufff3\071\ufff3\001\002\000\006\070\uffd7\077\uffd7\001\002" +
    "\000\006\070\263\077\264\001\002\000\024\003\061\006" +
    "\052\007\062\014\055\054\044\055\067\072\053\076\257" +
    "\077\266\001\002\000\010\070\uffd9\071\uffd9\077\uffd9\001" +
    "\002\000\006\070\uffd6\077\uffd6\001\002\000\010\070\uffd8" +
    "\071\uffd8\077\uffd8\001\002\000\022\013\005\014\015\030" +
    "\013\031\026\034\016\037\025\045\024\076\uff8a\001\002" +
    "\000\004\076\007\001\002\000\010\007\023\071\247\072" +
    "\014\001\002\000\072\003\uff8c\006\uff8c\007\uff8c\011\uff8c" +
    "\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\017\uff8c\025" +
    "\uff8c\027\uff8c\030\uff8c\031\uff8c\033\uff8c\034\uff8c\037\uff8c" +
    "\041\uff8c\045\uff8c\047\uff8c\054\uff8c\055\uff8c\071\uff8c\072" +
    "\uff8c\076\uff8c\077\uff8c\125\uff8c\126\uff8c\001\002\000\032" +
    "\002\uff87\003\uff87\007\uff87\013\uff87\014\uff87\030\uff87\031" +
    "\uff87\034\uff87\037\uff87\045\uff87\072\uff87\076\uff87\001\002" +
    "\000\004\076\007\001\002\000\072\003\uff8b\006\uff8b\007" +
    "\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b" +
    "\017\uff8b\025\uff8b\027\uff8b\030\uff8b\031\uff8b\033\uff8b\034" +
    "\uff8b\037\uff8b\041\uff8b\045\uff8b\047\uff8b\054\uff8b\055\uff8b" +
    "\071\uff8b\072\uff8b\076\uff8b\077\uff8b\125\uff8b\126\uff8b\001" +
    "\002\000\032\002\uff89\003\uff89\007\uff89\013\uff89\014\uff89" +
    "\030\uff89\031\uff89\034\uff89\037\uff89\045\uff89\072\uff89\076" +
    "\uff89\001\002\000\062\003\uff7b\006\uff7b\007\uff7b\011\uff7b" +
    "\012\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\021\uff7b\025" +
    "\uff7b\027\uff7b\033\uff7b\041\uff7b\047\uff7b\054\uff7b\055\uff7b" +
    "\071\uff7b\072\uff7b\073\uff7b\076\uff7b\077\uff7b\125\uff7b\126" +
    "\uff7b\001\002\000\060\003\uff63\006\uff63\007\uff63\011\uff63" +
    "\012\uff63\014\uff63\015\uff63\016\uff63\017\uff63\021\uff63\025" +
    "\uff63\027\uff63\033\uff63\041\uff63\047\uff63\054\uff63\055\uff63" +
    "\071\uff63\072\uff63\076\uff63\077\uff63\125\uff63\126\uff63\001" +
    "\002\000\004\076\007\001\002\000\056\003\320\006\052" +
    "\007\311\011\307\012\327\014\055\015\324\016\306\017" +
    "\323\025\316\027\303\033\313\041\321\047\315\054\044" +
    "\055\067\071\277\072\053\076\uff67\077\u0117\125\310\126" +
    "\334\001\002\000\004\072\uff72\001\002\000\060\003\uff68" +
    "\006\uff68\007\uff68\011\uff68\012\uff68\014\uff68\015\uff68\016" +
    "\uff68\017\uff68\021\uff68\025\uff68\027\uff68\033\uff68\041\uff68" +
    "\047\uff68\054\uff68\055\uff68\071\uff68\072\uff68\076\uff68\077" +
    "\uff68\125\uff68\126\uff68\001\002\000\072\003\320\006\052" +
    "\007\311\011\307\012\327\013\005\014\330\015\324\016" +
    "\306\017\323\025\316\027\303\030\013\031\026\033\313" +
    "\034\016\037\025\041\321\045\024\047\315\054\044\055" +
    "\067\071\277\072\053\076\uff67\077\u0109\125\310\126\334" +
    "\001\002\000\004\100\u0106\001\002\000\004\071\u0105\001" +
    "\002\000\004\072\u0102\001\002\000\076\050\uff9c\051\uff9c" +
    "\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060" +
    "\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c" +
    "\070\uff9c\071\uff9c\072\uff9c\074\uff9c\100\u0100\101\uff9c\102" +
    "\uff9c\103\uff9c\104\uff9c\105\uff9c\106\uff9c\107\uff9c\111\uff9c" +
    "\112\uff9c\116\uff9c\001\002\000\060\003\uff60\006\uff60\007" +
    "\uff60\011\uff60\012\uff60\014\uff60\015\uff60\016\uff60\017\uff60" +
    "\021\uff60\025\uff60\027\uff60\033\uff60\041\uff60\047\uff60\054" +
    "\uff60\055\uff60\071\uff60\072\uff60\076\uff60\077\uff60\125\uff60" +
    "\126\uff60\001\002\000\022\003\061\006\052\007\062\014" +
    "\055\054\044\055\067\071\376\072\053\001\002\000\076" +
    "\002\uff7f\003\uff7f\006\uff7f\007\uff7f\011\uff7f\012\uff7f\013" +
    "\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f\021\uff7f\025\uff7f" +
    "\027\uff7f\030\uff7f\031\uff7f\033\uff7f\034\uff7f\037\uff7f\041" +
    "\uff7f\045\uff7f\047\uff7f\054\uff7f\055\uff7f\071\uff7f\072\uff7f" +
    "\076\uff7f\077\uff7f\125\uff7f\126\uff7f\001\002\000\004\072" +
    "\371\001\002\000\004\072\361\001\002\000\060\003\uff74" +
    "\006\uff74\007\uff74\011\uff74\012\uff74\014\uff74\015\uff74\016" +
    "\uff74\017\uff74\021\uff74\025\uff74\027\uff74\033\uff74\041\uff74" +
    "\047\uff74\054\uff74\055\uff74\071\uff74\072\uff74\076\uff74\077" +
    "\uff74\125\uff74\126\uff74\001\002\000\006\071\uff79\072\uff98" +
    "\001\002\000\004\072\353\001\002\000\060\003\uff62\006" +
    "\uff62\007\uff62\011\uff62\012\uff62\014\uff62\015\uff62\016\uff62" +
    "\017\uff62\021\uff62\025\uff62\027\uff62\033\uff62\041\uff62\047" +
    "\uff62\054\uff62\055\uff62\071\uff62\072\uff62\076\uff62\077\uff62" +
    "\125\uff62\126\uff62\001\002\000\054\003\320\006\052\007" +
    "\311\011\307\012\327\014\055\015\324\016\306\017\323" +
    "\025\316\027\303\033\313\041\321\047\315\054\044\055" +
    "\067\071\277\072\053\076\uff67\125\310\126\334\001\002" +
    "\000\004\071\344\001\002\000\006\070\144\071\343\001" +
    "\002\000\060\003\uff65\006\uff65\007\uff65\011\uff65\012\uff65" +
    "\014\uff65\015\uff65\016\uff65\017\uff65\021\uff65\025\uff65\027" +
    "\uff65\033\uff65\041\uff65\047\uff65\054\uff65\055\uff65\071\uff65" +
    "\072\uff65\076\uff65\077\uff65\125\uff65\126\uff65\001\002\000" +
    "\020\003\061\006\052\007\062\014\055\054\044\055\067" +
    "\072\053\001\002\000\112\013\005\014\015\030\013\031" +
    "\026\034\016\037\025\045\024\050\uff9b\051\uff9b\052\uff9b" +
    "\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061" +
    "\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\070\uff9b" +
    "\071\uff9b\072\uff9b\074\uff9b\101\uff9b\102\uff9b\103\uff9b\104" +
    "\uff9b\105\uff9b\106\uff9b\107\uff9b\111\uff9b\112\uff9b\116\uff9b" +
    "\001\002\000\056\003\uff81\006\uff81\007\uff81\011\uff81\012" +
    "\uff81\014\uff81\015\uff81\016\uff81\017\uff81\025\uff81\027\uff81" +
    "\033\uff81\041\uff81\047\uff81\054\uff81\055\uff81\071\uff81\072" +
    "\uff81\076\uff81\077\uff81\125\uff81\126\uff81\001\002\000\060" +
    "\003\uff64\006\uff64\007\uff64\011\uff64\012\uff64\014\uff64\015" +
    "\uff64\016\uff64\017\uff64\021\uff64\025\uff64\027\uff64\033\uff64" +
    "\041\uff64\047\uff64\054\uff64\055\uff64\071\uff64\072\uff64\076" +
    "\uff64\077\uff64\125\uff64\126\uff64\001\002\000\060\003\uff61" +
    "\006\uff61\007\uff61\011\uff61\012\uff61\014\uff61\015\uff61\016" +
    "\uff61\017\uff61\021\uff61\025\uff61\027\uff61\033\uff61\041\uff61" +
    "\047\uff61\054\uff61\055\uff61\071\uff61\072\uff61\076\uff61\077" +
    "\uff61\125\uff61\126\uff61\001\002\000\004\072\335\001\002" +
    "\000\020\003\061\006\052\007\062\014\055\054\044\055" +
    "\067\072\053\001\002\000\006\070\144\073\337\001\002" +
    "\000\060\003\uff5a\006\uff5a\007\uff5a\011\uff5a\012\uff5a\014" +
    "\uff5a\015\uff5a\016\uff5a\017\uff5a\021\uff5a\025\uff5a\027\uff5a" +
    "\033\uff5a\041\uff5a\047\uff5a\054\uff5a\055\uff5a\071\uff5a\072" +
    "\uff5a\076\uff5a\077\uff5a\125\uff5a\126\uff5a\001\002\000\004" +
    "\100\341\001\002\000\054\003\320\006\052\007\311\011" +
    "\307\012\327\014\055\015\324\016\306\017\323\025\316" +
    "\027\303\033\313\041\321\047\315\054\044\055\067\071" +
    "\277\072\053\076\uff67\125\310\126\334\001\002\000\060" +
    "\003\uff76\006\uff76\007\uff76\011\uff76\012\uff76\014\uff76\015" +
    "\uff76\016\uff76\017\uff76\021\uff76\025\uff76\027\uff76\033\uff76" +
    "\041\uff76\047\uff76\054\uff76\055\uff76\071\uff76\072\uff76\076" +
    "\uff76\077\uff76\125\uff76\126\uff76\001\002\000\062\003\uff7a" +
    "\006\uff7a\007\uff7a\011\uff7a\012\uff7a\014\uff7a\015\uff7a\016" +
    "\uff7a\017\uff7a\021\uff7a\025\uff7a\027\uff7a\033\uff7a\041\uff7a" +
    "\047\uff7a\054\uff7a\055\uff7a\071\uff7a\072\uff7a\073\uff7a\076" +
    "\uff7a\077\uff7a\125\uff7a\126\uff7a\001\002\000\060\003\uff5f" +
    "\006\uff5f\007\uff5f\011\uff5f\012\uff5f\014\uff5f\015\uff5f\016" +
    "\uff5f\017\uff5f\021\uff5f\025\uff5f\027\uff5f\033\uff5f\041\uff5f" +
    "\047\uff5f\054\uff5f\055\uff5f\071\uff5f\072\uff5f\076\uff5f\077" +
    "\uff5f\125\uff5f\126\uff5f\001\002\000\004\047\346\001\002" +
    "\000\004\072\347\001\002\000\020\003\061\006\052\007" +
    "\062\014\055\054\044\055\067\072\053\001\002\000\006" +
    "\070\144\073\351\001\002\000\004\071\352\001\002\000" +
    "\060\003\uff6b\006\uff6b\007\uff6b\011\uff6b\012\uff6b\014\uff6b" +
    "\015\uff6b\016\uff6b\017\uff6b\021\uff6b\025\uff6b\027\uff6b\033" +
    "\uff6b\041\uff6b\047\uff6b\054\uff6b\055\uff6b\071\uff6b\072\uff6b" +
    "\076\uff6b\077\uff6b\125\uff6b\126\uff6b\001\002\000\020\003" +
    "\061\006\052\007\062\014\055\054\044\055\067\072\053" +
    "\001\002\000\006\070\144\073\355\001\002\000\054\003" +
    "\320\006\052\007\311\011\307\012\327\014\055\015\324" +
    "\016\306\017\323\025\316\027\303\033\313\041\321\047" +
    "\315\054\044\055\067\071\277\072\053\076\uff67\125\310" +
    "\126\334\001\002\000\060\003\uff73\006\uff73\007\uff73\011" +
    "\uff73\012\uff73\014\uff73\015\uff73\016\uff73\017\uff73\021\uff73" +
    "\025\uff73\027\uff73\033\uff73\041\uff73\047\uff73\054\uff73\055" +
    "\uff73\071\uff73\072\uff73\076\uff73\077\uff73\125\uff73\126\uff73" +
    "\001\002\000\004\071\360\001\002\000\062\003\uff78\006" +
    "\uff78\007\uff78\011\uff78\012\uff78\014\uff78\015\uff78\016\uff78" +
    "\017\uff78\021\uff78\025\uff78\027\uff78\033\uff78\041\uff78\047" +
    "\uff78\054\uff78\055\uff78\071\uff78\072\uff78\073\uff78\076\uff78" +
    "\077\uff78\125\uff78\126\uff78\001\002\000\022\003\320\006" +
    "\052\007\062\014\055\054\044\055\067\071\277\072\053" +
    "\001\002\000\022\003\320\006\052\007\062\014\055\054" +
    "\044\055\067\071\277\072\053\001\002\000\022\003\061" +
    "\006\052\007\062\014\055\054\044\055\067\072\053\073" +
    "\364\001\002\000\054\003\320\006\052\007\311\011\307" +
    "\012\327\014\055\015\324\016\306\017\323\025\316\027" +
    "\303\033\313\041\321\047\315\054\044\055\067\071\277" +
    "\072\053\076\uff67\125\310\126\334\001\002\000\006\070" +
    "\144\073\366\001\002\000\054\003\320\006\052\007\311" +
    "\011\307\012\327\014\055\015\324\016\306\017\323\025" +
    "\316\027\303\033\313\041\321\047\315\054\044\055\067" +
    "\071\277\072\053\076\uff67\125\310\126\334\001\002\000" +
    "\060\003\uff69\006\uff69\007\uff69\011\uff69\012\uff69\014\uff69" +
    "\015\uff69\016\uff69\017\uff69\021\uff69\025\uff69\027\uff69\033" +
    "\uff69\041\uff69\047\uff69\054\uff69\055\uff69\071\uff69\072\uff69" +
    "\076\uff69\077\uff69\125\uff69\126\uff69\001\002\000\060\003" +
    "\uff6a\006\uff6a\007\uff6a\011\uff6a\012\uff6a\014\uff6a\015\uff6a" +
    "\016\uff6a\017\uff6a\021\uff6a\025\uff6a\027\uff6a\033\uff6a\041" +
    "\uff6a\047\uff6a\054\uff6a\055\uff6a\071\uff6a\072\uff6a\076\uff6a" +
    "\077\uff6a\125\uff6a\126\uff6a\001\002\000\020\003\061\006" +
    "\052\007\062\014\055\054\044\055\067\072\053\001\002" +
    "\000\006\070\144\073\373\001\002\000\054\003\320\006" +
    "\052\007\311\011\307\012\327\014\055\015\324\016\306" +
    "\017\323\025\316\027\303\033\313\041\321\047\315\054" +
    "\044\055\067\071\277\072\053\076\uff67\125\310\126\334" +
    "\001\002\000\060\003\uff6c\006\uff6c\007\uff6c\011\uff6c\012" +
    "\uff6c\014\uff6c\015\uff6c\016\uff6c\017\uff6c\021\uff6c\025\uff6c" +
    "\027\uff6c\033\uff6c\041\uff6c\047\uff6c\054\uff6c\055\uff6c\071" +
    "\uff6c\072\uff6c\076\uff6c\077\uff6c\125\uff6c\126\uff6c\001\002" +
    "\000\006\070\144\071\377\001\002\000\060\003\uff5d\006" +
    "\uff5d\007\uff5d\011\uff5d\012\uff5d\014\uff5d\015\uff5d\016\uff5d" +
    "\017\uff5d\021\uff5d\025\uff5d\027\uff5d\033\uff5d\041\uff5d\047" +
    "\uff5d\054\uff5d\055\uff5d\071\uff5d\072\uff5d\076\uff5d\077\uff5d" +
    "\125\uff5d\126\uff5d\001\002\000\060\003\uff5c\006\uff5c\007" +
    "\uff5c\011\uff5c\012\uff5c\014\uff5c\015\uff5c\016\uff5c\017\uff5c" +
    "\021\uff5c\025\uff5c\027\uff5c\033\uff5c\041\uff5c\047\uff5c\054" +
    "\uff5c\055\uff5c\071\uff5c\072\uff5c\076\uff5c\077\uff5c\125\uff5c" +
    "\126\uff5c\001\002\000\054\003\320\006\052\007\311\011" +
    "\307\012\327\014\055\015\324\016\306\017\323\025\316" +
    "\027\303\033\313\041\321\047\315\054\044\055\067\071" +
    "\277\072\053\076\uff67\125\310\126\334\001\002\000\060" +
    "\003\uff77\006\uff77\007\uff77\011\uff77\012\uff77\014\uff77\015" +
    "\uff77\016\uff77\017\uff77\021\uff77\025\uff77\027\uff77\033\uff77" +
    "\041\uff77\047\uff77\054\uff77\055\uff77\071\uff77\072\uff77\076" +
    "\uff77\077\uff77\125\uff77\126\uff77\001\002\000\022\003\320" +
    "\006\052\007\062\014\055\054\044\055\067\071\277\072" +
    "\053\001\002\000\004\073\u0104\001\002\000\060\003\uff5b" +
    "\006\uff5b\007\uff5b\011\uff5b\012\uff5b\014\uff5b\015\uff5b\016" +
    "\uff5b\017\uff5b\021\uff5b\025\uff5b\027\uff5b\033\uff5b\041\uff5b" +
    "\047\uff5b\054\uff5b\055\uff5b\071\uff5b\072\uff5b\076\uff5b\077" +
    "\uff5b\125\uff5b\126\uff5b\001\002\000\060\003\uff5e\006\uff5e" +
    "\007\uff5e\011\uff5e\012\uff5e\014\uff5e\015\uff5e\016\uff5e\017" +
    "\uff5e\021\uff5e\025\uff5e\027\uff5e\033\uff5e\041\uff5e\047\uff5e" +
    "\054\uff5e\055\uff5e\071\uff5e\072\uff5e\076\uff5e\077\uff5e\125" +
    "\uff5e\126\uff5e\001\002\000\054\003\320\006\052\007\311" +
    "\011\307\012\327\014\055\015\324\016\306\017\323\025" +
    "\316\027\303\033\313\041\321\047\315\054\044\055\067" +
    "\071\277\072\053\076\uff67\125\310\126\334\001\002\000" +
    "\060\003\uff75\006\uff75\007\uff75\011\uff75\012\uff75\014\uff75" +
    "\015\uff75\016\uff75\017\uff75\021\uff75\025\uff75\027\uff75\033" +
    "\uff75\041\uff75\047\uff75\054\uff75\055\uff75\071\uff75\072\uff75" +
    "\076\uff75\077\uff75\125\uff75\126\uff75\001\002\000\056\003" +
    "\320\006\052\007\311\011\307\012\327\014\055\015\324" +
    "\016\306\017\323\025\316\027\303\033\313\041\321\047" +
    "\315\054\044\055\067\071\277\072\053\076\uff67\077\u010a" +
    "\125\310\126\334\001\002\000\076\002\uff7d\003\uff7d\006" +
    "\uff7d\007\uff7d\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d" +
    "\016\uff7d\017\uff7d\021\uff7d\025\uff7d\027\uff7d\030\uff7d\031" +
    "\uff7d\033\uff7d\034\uff7d\037\uff7d\041\uff7d\045\uff7d\047\uff7d" +
    "\054\uff7d\055\uff7d\071\uff7d\072\uff7d\076\uff7d\077\uff7d\125" +
    "\uff7d\126\uff7d\001\002\000\076\002\uff7c\003\uff7c\006\uff7c" +
    "\007\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c\015\uff7c\016" +
    "\uff7c\017\uff7c\021\uff7c\025\uff7c\027\uff7c\030\uff7c\031\uff7c" +
    "\033\uff7c\034\uff7c\037\uff7c\041\uff7c\045\uff7c\047\uff7c\054" +
    "\uff7c\055\uff7c\071\uff7c\072\uff7c\076\uff7c\077\uff7c\125\uff7c" +
    "\126\uff7c\001\002\000\056\003\uff80\006\uff80\007\uff80\011" +
    "\uff80\012\uff80\014\uff80\015\uff80\016\uff80\017\uff80\025\uff80" +
    "\027\uff80\033\uff80\041\uff80\047\uff80\054\uff80\055\uff80\071" +
    "\uff80\072\uff80\076\uff80\077\uff80\125\uff80\126\uff80\001\002" +
    "\000\004\072\u010d\001\002\000\020\003\061\006\052\007" +
    "\062\014\055\054\044\055\067\072\053\001\002\000\006" +
    "\070\144\073\uff71\001\002\000\004\073\u0110\001\002\000" +
    "\054\003\uff70\006\uff70\007\uff70\011\uff70\012\uff70\014\uff70" +
    "\015\uff70\016\uff70\017\uff70\025\uff70\027\uff70\033\uff70\041" +
    "\uff70\047\uff70\054\uff70\055\uff70\071\uff70\072\uff70\076\uff70" +
    "\125\uff70\126\uff70\001\002\000\054\003\320\006\052\007" +
    "\311\011\307\012\327\014\055\015\324\016\306\017\323" +
    "\025\316\027\303\033\313\041\321\047\315\054\044\055" +
    "\067\071\277\072\053\076\uff67\125\310\126\334\001\002" +
    "\000\004\021\u0114\001\002\000\060\003\uff6f\006\uff6f\007" +
    "\uff6f\011\uff6f\012\uff6f\014\uff6f\015\uff6f\016\uff6f\017\uff6f" +
    "\021\uff6f\025\uff6f\027\uff6f\033\uff6f\041\uff6f\047\uff6f\054" +
    "\uff6f\055\uff6f\071\uff6f\072\uff6f\076\uff6f\077\uff6f\125\uff6f" +
    "\126\uff6f\001\002\000\054\003\uff6e\006\uff6e\007\uff6e\011" +
    "\uff6e\012\uff6e\014\uff6e\015\uff6e\016\uff6e\017\uff6e\025\uff6e" +
    "\027\uff6e\033\uff6e\041\uff6e\047\uff6e\054\uff6e\055\uff6e\071" +
    "\uff6e\072\uff6e\076\uff6e\125\uff6e\126\uff6e\001\002\000\054" +
    "\003\320\006\052\007\311\011\307\012\327\014\055\015" +
    "\324\016\306\017\323\025\316\027\303\033\313\041\321" +
    "\047\315\054\044\055\067\071\277\072\053\076\uff67\125" +
    "\310\126\334\001\002\000\060\003\uff6d\006\uff6d\007\uff6d" +
    "\011\uff6d\012\uff6d\014\uff6d\015\uff6d\016\uff6d\017\uff6d\021" +
    "\uff6d\025\uff6d\027\uff6d\033\uff6d\041\uff6d\047\uff6d\054\uff6d" +
    "\055\uff6d\071\uff6d\072\uff6d\076\uff6d\077\uff6d\125\uff6d\126" +
    "\uff6d\001\002\000\076\002\uff7e\003\uff7e\006\uff7e\007\uff7e" +
    "\011\uff7e\012\uff7e\013\uff7e\014\uff7e\015\uff7e\016\uff7e\017" +
    "\uff7e\021\uff7e\025\uff7e\027\uff7e\030\uff7e\031\uff7e\033\uff7e" +
    "\034\uff7e\037\uff7e\041\uff7e\045\uff7e\047\uff7e\054\uff7e\055" +
    "\uff7e\071\uff7e\072\uff7e\076\uff7e\077\uff7e\125\uff7e\126\uff7e" +
    "\001\002\000\060\003\uff66\006\uff66\007\uff66\011\uff66\012" +
    "\uff66\014\uff66\015\uff66\016\uff66\017\uff66\021\uff66\025\uff66" +
    "\027\uff66\033\uff66\041\uff66\047\uff66\054\uff66\055\uff66\071" +
    "\uff66\072\uff66\076\uff66\077\uff66\125\uff66\126\uff66\001\002" +
    "\000\022\013\005\014\015\030\013\031\026\034\016\037" +
    "\025\045\024\076\uff86\001\002\000\004\076\007\001\002" +
    "\000\032\002\uff83\003\uff83\007\uff83\013\uff83\014\uff83\030" +
    "\uff83\031\uff83\034\uff83\037\uff83\045\uff83\072\uff83\076\uff83" +
    "\001\002\000\004\076\007\001\002\000\032\002\uff85\003" +
    "\uff85\007\uff85\013\uff85\014\uff85\030\uff85\031\uff85\034\uff85" +
    "\037\uff85\045\uff85\072\uff85\076\uff85\001\002\000\004\002" +
    "\001\001\002\000\032\002\uff95\003\uff95\007\uff95\013\uff95" +
    "\014\uff95\030\uff95\031\uff95\034\uff95\037\uff95\045\uff95\072" +
    "\uff95\076\uff95\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\022\002\010\003\003\004\017\005\020\006" +
    "\011\011\005\032\016\034\007\001\001\000\020\002\010" +
    "\004\u011e\005\020\006\011\011\005\032\016\034\007\001" +
    "\001\000\002\001\001\000\014\002\010\005\271\006\270" +
    "\033\u0118\102\u0119\001\001\000\074\002\010\005\271\006" +
    "\270\012\137\013\045\014\056\015\065\016\062\017\053" +
    "\020\057\021\044\022\042\025\140\026\064\027\055\030" +
    "\324\033\304\035\301\036\330\037\303\040\325\041\331" +
    "\042\277\043\321\046\142\051\316\055\311\056\332\110" +
    "\300\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\247\010\244\011\245\001\001\000\002\001\001\000" +
    "\004\011\036\001\001\000\006\002\010\006\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\074\031\075\030\076\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\010\006" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\010\006" +
    "\207\047\203\052\205\054\206\001\001\000\034\013\045" +
    "\014\056\015\065\016\062\017\053\020\057\021\044\022" +
    "\042\025\047\026\064\027\055\045\050\046\063\001\001" +
    "\000\002\001\001\000\004\072\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\012\137\013" +
    "\045\014\056\015\065\016\062\017\053\020\057\021\044" +
    "\022\042\025\140\026\064\027\055\030\167\046\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\067\001" +
    "\001\000\010\025\070\026\064\027\055\001\001\000\002" +
    "\001\001\000\004\062\072\001\001\000\022\016\073\017" +
    "\053\020\057\021\044\022\042\025\047\026\064\027\055" +
    "\001\001\000\002\001\001\000\004\063\075\001\001\000" +
    "\020\017\076\020\057\021\044\022\042\025\047\026\064" +
    "\027\055\001\001\000\002\001\001\000\016\020\131\021" +
    "\044\022\042\025\047\026\064\027\055\001\001\000\016" +
    "\020\101\021\044\022\042\025\047\026\064\027\055\001" +
    "\001\000\002\001\001\000\014\021\130\022\042\025\047" +
    "\026\064\027\055\001\001\000\014\021\127\022\042\025" +
    "\047\026\064\027\055\001\001\000\014\021\126\022\042" +
    "\025\047\026\064\027\055\001\001\000\014\021\106\022" +
    "\042\025\047\026\064\027\055\001\001\000\002\001\001" +
    "\000\004\065\124\001\001\000\004\064\111\001\001\000" +
    "\012\022\112\025\047\026\064\027\055\001\001\000\002" +
    "\001\001\000\004\067\122\001\001\000\004\070\120\001" +
    "\001\000\004\066\116\001\001\000\010\025\117\026\064" +
    "\027\055\001\001\000\002\001\001\000\010\025\121\026" +
    "\064\027\055\001\001\000\002\001\001\000\010\025\123" +
    "\026\064\027\055\001\001\000\002\001\001\000\012\022" +
    "\125\025\047\026\064\027\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\012\137\013\045" +
    "\014\056\015\065\016\062\017\053\020\057\021\044\022" +
    "\042\025\140\026\064\027\055\030\160\046\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\012\137\013" +
    "\045\014\056\015\065\016\062\017\053\020\057\021\044" +
    "\022\042\025\140\026\064\027\055\030\141\046\142\001" +
    "\001\000\002\001\001\000\004\031\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\012\145\013\045\014" +
    "\056\015\065\016\062\017\053\020\057\021\044\022\042" +
    "\025\140\026\064\027\055\046\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\012\155\013\045\014\056" +
    "\015\065\016\062\017\053\020\057\021\044\022\042\025" +
    "\140\026\064\027\055\046\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\165" +
    "\001\001\000\024\015\166\016\062\017\053\020\057\021" +
    "\044\022\042\025\047\026\064\027\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\012\137\013\045\014\056\015\065\016\062" +
    "\017\053\020\057\021\044\022\042\025\140\026\064\027" +
    "\055\030\176\046\142\001\001\000\004\060\174\001\001" +
    "\000\026\014\175\015\065\016\062\017\053\020\057\021" +
    "\044\022\042\025\047\026\064\027\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\013\045\014\056\015" +
    "\065\016\062\017\053\020\057\021\044\022\042\025\047" +
    "\026\064\027\055\046\200\001\001\000\002\001\001\000" +
    "\010\025\202\026\064\027\055\001\001\000\002\001\001" +
    "\000\004\057\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\212\053\213\001\001" +
    "\000\002\001\001\000\016\002\010\006\207\011\036\047" +
    "\232\052\205\053\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\013\045\014\056\015\065\016\062\017" +
    "\053\020\057\021\044\022\042\025\047\026\064\027\055" +
    "\045\216\046\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\010\006\207\047\225" +
    "\052\205\001\001\000\034\013\045\014\056\015\065\016" +
    "\062\017\053\020\057\021\044\022\042\025\047\026\064" +
    "\027\055\045\223\046\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\010\006\207\052" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\010\005\271\006\270\033\266\100\267\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\252\011" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\012\255\013\045\014\056\015\065\016" +
    "\062\017\053\020\057\021\044\022\042\023\257\025\140" +
    "\026\064\027\055\046\142\001\001\000\002\001\001\000" +
    "\040\012\255\013\045\014\056\015\065\016\062\017\053" +
    "\020\057\021\044\022\042\023\260\024\261\025\140\026" +
    "\064\027\055\046\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\012\255\013\045\014" +
    "\056\015\065\016\062\017\053\020\057\021\044\022\042" +
    "\023\264\025\140\026\064\027\055\046\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\010\005\274\006\270\077\273\001\001\000\004\034" +
    "\272\001\001\000\010\007\247\010\244\011\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\u0117\001\001\000\062\012" +
    "\137\013\045\014\056\015\065\016\062\017\053\020\057" +
    "\021\044\022\042\025\140\026\064\027\055\030\324\036" +
    "\u010a\037\303\040\325\041\331\042\277\043\321\046\142" +
    "\051\316\055\311\056\332\110\300\001\001\000\004\104" +
    "\u010b\001\001\000\002\001\001\000\072\002\010\005\274" +
    "\006\270\012\137\013\045\014\056\015\065\016\062\017" +
    "\053\020\057\021\044\022\042\025\140\026\064\027\055" +
    "\030\324\035\u0107\036\330\037\303\040\325\041\331\042" +
    "\277\043\321\046\142\051\316\055\311\056\332\110\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\012\137" +
    "\013\045\014\056\015\065\016\062\017\053\020\057\021" +
    "\044\022\042\025\140\026\064\027\055\030\374\046\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\073\162\103\356\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\012\137\013" +
    "\045\014\056\015\065\016\062\017\053\020\057\021\044" +
    "\022\042\025\140\026\064\027\055\030\324\036\344\037" +
    "\303\040\325\041\331\042\277\043\321\046\142\051\316" +
    "\055\311\056\332\110\300\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\013\045\014\056" +
    "\015\065\016\062\017\053\020\057\021\044\022\042\025" +
    "\047\026\064\027\055\045\337\046\063\001\001\000\006" +
    "\002\010\006\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\012\137" +
    "\013\045\014\056\015\065\016\062\017\053\020\057\021" +
    "\044\022\042\025\140\026\064\027\055\030\335\046\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\012\137\013\045\014\056\015\065\016\062" +
    "\017\053\020\057\021\044\022\042\025\140\026\064\027" +
    "\055\030\324\036\341\037\303\040\325\041\331\042\277" +
    "\043\321\046\142\051\316\055\311\056\332\110\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\012\137\013" +
    "\045\014\056\015\065\016\062\017\053\020\057\021\044" +
    "\022\042\025\140\026\064\027\055\030\347\046\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\012\137\013\045\014\056\015\065\016\062\017" +
    "\053\020\057\021\044\022\042\025\140\026\064\027\055" +
    "\030\353\046\142\001\001\000\002\001\001\000\062\012" +
    "\137\013\045\014\056\015\065\016\062\017\053\020\057" +
    "\021\044\022\042\025\140\026\064\027\055\030\324\036" +
    "\355\037\303\040\325\041\331\042\277\043\321\046\142" +
    "\051\316\055\311\056\332\110\300\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\012\137" +
    "\013\045\014\056\015\065\016\062\017\053\020\057\021" +
    "\044\022\042\025\140\026\064\027\055\030\324\040\361" +
    "\046\142\001\001\000\040\012\137\013\045\014\056\015" +
    "\065\016\062\017\053\020\057\021\044\022\042\025\140" +
    "\026\064\027\055\030\324\040\362\046\142\001\001\000" +
    "\036\012\137\013\045\014\056\015\065\016\062\017\053" +
    "\020\057\021\044\022\042\025\140\026\064\027\055\030" +
    "\364\046\142\001\001\000\062\012\137\013\045\014\056" +
    "\015\065\016\062\017\053\020\057\021\044\022\042\025" +
    "\140\026\064\027\055\030\324\036\367\037\303\040\325" +
    "\041\331\042\277\043\321\046\142\051\316\055\311\056" +
    "\332\110\300\001\001\000\002\001\001\000\062\012\137" +
    "\013\045\014\056\015\065\016\062\017\053\020\057\021" +
    "\044\022\042\025\140\026\064\027\055\030\324\036\366" +
    "\037\303\040\325\041\331\042\277\043\321\046\142\051" +
    "\316\055\311\056\332\110\300\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\012\137\013\045\014\056\015" +
    "\065\016\062\017\053\020\057\021\044\022\042\025\140" +
    "\026\064\027\055\030\371\046\142\001\001\000\002\001" +
    "\001\000\062\012\137\013\045\014\056\015\065\016\062" +
    "\017\053\020\057\021\044\022\042\025\140\026\064\027" +
    "\055\030\324\036\373\037\303\040\325\041\331\042\277" +
    "\043\321\046\142\051\316\055\311\056\332\110\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\012\137\013\045\014\056\015" +
    "\065\016\062\017\053\020\057\021\044\022\042\025\140" +
    "\026\064\027\055\030\324\036\u0100\037\303\040\325\041" +
    "\331\042\277\043\321\046\142\051\316\055\311\056\332" +
    "\110\300\001\001\000\002\001\001\000\040\012\137\013" +
    "\045\014\056\015\065\016\062\017\053\020\057\021\044" +
    "\022\042\025\140\026\064\027\055\030\324\040\u0102\046" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\012\137\013\045\014\056\015\065\016" +
    "\062\017\053\020\057\021\044\022\042\025\140\026\064" +
    "\027\055\030\324\036\u0106\037\303\040\325\041\331\042" +
    "\277\043\321\046\142\051\316\055\311\056\332\110\300" +
    "\001\001\000\002\001\001\000\062\012\137\013\045\014" +
    "\056\015\065\016\062\017\053\020\057\021\044\022\042" +
    "\025\140\026\064\027\055\030\324\036\u010a\037\303\040" +
    "\325\041\331\042\277\043\321\046\142\051\316\055\311" +
    "\056\332\110\300\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\012\137" +
    "\013\045\014\056\015\065\016\062\017\053\020\057\021" +
    "\044\022\042\025\140\026\064\027\055\030\u010d\046\142" +
    "\001\001\000\004\105\u010e\001\001\000\002\001\001\000" +
    "\004\106\u0110\001\001\000\062\012\137\013\045\014\056" +
    "\015\065\016\062\017\053\020\057\021\044\022\042\025" +
    "\140\026\064\027\055\030\324\036\u0111\037\303\040\325" +
    "\041\331\042\277\043\321\046\142\051\316\055\311\056" +
    "\332\110\300\001\001\000\004\050\u0112\001\001\000\002" +
    "\001\001\000\004\107\u0114\001\001\000\062\012\137\013" +
    "\045\014\056\015\065\016\062\017\053\020\057\021\044" +
    "\022\042\025\140\026\064\027\055\030\324\036\u0115\037" +
    "\303\040\325\041\331\042\277\043\321\046\142\051\316" +
    "\055\311\056\332\110\300\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\010\005\274" +
    "\006\270\101\u011b\001\001\000\004\034\u011a\001\001\000" +
    "\002\001\001\000\004\034\u011c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ControlParser controlParser;
    public static int errors = 0;
    public String MSG_ERROR = "";

    public void syntax_error(Symbol cur_token){
         String msg = "Syntax error at line " + cur_token.left + ", column " + cur_token.right + ".\n" +
                 "Encountered: " + cur_token.value + "\n" +
                 "Was expecting one of:\n";
         System.out.println(msg);
         controlParser.addError(new ParserError(cur_token, cur_token.left+1, cur_token.right+1,MSG_ERROR));
    }

    public void setControlParser(ControlParser controlParser){
        this.controlParser = controlParser;
    }

    public static void newScope(){
	typenames.push(new HashSet<String>());
    }
    public static void deleteScope(){
	typenames.pop();
    }
    public static boolean lookupType(String name){
	for (HashSet<String> scope: typenames)
	    if (scope.contains(name)) return true;
	return false;
    }
    public static void addType(String name){
	typenames.peek().add(name);
    }
    public static LinkedList<HashSet<String>> typenames = new LinkedList<HashSet<String>>();

    public Parser(LexerCupAnalyzer lex, ComplexSymbolFactory sf) {
	super(lex,sf);
    }

    public static void main(String args[]) {
	try {
	    ComplexSymbolFactory csf = new ComplexSymbolFactory();
	    // create a buffering scanner wrapper
	   String expresion = "int prueba(){if (a == b){int hola = 0;}else{} return 0;};";
       LexerCupAnalyzer lexer = new LexerCupAnalyzer(new StringReader(expresion));
	    // start parsing
	    Parser p = new Parser(lexer,csf);
	    System.out.println("Parser runs: ");
	    newScope();
	    XMLElement e = (XMLElement)p.parse().value;/*
	    // create XML output file
	    XMLOutputFactory outFactory = XMLOutputFactory.newInstance();
	    XMLStreamWriter sw = outFactory.createXMLStreamWriter(new FileOutputStream(args[1]));
	    // dump XML output to the file
	    XMLElement.dump(lexer,sw,e); //,"expr","stmt");
	    // transform the parse tree into an AST and a rendered HTML version
	    Transformer transformer = TransformerFactory.newInstance()
		.newTransformer(new StreamSource(new File("tree.xsl")));
	    Source text = new StreamSource(new File(args[1]));
	    transformer.transform(text, new StreamResult(new File("output.html")));
*/
	    System.out.println("Parsing finished!");
	} catch (Exception e) {
	    e.printStackTrace();
	}
    }

    public void report_error(String message, Object info) {
        if (info instanceof String){
    	errors++;

          System.err.println("  "+ errors + "==> " + info + " "+ message +
    					"\n       Parsing resumed from 2nd token before" ); //+ s.current_lexeme()+"\n");
        }
        else {
        	StringBuffer m = new StringBuffer("Error ");
        	if (info instanceof java_cup.runtime.Symbol)
         	   m.append( "("+info.toString()+")" );
        	m.append(" : "+message);
        	System.err.println(m);
        }
      }

      public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        throw new RuntimeException("Fatal Syntax Error");
      }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {




    public void trigger(AccionSemantica accionSemantica, String s){
        Traductor.getInstance();
        System.out.println("Se disparo una accion semantica: " + String.valueOf(accionSemantica));
        try{
            if(s.contains("$")){
                InsertarTS insertarTS = (InsertarTS) Traductor.accionesSemanticas.get(accionSemantica);
                if(s.contains("Variable")){


                    insertarTS.ejecutar("Variable");
                }else if(s.contains("Funcion")){

                    insertarTS.ejecutar("Funcion");
                }else if(s.contains("Parametro")){

                    insertarTS.ejecutar("Parametro");
                }
            }else{
                Traductor.accionesSemanticas.get(accionSemantica).ejecutar(s);


            }
            System.out.println("--------------------------------Pila semantica----------------------------");
                            Traductor.getInstance().getPilaSemantica().mostrarPila();
                            System.out.println("--------------------------------fin de la pila semantica----------------------------");
        }catch(ErrorSemantico e){
            Traductor.getInstance().addError(e);
            System.out.println("Error al ejecutar accion semantica: " + String.valueOf(accionSemantica));
        }
    }
    public void testPrint(String s){
        System.out.println("Test print: " + s);
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Declaracion ::= Declaracion_Specs PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Declaracion ::= Declaracion_Specs Init_Declarador_Lista PuntoComa 
            {
              Object RESULT =null;
		trigger(AccionSemantica.INSERTAR_TS, "$Variable");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TipoDato ::= Char 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.RECUERDA_TIPO, tipo.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoDato",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TipoDato ::= Int 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.RECUERDA_TIPO, tipo.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoDato",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TipoDato ::= Long 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.RECUERDA_TIPO,  tipo.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoDato",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TipoDato ::= Short 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.RECUERDA_TIPO, tipo.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoDato",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TipoDato ::= Void 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TipoDato",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaracion_Specs ::= Const Declaracion_Specs 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion_Specs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaracion_Specs ::= Static Declaracion_Specs 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion_Specs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaracion_Specs ::= TipoDato 
            {
              Object RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ts = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion_Specs",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Init_Declarador_Lista ::= Init_Declarador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init_Declarador_Lista",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Init_Declarador_Lista ::= Init_Declarador_Lista Coma Init_Declarador 
            {
              Object RESULT =null;
		int idlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init_Declarador_Lista",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Init_Declarador ::= Declarador 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init_Declarador",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Init_Declarador ::= Declarador Igual Inicializador 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("Recuerda el inicializador");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Init_Declarador",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Declarador ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.RECUERDA_ID, identifier.toString()); trigger(AccionSemantica.INSERTAR_TS,"$Funcion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Declarador ::= ParentesisIzq Declarador ParentesisDer 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Declarador ::= Declarador CorcheteIzq ExpConst CorcheteDer 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Declarador ::= Declarador CorcheteIzq CorcheteDer 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$0 ::= 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
trigger(AccionSemantica.INSERTAR_TS, "$Parametro");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Declarador ::= Declarador ParentesisIzq Parametros_Lista NT$0 ParentesisDer 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Declarador ::= Declarador ParentesisIzq Lista_Identificador ParentesisDer 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Declarador ::= Declarador ParentesisIzq ParentesisDer 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Parametros_Lista ::= DeclaracionParametros 
            {
              Object RESULT =null;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros_Lista",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Parametros_Lista ::= Parametros_Lista Coma DeclaracionParametros 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Parametros_Lista",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DeclaracionParametros ::= Declaracion_Specs Declarador 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionParametros",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DeclaracionParametros ::= Declaracion_Specs Declarador_Abstracto 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ad = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionParametros",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DeclaracionParametros ::= Declaracion_Specs 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionParametros",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Declarador_Abstracto ::= ParentesisIzq Declarador_Abstracto ParentesisDer 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ad = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador_Abstracto",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Declarador_Abstracto ::= CorcheteIzq CorcheteDer 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador_Abstracto",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Declarador_Abstracto ::= CorcheteIzq ExpConst CorcheteDer 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador_Abstracto",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Declarador_Abstracto ::= Declarador_Abstracto CorcheteIzq CorcheteDer 
            {
              Object RESULT =null;
		int dadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dad = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador_Abstracto",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Declarador_Abstracto ::= Declarador_Abstracto CorcheteIzq ExpConst CorcheteDer 
            {
              Object RESULT =null;
		int dadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dad = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int celeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador_Abstracto",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Declarador_Abstracto ::= ParentesisIzq ParentesisDer 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador_Abstracto",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Declarador_Abstracto ::= ParentesisIzq Parametros_Lista ParentesisDer 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ptlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ptlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ptl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador_Abstracto",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Declarador_Abstracto ::= Declarador_Abstracto ParentesisIzq ParentesisDer 
            {
              Object RESULT =null;
		int dadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dad = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador_Abstracto",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Declarador_Abstracto ::= Declarador_Abstracto ParentesisIzq Parametros_Lista ParentesisDer 
            {
              Object RESULT =null;
		int dadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object dad = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ptlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ptlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ptl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declarador_Abstracto",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Lista_Identificador ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.RECUERDA_ID,  id.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lista_Identificador",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Lista_Identificador ::= Lista_Identificador Coma IDENTIFICADOR 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.RECUERDA_ID,  id.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lista_Identificador",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Inicializador ::= Asignar_Expresion 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inicializador",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Inicializador ::= LlaveIzq Inicializador_lista LlaveDer 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inicializador",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Inicializador ::= LlaveIzq Inicializador_lista Coma LlaveDer 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inicializador",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Inicializador_lista ::= Inicializador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inicializador_lista",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Inicializador_lista ::= Inicializador_lista Coma Inicializador 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Inicializador_lista",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Asignar_Expresion ::= ExpCondicional 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignar_Expresion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Asignar_Expresion ::= ExpUnaria Operador_Asignacion Asignar_Expresion 
            {
              Object RESULT =null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ue = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object aop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignar_Expresion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Operador_Asignacion ::= Igual 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operador_Asignacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Operador_Asignacion ::= MultiplicacionAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operador_Asignacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Operador_Asignacion ::= DivisionAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operador_Asignacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Operador_Asignacion ::= ModuloAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operador_Asignacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Operador_Asignacion ::= SumaAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operador_Asignacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Operador_Asignacion ::= RestaAsignacion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operador_Asignacion",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpCondicional ::= ExpLogica_OR 
            {
              Object RESULT =null;
		int eloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object elo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpCondicional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpCondicional ::= ExpLogica_OR SignoPregunta Exp DosPuntos ExpCondicional 
            {
              Object RESULT =null;
		int eloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object elo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpCondicional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ExpLogica_OR ::= ExpLogica_AND 
            {
              Object RESULT =null;
		int elaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ela = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpLogica_OR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$1 ::= 
            {
              Object RESULT =null;
		int eloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object elo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println("Recuerda ||");trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExpLogica_OR ::= ExpLogica_OR OrDoble NT$1 ExpLogica_AND 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object elo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpLogica_OR",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExpLogica_AND ::= ExpOr 
            {
              Object RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpLogica_AND",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$2 ::= 
            {
              Object RESULT =null;
		int elaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ela = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println("Recuerda &&");trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExpLogica_AND ::= ExpLogica_AND AndDoble NT$2 ExpOr 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int elaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ela = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpLogica_AND",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExpOr ::= ExpAnd 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpOr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$3 ::= 
            {
              Object RESULT =null;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println("Recuerda |");trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExpOr ::= ExpOr Or NT$3 ExpAnd 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object eo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpOr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExpAnd ::= ExpIgualdad 
            {
              Object RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAnd",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$4 ::= 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println("Recuerda &");trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExpAnd ::= ExpAnd And NT$4 ExpIgualdad 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAnd",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExpIgualdad ::= ExpRelacional 
            {
              Object RESULT =null;
		int erleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpIgualdad",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ExpIgualdad ::= ExpIgualdad DobleIgual ExpRelacional 
            {
              Object RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpIgualdad",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ExpIgualdad ::= ExpIgualdad Diferente ExpRelacional 
            {
              Object RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ei = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int erleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int erright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object er = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpIgualdad",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ExpRelacional ::= ExpAditiva 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExpRelacional ::= ExpRelacional Menor ExpAditiva 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ExpRelacional ::= ExpRelacional Mayor ExpAditiva 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ExpRelacional ::= ExpRelacional MenorIgual ExpAditiva 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ExpRelacional ::= ExpRelacional MayorIgual ExpAditiva 
            {
              Object RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpRelacional",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ExpAditiva ::= ExpMultiplicativa 
            {
              Object RESULT =null;
		int emleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int emright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object em = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAditiva",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$5 ::= 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ExpAditiva ::= ExpAditiva Mas NT$5 ExpMultiplicativa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int emleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int emright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object em = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAditiva",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$6 ::= 
            {
              Object RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ExpAditiva ::= ExpAditiva Menos NT$6 ExpMultiplicativa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ea = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int emleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int emright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object em = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpAditiva",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ExpMultiplicativa ::= ExpUnaria 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiplicativa",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$7 ::= 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ExpMultiplicativa ::= ExpMultiplicativa Multiplicacion NT$7 ExpUnaria 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiplicativa",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$8 ::= 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExpMultiplicativa ::= ExpMultiplicativa Division NT$8 ExpUnaria 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiplicativa",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$9 ::= 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
trigger(AccionSemantica.RECUERDA_OP, op.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$9",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ExpMultiplicativa ::= ExpMultiplicativa Modulo NT$9 ExpUnaria 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpMultiplicativa",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ExpUnaria ::= ExpPostfija 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpUnaria",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$10 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println("Acordarse inc");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$10",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ExpUnaria ::= Incremento NT$10 ExpUnaria 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpUnaria",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$11 ::= 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println("Acordarse dec");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$11",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExpUnaria ::= Decremento NT$11 ExpUnaria 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int euleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int euright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object eu = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpUnaria",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExpPostfija ::= ExpPrimaria 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ExpPostfija ::= ExpPostfija CorcheteIzq Exp CorcheteDer 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object index = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExpPostfija ::= ExpPostfija ParentesisIzq ParentesisDer 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ExpPostfija ::= ExpPostfija ParentesisIzq Exp ParentesisDer 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExpPostfija ::= ExpPostfija Punto IDENTIFICADOR 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExpPostfija ::= ExpPostfija Incremento 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ExpPostfija ::= ExpPostfija Decremento 
            {
              Object RESULT =null;
		int epleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ep = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPostfija",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Exp ::= Asignar_Expresion 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Exp ::= Exp Coma Asignar_Expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exp",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExpConst ::= ExpCondicional 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpConst",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ExpPrimaria ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.RECUERDA_VARIABLE, ident.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ExpPrimaria ::= Const 
            {
              Object RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object constant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExpPrimaria ::= LITERAL 
            {
              Object RESULT =null;
		int literalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int literalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object literal = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.RECUERDA_CONSTANTE, literal.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ExpPrimaria ::= ParentesisIzq Exp ParentesisDer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$12 ::= 
            {
              Object RESULT =null;
MSG_ERROR = "Token inesperado";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$12",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ExpPrimaria ::= error NT$12 ParentesisIzq 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpPrimaria",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PROGRAMA ::= DECLARACIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PROGRAMA ::= PROGRAMA DECLARACIONES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARACIONES ::= Declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARACIONES ::= DeclaracionFuncion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$13 ::= 
            {
              Object RESULT =null;
MSG_ERROR = "Token insperado";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$13",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DECLARACIONES ::= error NT$13 PuntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$14 ::= 
            {
              Object RESULT =null;
MSG_ERROR = "Token inesperado }";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$14",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DECLARACIONES ::= error NT$14 LlaveIzq 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$15 ::= 
            {
              Object RESULT =null;
MSG_ERROR = "Se esperaba una }";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$15",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECLARACIONES ::= error NT$15 LlaveDer 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Declaracion_Lista ::= Declaracion 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion_Lista",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Declaracion_Lista ::= Declaracion_Lista Declaracion 
            {
              Object RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Declaracion_Lista",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$16 ::= 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Parser.newScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$16",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DeclaracionFuncion ::= Declaracion_Specs Declarador Declaracion_Lista NT$16 DeclaracionCompuesta 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Parser.deleteScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$17 ::= 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Parser.newScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$17",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DeclaracionFuncion ::= Declaracion_Specs Declarador NT$17 DeclaracionCompuesta 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Parser.deleteScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$18 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Parser.newScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$18",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DeclaracionFuncion ::= Declarador Declaracion_Lista NT$18 DeclaracionCompuesta 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Parser.deleteScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$19 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Parser.newScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$19",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DeclaracionFuncion ::= Declarador NT$19 DeclaracionCompuesta 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Parser.deleteScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DeclaracionFuncion ::= DeclaracionCompuesta 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionFuncion",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Lista_Statement ::= Statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lista_Statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Lista_Statement ::= Lista_Statement Statement 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lista_Statement",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DeclaracionCompuesta ::= LlaveIzq LlaveDer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionCompuesta",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DeclaracionCompuesta ::= LlaveIzq Lista_Statement LlaveDer 
            {
              Object RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionCompuesta",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DeclaracionCompuesta ::= LlaveIzq Declaracion_Lista LlaveDer 
            {
              Object RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionCompuesta",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DeclaracionCompuesta ::= LlaveIzq Declaracion_Lista Lista_Statement LlaveDer 
            {
              Object RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ls = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclaracionCompuesta",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ExpStatement ::= PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ExpStatement ::= Exp PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$20 ::= 
            {
              Object RESULT =null;
MSG_ERROR = "Se esperaba otro token";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$20",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ExpStatement ::= error NT$20 PuntoComa 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Statement_Label ::= IDENTIFICADOR DosPuntos Statement 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement_Label",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Statement_Label ::= Case ExpConst DosPuntos Statement 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement_Label",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Statement_Label ::= Default DosPuntos Statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement_Label",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SeleccionStatement ::= seleccionStatementIF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SeleccionStatement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SeleccionStatement ::= Switch ParentesisIzq Exp ParentesisDer Statement 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SeleccionStatement",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$21 ::= 
            {
              Object RESULT =null;
trigger(AccionSemantica.START_IF, "IF 339");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$21",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$22 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
trigger(AccionSemantica.EVAL_BINARY, "Eval binary") ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$22",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
trigger(AccionSemantica.TEST_IF, "test if");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$23",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // seleccionStatementIF ::= If NT$21 ParentesisIzq Exp NT$22 ParentesisDer NT$23 Statement seleccionStatementIFElse 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seleccionStatementIF",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$24 ::= 
            {
              Object RESULT =null;
trigger(AccionSemantica.START_ELSE, "Else 340");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$24",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // seleccionStatementIFElse ::= Else NT$24 Statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		trigger(AccionSemantica.END_IF, "End IF 339");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seleccionStatementIFElse",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // IteracionStatement ::= While ParentesisIzq Exp ParentesisDer Statement 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IteracionStatement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // IteracionStatement ::= Do Statement While ParentesisIzq Exp ParentesisDer PuntoComa 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IteracionStatement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // IteracionStatement ::= For ParentesisIzq ExpStatement ExpStatement ParentesisDer Statement 
            {
              Object RESULT =null;
		int es1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int es1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object es1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int es2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int es2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object es2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IteracionStatement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // IteracionStatement ::= For ParentesisIzq ExpStatement ExpStatement Exp ParentesisDer Statement 
            {
              Object RESULT =null;
		int es1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int es1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object es1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int es2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int es2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object es2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IteracionStatement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Statement ::= Statement_Label 
            {
              Object RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$25 ::= 
            {
              Object RESULT =null;
 Parser.newScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$25",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Statement ::= NT$25 DeclaracionCompuesta 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Parser.deleteScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Statement ::= ExpStatement 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Statement ::= SeleccionStatement 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Statement ::= IteracionStatement 
            {
              Object RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Statement ::= JumpStatement 
            {
              Object RESULT =null;
		int jsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int jsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object js = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Statement ::= ReadStatement 
            {
              Object RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Statement ::= WriteStatement 
            {
              Object RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ws = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // JumpStatement ::= Continue PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JumpStatement",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // JumpStatement ::= Break PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JumpStatement",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // JumpStatement ::= Return PuntoComa 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JumpStatement",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // JumpStatement ::= Return Exp PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("JumpStatement",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ReadStatement ::= Read ParentesisIzq ExpStatement ParentesisDer 
            {
              Object RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStatement",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // WriteStatement ::= Write ParentesisIzq Exp ParentesisDer 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStatement",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
